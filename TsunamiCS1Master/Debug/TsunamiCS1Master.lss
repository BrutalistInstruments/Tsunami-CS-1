
TsunamiCS1Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001bc  00800200  00003cd4  00003d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003cd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000416  008003bc  008003bc  00003f24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003f24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00003f98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007a20  00000000  00000000  000043d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020f2  00000000  00000000  0000bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000362f  00000000  00000000  0000deea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b98  00000000  00000000  0001151c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001502  00000000  00000000  000120b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000050e1  00000000  00000000  000135b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00018697  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
       6:	00 00       	nop
       8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
       a:	00 00       	nop
       c:	4f c2       	rjmp	.+1182   	; 0x4ac <__vector_3>
       e:	00 00       	nop
      10:	6d c2       	rjmp	.+1242   	; 0x4ec <__vector_4>
      12:	00 00       	nop
      14:	8b c2       	rjmp	.+1302   	; 0x52c <__vector_5>
      16:	00 00       	nop
      18:	a9 c2       	rjmp	.+1362   	; 0x56c <__vector_6>
      1a:	00 00       	nop
      1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
      1e:	00 00       	nop
      20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
      32:	00 00       	nop
      34:	f9 c0       	rjmp	.+498    	; 0x228 <__bad_interrupt>
      36:	00 00       	nop
      38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__vector_15>
      3e:	00 00       	nop
      40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
      46:	00 00       	nop
      48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
      4e:	00 00       	nop
      50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__vector_21>
      58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
      66:	00 00       	nop
      68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__vector_27>
      70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
      72:	00 00       	nop
      74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
      76:	00 00       	nop
      78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__vector_32>
      84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
      86:	00 00       	nop
      88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
      8e:	00 00       	nop
      90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
      92:	00 00       	nop
      94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
      96:	00 00       	nop
      98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__vector_54>
      dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0d 03       	fmul	r16, r21
      e6:	f7 04       	cpc	r15, r7
      e8:	f7 04       	cpc	r15, r7
      ea:	f7 04       	cpc	r15, r7
      ec:	f7 04       	cpc	r15, r7
      ee:	f7 04       	cpc	r15, r7
      f0:	f7 04       	cpc	r15, r7
      f2:	f7 04       	cpc	r15, r7
      f4:	f7 04       	cpc	r15, r7
      f6:	f7 04       	cpc	r15, r7
      f8:	f7 04       	cpc	r15, r7
      fa:	f7 04       	cpc	r15, r7
      fc:	f7 04       	cpc	r15, r7
      fe:	f7 04       	cpc	r15, r7
     100:	f7 04       	cpc	r15, r7
     102:	f7 04       	cpc	r15, r7
     104:	f7 04       	cpc	r15, r7
     106:	24 03       	mulsu	r18, r20
     108:	41 03       	mulsu	r20, r17
     10a:	68 03       	fmul	r22, r16
     10c:	f7 04       	cpc	r15, r7
     10e:	f7 04       	cpc	r15, r7
     110:	f7 04       	cpc	r15, r7
     112:	f7 04       	cpc	r15, r7
     114:	f7 04       	cpc	r15, r7
     116:	2c 03       	fmul	r18, r20
     118:	49 03       	fmul	r20, r17
     11a:	70 03       	mulsu	r23, r16
     11c:	f7 04       	cpc	r15, r7
     11e:	f7 04       	cpc	r15, r7
     120:	f7 04       	cpc	r15, r7
     122:	f7 04       	cpc	r15, r7
     124:	f7 04       	cpc	r15, r7
     126:	8b 03       	fmulsu	r16, r19
     128:	c0 03       	fmuls	r20, r16
     12a:	d4 03       	fmuls	r21, r20
     12c:	09 04       	cpc	r0, r9
     12e:	75 04       	cpc	r7, r5
     130:	f7 04       	cpc	r15, r7
     132:	f7 04       	cpc	r15, r7
     134:	f7 04       	cpc	r15, r7
     136:	93 03       	fmuls	r17, r19
     138:	c8 03       	fmulsu	r20, r16
     13a:	dc 03       	fmulsu	r21, r20
     13c:	11 04       	cpc	r1, r1
     13e:	7d 04       	cpc	r7, r13
     140:	f7 04       	cpc	r15, r7
     142:	f7 04       	cpc	r15, r7
     144:	f7 04       	cpc	r15, r7
     146:	b7 04       	cpc	r11, r7
     148:	d1 04       	cpc	r13, r1
     14a:	f0 04       	cpc	r15, r0
     14c:	f7 04       	cpc	r15, r7
     14e:	f7 04       	cpc	r15, r7
     150:	f7 04       	cpc	r15, r7
     152:	f7 04       	cpc	r15, r7
     154:	f7 04       	cpc	r15, r7
     156:	bf 04       	cpc	r11, r15
     158:	d9 04       	cpc	r13, r9
     15a:	9b 0b       	sbc	r25, r27
     15c:	64 0e       	add	r6, r20
     15e:	64 0e       	add	r6, r20
     160:	64 0e       	add	r6, r20
     162:	64 0e       	add	r6, r20
     164:	64 0e       	add	r6, r20
     166:	64 0e       	add	r6, r20
     168:	64 0e       	add	r6, r20
     16a:	64 0e       	add	r6, r20
     16c:	64 0e       	add	r6, r20
     16e:	64 0e       	add	r6, r20
     170:	64 0e       	add	r6, r20
     172:	64 0e       	add	r6, r20
     174:	64 0e       	add	r6, r20
     176:	64 0e       	add	r6, r20
     178:	64 0e       	add	r6, r20
     17a:	b1 0b       	sbc	r27, r17
     17c:	cb 0b       	sbc	r28, r27
     17e:	f1 0b       	sbc	r31, r17
     180:	20 0c       	add	r2, r0
     182:	64 0e       	add	r6, r20
     184:	64 0e       	add	r6, r20
     186:	64 0e       	add	r6, r20
     188:	64 0e       	add	r6, r20
     18a:	64 0e       	add	r6, r20
     18c:	e8 0b       	sbc	r30, r24
     18e:	0e 0c       	add	r0, r14
     190:	3d 0c       	add	r3, r13
     192:	64 0e       	add	r6, r20
     194:	64 0e       	add	r6, r20
     196:	64 0e       	add	r6, r20
     198:	64 0e       	add	r6, r20
     19a:	4e 0c       	add	r4, r14
     19c:	68 0c       	add	r6, r8
     19e:	a1 0c       	add	r10, r1
     1a0:	ed 0c       	add	r14, r13
     1a2:	20 0d       	add	r18, r0
     1a4:	8a 0d       	add	r24, r10
     1a6:	64 0e       	add	r6, r20
     1a8:	64 0e       	add	r6, r20
     1aa:	64 0e       	add	r6, r20
     1ac:	85 0c       	add	r8, r5
     1ae:	be 0c       	add	r11, r14
     1b0:	0a 0d       	add	r16, r10
     1b2:	3d 0d       	add	r19, r13
     1b4:	a7 0d       	add	r26, r7
     1b6:	64 0e       	add	r6, r20
     1b8:	64 0e       	add	r6, r20
     1ba:	d0 0d       	add	r29, r0
     1bc:	ea 0d       	add	r30, r10
     1be:	19 0e       	add	r1, r25
     1c0:	48 0e       	add	r4, r24
     1c2:	64 0e       	add	r6, r20
     1c4:	64 0e       	add	r6, r20
     1c6:	64 0e       	add	r6, r20
     1c8:	64 0e       	add	r6, r20
     1ca:	64 0e       	add	r6, r20
     1cc:	07 0e       	add	r0, r23
     1ce:	36 0e       	add	r3, r22
     1d0:	81 14       	cp	r8, r1
     1d2:	84 14       	cp	r8, r4
     1d4:	87 14       	cp	r8, r7
     1d6:	8a 14       	cp	r8, r10
     1d8:	8d 14       	cp	r8, r13
     1da:	90 14       	cp	r9, r0
     1dc:	93 14       	cp	r9, r3
     1de:	96 14       	cp	r9, r6
     1e0:	99 14       	cp	r9, r9
     1e2:	9c 14       	cp	r9, r12
     1e4:	9f 14       	cp	r9, r15
     1e6:	a2 14       	cp	r10, r2

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d1 e2       	ldi	r29, 0x21	; 33
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	13 e0       	ldi	r17, 0x03	; 3
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	e4 ed       	ldi	r30, 0xD4	; 212
     200:	fc e3       	ldi	r31, 0x3C	; 60
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	ac 3b       	cpi	r26, 0xBC	; 188
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	27 e0       	ldi	r18, 0x07	; 7
     214:	ac eb       	ldi	r26, 0xBC	; 188
     216:	b3 e0       	ldi	r27, 0x03	; 3
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a2 3d       	cpi	r26, 0xD2	; 210
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	8d d7       	rcall	.+3866   	; 0x113e <main>
     224:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <_exit>

00000228 <__bad_interrupt>:
     228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <__vector_15>:
uint8_t buttonsCurrentCycle;
uint16_t lastFullBits = 0;
uint8_t currentTrig;

ISR(TIMER2_OVF_vect)
{
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	2f 93       	push	r18
     236:	3f 93       	push	r19
     238:	8f 93       	push	r24
     23a:	9f 93       	push	r25

static inline void debounce()
{
	static uint8_t vcount_low = 0xFF, vcount_high = 0xFF;
	static uint8_t button_state = 0;
	uint8_t state_changed = ~BUTTON_PIN ^ button_state;
     23c:	83 b1       	in	r24, 0x03	; 3
     23e:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <__data_end>
     242:	80 95       	com	r24
     244:	38 2f       	mov	r19, r24
     246:	32 27       	eor	r19, r18
	VC_DEC_OR_SET(vcount_high, vcount_low, state_changed);
     248:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vcount_low.1745>
     24c:	93 23       	and	r25, r19
     24e:	89 2f       	mov	r24, r25
     250:	80 95       	com	r24
     252:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <vcount_low.1745>
     256:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     25a:	93 23       	and	r25, r19
     25c:	98 27       	eor	r25, r24
     25e:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
     262:	83 23       	and	r24, r19
	state_changed &= vcount_low & vcount_high;
     264:	89 23       	and	r24, r25
	button_state ^= state_changed;
     266:	92 2f       	mov	r25, r18
     268:	98 27       	eor	r25, r24
     26a:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <__data_end>
	buttons_down |= button_state&state_changed;
     26e:	20 91 cf 03 	lds	r18, 0x03CF	; 0x8003cf <buttons_down>
     272:	89 23       	and	r24, r25
     274:	82 2b       	or	r24, r18
     276:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <buttons_down>
	debounce();
}
     27a:	9f 91       	pop	r25
     27c:	8f 91       	pop	r24
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <initButtons>:

void initButtons()
{
	//this will initialize all of the buttons on the front panel
	//main trigger buttons
	PORTA = 0xFF;
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	82 b9       	out	0x02, r24	; 2
	PORTL = 0xFF;
     290:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	//GPButtons and Encoder buttons
	PORTB = 0B01111111;
     294:	8f e7       	ldi	r24, 0x7F	; 127
     296:	85 b9       	out	0x05, r24	; 5
     298:	08 95       	ret

0000029a <listenTrigButtons>:

}

void listenTrigButtons(Pattern *buttonCurrentPattern, Globals *currentGlobals)
{
     29a:	cf 92       	push	r12
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	6c 01       	movw	r12, r24
	buttonsCurrentCycle = (PINL^255); //^ = bitwise XOR operation.
     2aa:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
     2ae:	20 95       	com	r18
     2b0:	20 93 cd 03 	sts	0x03CD, r18	; 0x8003cd <buttonsCurrentCycle>
	(currentGlobals->currentTrigButtons) = (buttonsCurrentCycle << 8) | (PINA^255);
     2b4:	90 b1       	in	r25, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	32 2f       	mov	r19, r18
     2ba:	22 27       	eor	r18, r18
     2bc:	90 95       	com	r25
     2be:	29 2b       	or	r18, r25
     2c0:	db 01       	movw	r26, r22
     2c2:	2d 93       	st	X+, r18
     2c4:	3c 93       	st	X, r19
	if(currentGlobals->currentTrigButtons!=lastFullBits) //we do read the buttons every cycle, but we don't need to update everything base on the buttons if they haven't changed.
     2c6:	40 91 bd 03 	lds	r20, 0x03BD	; 0x8003bd <lastFullBits>
     2ca:	50 91 be 03 	lds	r21, 0x03BE	; 0x8003be <lastFullBits+0x1>
     2ce:	24 17       	cp	r18, r20
     2d0:	35 07       	cpc	r19, r21
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <listenTrigButtons+0x3c>
     2d4:	43 c0       	rjmp	.+134    	; 0x35c <listenTrigButtons+0xc2>
     2d6:	7b 01       	movw	r14, r22
	{
		lastFullBits = currentGlobals->currentTrigButtons;
     2d8:	30 93 be 03 	sts	0x03BE, r19	; 0x8003be <lastFullBits+0x1>
     2dc:	20 93 bd 03 	sts	0x03BD, r18	; 0x8003bd <lastFullBits>
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
     2e0:	fb 01       	movw	r30, r22
     2e2:	00 81       	ld	r16, Z
     2e4:	11 81       	ldd	r17, Z+1	; 0x01
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
		{
			currentTrig = (fullBitsParse&1);
     2e8:	90 2f       	mov	r25, r16
     2ea:	91 70       	andi	r25, 0x01	; 1
     2ec:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <currentTrig>
			if(currentTrig)
     2f0:	99 23       	and	r25, r25
     2f2:	79 f1       	breq	.+94     	; 0x352 <listenTrigButtons+0xb8>
			{
				uint8_t encoderAstate = currentGlobals->menuState >> 4;
				switch (encoderAstate)
     2f4:	d7 01       	movw	r26, r14
     2f6:	16 96       	adiw	r26, 0x06	; 6
     2f8:	9c 91       	ld	r25, X
     2fa:	92 95       	swap	r25
     2fc:	9f 70       	andi	r25, 0x0F	; 15
     2fe:	91 30       	cpi	r25, 0x01	; 1
     300:	51 f0       	breq	.+20     	; 0x316 <listenTrigButtons+0x7c>
     302:	18 f0       	brcs	.+6      	; 0x30a <listenTrigButtons+0x70>
     304:	94 30       	cpi	r25, 0x04	; 4
     306:	28 f5       	brcc	.+74     	; 0x352 <listenTrigButtons+0xb8>
     308:	1a c0       	rjmp	.+52     	; 0x33e <listenTrigButtons+0xa4>
				{
	
					//for "performance mode", we should just use the default case, and only have code for the cases where things are outside of that use case.
					case 0: //performance mode
					//we trigger a sound here based on the location of bc
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     30a:	4c 2f       	mov	r20, r28
     30c:	b7 01       	movw	r22, r14
     30e:	c6 01       	movw	r24, r12
     310:	0e 94 82 16 	call	0x2d04	; 0x2d04 <playTrack>
					break;
     314:	1e c0       	rjmp	.+60     	; 0x352 <listenTrigButtons+0xb8>

					case 1:
					buttonCurrentPattern->trackSequence[currentGlobals->currentStep] ^= currentGlobals->currentTrigButtons;
     316:	d7 01       	movw	r26, r14
     318:	14 96       	adiw	r26, 0x04	; 4
     31a:	ec 91       	ld	r30, X
     31c:	14 97       	sbiw	r26, 0x04	; 4
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	ec 0d       	add	r30, r12
     326:	fd 1d       	adc	r31, r13
     328:	e5 50       	subi	r30, 0x05	; 5
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	20 81       	ld	r18, Z
     32e:	31 81       	ldd	r19, Z+1	; 0x01
     330:	8d 91       	ld	r24, X+
     332:	9c 91       	ld	r25, X
     334:	82 27       	eor	r24, r18
     336:	93 27       	eor	r25, r19
     338:	91 83       	std	Z+1, r25	; 0x01
     33a:	80 83       	st	Z, r24
					//turn on step number, or turn off step number.
					//step sequencer mode.
					break;
     33c:	0a c0       	rjmp	.+20     	; 0x352 <listenTrigButtons+0xb8>
					//we want this functionality for both case 2 and case 3
					case 2:
					case 3:;
					//select track for sample assignment
					//uint16_t currentSample = (buttonCurrentPattern->trackSampleMSB[bc]<<8)|(buttonCurrentPattern->trackSampleLSB[bc]);
					currentGlobals->currentTrack = bc;
     33e:	f7 01       	movw	r30, r14
     340:	c5 83       	std	Z+5, r28	; 0x05
					currentGlobals->valueChangeFlag |=(1<<triggerChange);
     342:	82 85       	ldd	r24, Z+10	; 0x0a
     344:	82 60       	ori	r24, 0x02	; 2
     346:	82 87       	std	Z+10, r24	; 0x0a
					playTrack(buttonCurrentPattern, currentGlobals,bc);
     348:	4c 2f       	mov	r20, r28
     34a:	b7 01       	movw	r22, r14
     34c:	c6 01       	movw	r24, r12
     34e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <playTrack>
					default:
					//this should be the same as case 0;
					break;
				}
			}
			fullBitsParse = fullBitsParse>>1;
     352:	16 95       	lsr	r17
     354:	07 95       	ror	r16
	{
		lastFullBits = currentGlobals->currentTrigButtons;
		uint16_t fullBitsParse = currentGlobals->currentTrigButtons;
		//play sounds, if that is the switch case on the encoder
		//updateLEDs
		for(uint8_t bc = 0; bc<16; bc++)//bc for buttonCounter
     356:	cf 5f       	subi	r28, 0xFF	; 255
     358:	c0 31       	cpi	r28, 0x10	; 16
     35a:	31 f6       	brne	.-116    	; 0x2e8 <listenTrigButtons+0x4e>
				}
			}
			fullBitsParse = fullBitsParse>>1;
		}
	}
}
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	cf 90       	pop	r12
     36a:	08 95       	ret

0000036c <listenGPButtons>:

void listenGPButtons(Pattern currentPattern, Globals *currentGlobals) //may need to be a pointer
{
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	cc 57       	subi	r28, 0x7C	; 124
     37c:	de 4f       	sbci	r29, 0xFE	; 254
     37e:	08 81       	ld	r16, Y
     380:	19 81       	ldd	r17, Y+1	; 0x01
     382:	c4 58       	subi	r28, 0x84	; 132
     384:	d1 40       	sbci	r29, 0x01	; 1

	if(button_down(1 << PB5))
     386:	80 e2       	ldi	r24, 0x20	; 32
     388:	77 d0       	rcall	.+238    	; 0x478 <button_down>
     38a:	88 23       	and	r24, r24
     38c:	41 f1       	breq	.+80     	; 0x3de <listenGPButtons+0x72>
	{ //top encoder button
		if(currentGlobals->menuState>>4==3)
     38e:	f8 01       	movw	r30, r16
     390:	86 81       	ldd	r24, Z+6	; 0x06
     392:	82 95       	swap	r24
     394:	8f 70       	andi	r24, 0x0F	; 15
     396:	83 30       	cpi	r24, 0x03	; 3
     398:	21 f4       	brne	.+8      	; 0x3a2 <listenGPButtons+0x36>
		{
			globalWrite(currentGlobals);
     39a:	c8 01       	movw	r24, r16
     39c:	0e 94 0d 1c 	call	0x381a	; 0x381a <globalWrite>
     3a0:	1e c0       	rjmp	.+60     	; 0x3de <listenGPButtons+0x72>
		}else
		{
			eepromSavePattern(currentPattern, currentGlobals->currentPatternNumber);
     3a2:	f8 01       	movw	r30, r16
     3a4:	83 81       	ldd	r24, Z+3	; 0x03
     3a6:	8f 93       	push	r24
     3a8:	8d b7       	in	r24, 0x3d	; 61
     3aa:	9e b7       	in	r25, 0x3e	; 62
     3ac:	8b 57       	subi	r24, 0x7B	; 123
     3ae:	91 40       	sbci	r25, 0x01	; 1
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	9e bf       	out	0x3e, r25	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	8d bf       	out	0x3d, r24	; 61
     3ba:	ad b7       	in	r26, 0x3d	; 61
     3bc:	be b7       	in	r27, 0x3e	; 62
     3be:	11 96       	adiw	r26, 0x01	; 1
     3c0:	8b e7       	ldi	r24, 0x7B	; 123
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	fe 01       	movw	r30, r28
     3c6:	39 96       	adiw	r30, 0x09	; 9
     3c8:	01 90       	ld	r0, Z+
     3ca:	0d 92       	st	X+, r0
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <listenGPButtons+0x5c>
     3d0:	0e 94 6e 18 	call	0x30dc	; 0x30dc <eepromSavePattern>
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	cd bf       	out	0x3d, r28	; 61
		}
		
	}

	uint8_t encoderSwitchMask = 0b00001000;
	if(button_down(1<<PB6))
     3de:	80 e4       	ldi	r24, 0x40	; 64
     3e0:	4b d0       	rcall	.+150    	; 0x478 <button_down>
     3e2:	88 23       	and	r24, r24
     3e4:	51 f0       	breq	.+20     	; 0x3fa <listenGPButtons+0x8e>
		{//bottom encoder button
			uint8_t encoderBCheck = currentGlobals->menuState&encoderSwitchMask;
     3e6:	f8 01       	movw	r30, r16
     3e8:	86 81       	ldd	r24, Z+6	; 0x06
			if(encoderBCheck)
     3ea:	83 ff       	sbrs	r24, 3
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <listenGPButtons+0x88>
			{
				currentGlobals->menuState &=0b11110111;//turn off the encoderBFlag
     3ee:	87 7f       	andi	r24, 0xF7	; 247
     3f0:	86 83       	std	Z+6, r24	; 0x06
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <listenGPButtons+0x8e>

			}else
			{
				currentGlobals->menuState |=0b00001000; //turn on the encoderBFlag bit
     3f4:	88 60       	ori	r24, 0x08	; 8
     3f6:	f8 01       	movw	r30, r16
     3f8:	86 83       	std	Z+6, r24	; 0x06
			}
		}
	uint8_t playButtonMask = 0b0000001; //we could probably make a define for both of these masks.
	uint8_t playStateCheck = currentGlobals->playState & playButtonMask;
     3fa:	f8 01       	movw	r30, r16
	if(button_down(1<<PB4))
     3fc:	f7 80       	ldd	r15, Z+7	; 0x07
     3fe:	80 e1       	ldi	r24, 0x10	; 16
     400:	3b d0       	rcall	.+118    	; 0x478 <button_down>
     402:	88 23       	and	r24, r24
     404:	71 f0       	breq	.+28     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		if(playStateCheck)
     406:	f0 fe       	sbrs	r15, 0
     408:	06 c0       	rjmp	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		{
			currentGlobals->playState=0; //playstate is on, turn it off
     40a:	f8 01       	movw	r30, r16
     40c:	17 82       	std	Z+7, r1	; 0x07
			currentGlobals->currentGPButtons &=(~0x20); //turn the first bit
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	82 83       	std	Z+2, r24	; 0x02
     414:	06 c0       	rjmp	.+12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			
		}else
		{
			currentGlobals->playState=1;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	f8 01       	movw	r30, r16
     41a:	87 83       	std	Z+7, r24	; 0x07
			currentGlobals->currentGPButtons |= 0x20; //turn on the first bit
     41c:	82 81       	ldd	r24, Z+2	; 0x02
     41e:	80 62       	ori	r24, 0x20	; 32
     420:	82 83       	std	Z+2, r24	; 0x02
		}

	} //not sure which button this is
	uint8_t trackButtonMask = 0b00000001;
	uint8_t trackStateCheck = (currentGlobals->buttonSwitchFlag) & trackButtonMask;
     422:	f8 01       	movw	r30, r16
	if(button_down(1<<PB0))
     424:	f1 84       	ldd	r15, Z+9	; 0x09
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	27 d0       	rcall	.+78     	; 0x478 <button_down>
     42a:	88 23       	and	r24, r24
     42c:	71 f0       	breq	.+28     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	{
		if(trackStateCheck)
     42e:	f0 fe       	sbrs	r15, 0
     430:	06 c0       	rjmp	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		{
			currentGlobals->buttonSwitchFlag = 0;
     432:	f8 01       	movw	r30, r16
     434:	11 86       	std	Z+9, r1	; 0x09
			currentGlobals->currentGPButtons &=(~0x02);
     436:	82 81       	ldd	r24, Z+2	; 0x02
     438:	8d 7f       	andi	r24, 0xFD	; 253
     43a:	82 83       	std	Z+2, r24	; 0x02
     43c:	06 c0       	rjmp	.+12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		}else
		{
			currentGlobals->buttonSwitchFlag = 1;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	f8 01       	movw	r30, r16
     442:	81 87       	std	Z+9, r24	; 0x09
			currentGlobals->currentGPButtons |=0x02;
     444:	82 81       	ldd	r24, Z+2	; 0x02
     446:	82 60       	ori	r24, 0x02	; 2
		}
	}
	uint8_t fineButtonMask = 4;
	uint8_t fineStateCheck = (currentGlobals->currentGPButtons) & fineButtonMask;
     448:	82 83       	std	Z+2, r24	; 0x02
     44a:	f8 01       	movw	r30, r16
	if(button_down(1<<PB1))
     44c:	f2 80       	ldd	r15, Z+2	; 0x02
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	13 d0       	rcall	.+38     	; 0x478 <button_down>
     452:	88 23       	and	r24, r24
     454:	59 f0       	breq	.+22     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	{		
		if(fineStateCheck)
     456:	f2 fe       	sbrs	r15, 2
     458:	05 c0       	rjmp	.+10     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		{
			
			currentGlobals->currentGPButtons &=(~0x04);
     45a:	f8 01       	movw	r30, r16
     45c:	82 81       	ldd	r24, Z+2	; 0x02
     45e:	8b 7f       	andi	r24, 0xFB	; 251
     460:	82 83       	std	Z+2, r24	; 0x02
     462:	04 c0       	rjmp	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		}else
		{
			currentGlobals->currentGPButtons |=0x04;
     464:	f8 01       	movw	r30, r16
     466:	82 81       	ldd	r24, Z+2	; 0x02
     468:	84 60       	ori	r24, 0x04	; 4
     46a:	82 83       	std	Z+2, r24	; 0x02
		}
		
	}
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	08 95       	ret

00000478 <button_down>:

volatile uint8_t buttons_down;
uint8_t button_down(uint8_t button_mask)
{
	//I should probably check out what this is.
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     478:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     47a:	f8 94       	cli
	{
		button_mask &= buttons_down;
     47c:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <buttons_down>
     480:	89 23       	and	r24, r25
		buttons_down ^= button_mask;
     482:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <buttons_down>
     486:	98 27       	eor	r25, r24
     488:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <buttons_down>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     48c:	2f bf       	out	0x3f, r18	; 63
	}
	
	return button_mask;
     48e:	08 95       	ret

00000490 <initEncoders>:
{
	
	//Interrupt pins - 2,3,4,5
		
	//setup rising edge detection on Int pins 2 and 3 (would maybe want all pin states if this doesn't work).
	EICRA |=(1<<ISC31)|(1<<ISC30)|(1 << ISC21)|(1 << ISC20); 
     490:	e9 e6       	ldi	r30, 0x69	; 105
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	80 6f       	ori	r24, 0xF0	; 240
     498:	80 83       	st	Z, r24
	
	//same setup on pins 4 and 5
	EICRB |=(1<<ISC51)|(1<<ISC50)|(1 << ISC41)|(1 << ISC40);
     49a:	ea e6       	ldi	r30, 0x6A	; 106
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	8f 60       	ori	r24, 0x0F	; 15
     4a2:	80 83       	st	Z, r24
	
	//enable all 4 interrupts through masking
	EIMSK |=(1<<INT2)|(1<<INT3)|(1<<INT4)|(1<<INT5);
     4a4:	8d b3       	in	r24, 0x1d	; 29
     4a6:	8c 63       	ori	r24, 0x3C	; 60
     4a8:	8d bb       	out	0x1d, r24	; 29
     4aa:	08 95       	ret

000004ac <__vector_3>:


}
 
ISR(INT2_vect)
{
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	8f 93       	push	r24
	
	if((1<<topEncoderPinB)&encoderPortStates)//this means Pin 2 is coming after pin 3
     4b8:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <encoderPortStates>
     4bc:	81 ff       	sbrs	r24, 1
     4be:	0b c0       	rjmp	.+22     	; 0x4d6 <__vector_3+0x2a>
	{
		bottomEncoderValue--;
     4c0:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <bottomEncoderValue>
     4c4:	81 50       	subi	r24, 0x01	; 1
     4c6:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <bottomEncoderValue>
		encoderPortStates&=(1<<bottomEncoderPinB)|(1<<bottomEncoderPinA);//reset our two pins to low. 
     4ca:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <encoderPortStates>
     4ce:	8c 70       	andi	r24, 0x0C	; 12
     4d0:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <encoderPortStates>
     4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__vector_3+0x34>
	}
	else
	{
		encoderPortStates|=(1<<topEncoderPinA); //we want to set bit 0. 
     4d6:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <encoderPortStates>
     4da:	81 60       	ori	r24, 0x01	; 1
     4dc:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <encoderPortStates>
	}
}
     4e0:	8f 91       	pop	r24
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <__vector_4>:

ISR(INT3_vect)
{
     4ec:	1f 92       	push	r1
     4ee:	0f 92       	push	r0
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	0f 92       	push	r0
     4f4:	11 24       	eor	r1, r1
     4f6:	8f 93       	push	r24

	if((1<<topEncoderPinA)&encoderPortStates)//this means Pin 3 is coming after pin 2
     4f8:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <encoderPortStates>
     4fc:	80 ff       	sbrs	r24, 0
     4fe:	0b c0       	rjmp	.+22     	; 0x516 <__vector_4+0x2a>
	{
		bottomEncoderValue++;
     500:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <bottomEncoderValue>
     504:	8f 5f       	subi	r24, 0xFF	; 255
     506:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <bottomEncoderValue>
		encoderPortStates&=(1<<bottomEncoderPinA)|(1<<bottomEncoderPinB); //reset our two pins to low.
     50a:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <encoderPortStates>
     50e:	8c 70       	andi	r24, 0x0C	; 12
     510:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <encoderPortStates>
     514:	05 c0       	rjmp	.+10     	; 0x520 <__vector_4+0x34>
	}
	else
	{
		encoderPortStates|=(1<<topEncoderPinB); //we want to set bit 1.
     516:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <encoderPortStates>
     51a:	82 60       	ori	r24, 0x02	; 2
     51c:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <encoderPortStates>
	}
}
     520:	8f 91       	pop	r24
     522:	0f 90       	pop	r0
     524:	0f be       	out	0x3f, r0	; 63
     526:	0f 90       	pop	r0
     528:	1f 90       	pop	r1
     52a:	18 95       	reti

0000052c <__vector_5>:

ISR(INT4_vect)
{
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	0f 92       	push	r0
     534:	11 24       	eor	r1, r1
     536:	8f 93       	push	r24
	
	if((1<<bottomEncoderPinB)&encoderPortStates)//this means Pin 4 is coming after pin 5
     538:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <encoderPortStates>
     53c:	83 ff       	sbrs	r24, 3
     53e:	0b c0       	rjmp	.+22     	; 0x556 <__vector_5+0x2a>
	{
		topEncoderValue++;
     540:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <topEncoderValue>
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <topEncoderValue>
		encoderPortStates&=(1<<topEncoderPinA)|(1<<topEncoderPinB); //reset our two pins to low.
     54a:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <encoderPortStates>
     54e:	83 70       	andi	r24, 0x03	; 3
     550:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <encoderPortStates>
     554:	05 c0       	rjmp	.+10     	; 0x560 <__vector_5+0x34>
	}
	else
	{
		encoderPortStates|=(1<<bottomEncoderPinA); //we want to set bit 2.
     556:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <encoderPortStates>
     55a:	84 60       	ori	r24, 0x04	; 4
     55c:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <encoderPortStates>
	}
}
     560:	8f 91       	pop	r24
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <__vector_6>:

ISR(INT5_vect)
{
     56c:	1f 92       	push	r1
     56e:	0f 92       	push	r0
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	0f 92       	push	r0
     574:	11 24       	eor	r1, r1
     576:	8f 93       	push	r24
	
	if((1<<bottomEncoderPinA)&encoderPortStates)//this means Pin 3 is coming after pin 2
     578:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <encoderPortStates>
     57c:	82 ff       	sbrs	r24, 2
     57e:	0b c0       	rjmp	.+22     	; 0x596 <__vector_6+0x2a>
	{
		topEncoderValue--;
     580:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <topEncoderValue>
     584:	81 50       	subi	r24, 0x01	; 1
     586:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <topEncoderValue>
		encoderPortStates&=(1<<topEncoderPinA)|(1<<topEncoderPinB); //reset our two pins to low.
     58a:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <encoderPortStates>
     58e:	83 70       	andi	r24, 0x03	; 3
     590:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <encoderPortStates>
     594:	05 c0       	rjmp	.+10     	; 0x5a0 <__vector_6+0x34>
	}
	else
	{
		encoderPortStates|=(1<<bottomEncoderPinB); //we want to set bit 3.
     596:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <encoderPortStates>
     59a:	88 60       	ori	r24, 0x08	; 8
     59c:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <encoderPortStates>
	}
	
}
     5a0:	8f 91       	pop	r24
     5a2:	0f 90       	pop	r0
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	0f 90       	pop	r0
     5a8:	1f 90       	pop	r1
     5aa:	18 95       	reti

000005ac <listenEncoders>:


void listenEncoders(Pattern *currentPattern, Globals *currentGlobals)
{
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	9c 01       	movw	r18, r24
     5b2:	fb 01       	movw	r30, r22
	if(topEncoderValue!=topEncoderLastValue)
     5b4:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <topEncoderValue>
     5b8:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <topEncoderLastValue>
     5bc:	98 17       	cp	r25, r24
     5be:	89 f0       	breq	.+34     	; 0x5e2 <listenEncoders+0x36>
	{
		currentGlobals->menuState = ((topEncoderValue%4)<<4);
     5c0:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <topEncoderValue>
     5c4:	93 70       	andi	r25, 0x03	; 3
     5c6:	92 95       	swap	r25
     5c8:	90 7f       	andi	r25, 0xF0	; 240
     5ca:	96 83       	std	Z+6, r25	; 0x06
		bottomEncoderValue = 0; 
     5cc:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <bottomEncoderValue>
		bottomEncoderLastValue = 0; 
     5d0:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <bottomEncoderLastValue>
		currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5d4:	82 85       	ldd	r24, Z+10	; 0x0a
     5d6:	81 60       	ori	r24, 0x01	; 1
     5d8:	82 87       	std	Z+10, r24	; 0x0a
		topEncoderLastValue = topEncoderValue;
     5da:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <topEncoderValue>
     5de:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <topEncoderLastValue>
	}
	
	if(bottomEncoderValue!=bottomEncoderLastValue)
     5e2:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <bottomEncoderValue>
     5e6:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <bottomEncoderLastValue>
     5ea:	98 17       	cp	r25, r24
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <listenEncoders+0x44>
     5ee:	03 c2       	rjmp	.+1030   	; 0x9f6 <listenEncoders+0x44a>
	{
		 uint8_t menuSub = bottomEncoderValue - bottomEncoderLastValue;
     5f0:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <bottomEncoderValue>
     5f4:	a9 2f       	mov	r26, r25
     5f6:	a8 1b       	sub	r26, r24
		 currentGlobals->valueChangeFlag |= (1<<encoderChange);
     5f8:	92 85       	ldd	r25, Z+10	; 0x0a
     5fa:	91 60       	ori	r25, 0x01	; 1
     5fc:	92 87       	std	Z+10, r25	; 0x0a
		 			//if this value is negative, we increase the menu.
		 			//if positive, we decrement the menu.
		switch(currentGlobals->menuState)
     5fe:	46 81       	ldd	r20, Z+6	; 0x06
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	4b 33       	cpi	r20, 0x3B	; 59
     604:	51 05       	cpc	r21, r1
     606:	08 f0       	brcs	.+2      	; 0x60a <listenEncoders+0x5e>
     608:	f2 c1       	rjmp	.+996    	; 0x9ee <listenEncoders+0x442>
     60a:	ef 01       	movw	r28, r30
     60c:	fa 01       	movw	r30, r20
     60e:	88 27       	eor	r24, r24
     610:	ee 58       	subi	r30, 0x8E	; 142
     612:	ff 4f       	sbci	r31, 0xFF	; 255
     614:	8f 4f       	sbci	r24, 0xFF	; 255
     616:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__tablejump2__>
		{
			case PreformanceModeInit:
			if(menuSub==1)
     61a:	a1 30       	cpi	r26, 0x01	; 1
     61c:	41 f4       	brne	.+16     	; 0x62e <listenEncoders+0x82>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     61e:	8b 81       	ldd	r24, Y+3	; 0x03
     620:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     622:	11 f0       	breq	.+4      	; 0x628 <listenEncoders+0x7c>
		switch(currentGlobals->menuState)
		{
			case PreformanceModeInit:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     624:	8b 83       	std	Y+3, r24	; 0x03
     626:	0b c0       	rjmp	.+22     	; 0x63e <listenEncoders+0x92>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     628:	8f ef       	ldi	r24, 0xFF	; 255
     62a:	8b 83       	std	Y+3, r24	; 0x03
     62c:	08 c0       	rjmp	.+16     	; 0x63e <listenEncoders+0x92>
				}
				
			}else if(menuSub==255) //we don't want to hit this when switching menus after changing from the sequencer. 
     62e:	af 3f       	cpi	r26, 0xFF	; 255
     630:	31 f4       	brne	.+12     	; 0x63e <listenEncoders+0x92>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     632:	8b 81       	ldd	r24, Y+3	; 0x03
     634:	81 50       	subi	r24, 0x01	; 1
     636:	10 f0       	brcs	.+4      	; 0x63c <listenEncoders+0x90>
     638:	8b 83       	std	Y+3, r24	; 0x03
     63a:	01 c0       	rjmp	.+2      	; 0x63e <listenEncoders+0x92>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     63c:	1b 82       	std	Y+3, r1	; 0x03
				}
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     63e:	6b 81       	ldd	r22, Y+3	; 0x03
     640:	c9 01       	movw	r24, r18
     642:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <eepromLoadPattern>
			break;
     646:	d3 c1       	rjmp	.+934    	; 0x9ee <listenEncoders+0x442>
			
			case SequencerMenuArrow1:			
			if(menuSub==1)
     648:	a1 30       	cpi	r26, 0x01	; 1
     64a:	19 f4       	brne	.+6      	; 0x652 <listenEncoders+0xa6>
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     64c:	83 e1       	ldi	r24, 0x13	; 19
     64e:	8e 83       	std	Y+6, r24	; 0x06
     650:	ce c1       	rjmp	.+924    	; 0x9ee <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     652:	82 e1       	ldi	r24, 0x12	; 18
     654:	8e 83       	std	Y+6, r24	; 0x06
     656:	cb c1       	rjmp	.+918    	; 0x9ee <listenEncoders+0x442>
			}
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
     658:	a1 30       	cpi	r26, 0x01	; 1
     65a:	41 f4       	brne	.+16     	; 0x66c <listenEncoders+0xc0>
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     65c:	8b 81       	ldd	r24, Y+3	; 0x03
     65e:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->currentPatternNumber==0)
     660:	11 f0       	breq	.+4      	; 0x666 <listenEncoders+0xba>
			break;
			
			case SequencerMenuArrow1Select:
			if(menuSub==1)
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) + 1;
     662:	8b 83       	std	Y+3, r24	; 0x03
     664:	09 c0       	rjmp	.+18     	; 0x678 <listenEncoders+0xcc>
				if(currentGlobals->currentPatternNumber==0)
				{
					currentGlobals->currentPatternNumber=255;
     666:	8f ef       	ldi	r24, 0xFF	; 255
     668:	8b 83       	std	Y+3, r24	; 0x03
     66a:	06 c0       	rjmp	.+12     	; 0x678 <listenEncoders+0xcc>
				}
		
			}else
			{
				currentGlobals->currentPatternNumber = (currentGlobals->currentPatternNumber) - 1;
     66c:	8b 81       	ldd	r24, Y+3	; 0x03
     66e:	81 50       	subi	r24, 0x01	; 1
     670:	10 f0       	brcs	.+4      	; 0x676 <listenEncoders+0xca>
     672:	8b 83       	std	Y+3, r24	; 0x03
     674:	01 c0       	rjmp	.+2      	; 0x678 <listenEncoders+0xcc>
				if(currentGlobals->currentPatternNumber==255)
				{
					currentGlobals->currentPatternNumber=0;
     676:	1b 82       	std	Y+3, r1	; 0x03
				}	
			}
			eepromLoadPattern(currentPattern, currentGlobals->currentPatternNumber);
     678:	6b 81       	ldd	r22, Y+3	; 0x03
     67a:	c9 01       	movw	r24, r18
     67c:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <eepromLoadPattern>
			//this keeps the knob reads that will happen right after the eeprom load to write over the loaded values.
			//Now when you load a pattern, the saved positions of the knobs are unchanged until you turn a knob. 
			break;
     680:	b6 c1       	rjmp	.+876    	; 0x9ee <listenEncoders+0x442>
			
			case SequencerMenuArrow2:
			if(menuSub==1)
     682:	a1 30       	cpi	r26, 0x01	; 1
     684:	19 f4       	brne	.+6      	; 0x68c <listenEncoders+0xe0>
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     686:	81 e1       	ldi	r24, 0x11	; 17
     688:	8e 83       	std	Y+6, r24	; 0x06
     68a:	b1 c1       	rjmp	.+866    	; 0x9ee <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow3;
     68c:	83 e1       	ldi	r24, 0x13	; 19
     68e:	8e 83       	std	Y+6, r24	; 0x06
     690:	ae c1       	rjmp	.+860    	; 0x9ee <listenEncoders+0x442>
			}
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
     692:	a1 30       	cpi	r26, 0x01	; 1
     694:	79 f4       	brne	.+30     	; 0x6b4 <listenEncoders+0x108>
			{
				currentPattern->numSteps++;
     696:	f9 01       	movw	r30, r18
     698:	e6 53       	subi	r30, 0x36	; 54
     69a:	ff 4f       	sbci	r31, 0xFF	; 255
     69c:	90 81       	ld	r25, Z
     69e:	9f 5f       	subi	r25, 0xFF	; 255
				if(currentPattern->numSteps>64)
     6a0:	91 34       	cpi	r25, 0x41	; 65
     6a2:	10 f4       	brcc	.+4      	; 0x6a8 <listenEncoders+0xfc>
			break;
			
			case SequencerMenuArrow2Select:
			if(menuSub==1)
			{
				currentPattern->numSteps++;
     6a4:	90 83       	st	Z, r25
     6a6:	a3 c1       	rjmp	.+838    	; 0x9ee <listenEncoders+0x442>
				if(currentPattern->numSteps>64)
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
     6a8:	f9 01       	movw	r30, r18
     6aa:	e6 53       	subi	r30, 0x36	; 54
     6ac:	ff 4f       	sbci	r31, 0xFF	; 255
     6ae:	80 e4       	ldi	r24, 0x40	; 64
     6b0:	80 83       	st	Z, r24
     6b2:	9d c1       	rjmp	.+826    	; 0x9ee <listenEncoders+0x442>
				}
			}else
			{
				currentPattern->numSteps--;
     6b4:	f9 01       	movw	r30, r18
     6b6:	e6 53       	subi	r30, 0x36	; 54
     6b8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ba:	90 81       	ld	r25, Z
     6bc:	91 50       	subi	r25, 0x01	; 1
				if(currentPattern->numSteps<1)
     6be:	11 f0       	breq	.+4      	; 0x6c4 <listenEncoders+0x118>
				{//we only have 64 spaces to write patterns into
					currentPattern->numSteps=64;
				}
			}else
			{
				currentPattern->numSteps--;
     6c0:	90 83       	st	Z, r25
     6c2:	95 c1       	rjmp	.+810    	; 0x9ee <listenEncoders+0x442>
				if(currentPattern->numSteps<1)
				{//we can't have a 0 step pattern. 
					currentPattern->numSteps=1;
     6c4:	f9 01       	movw	r30, r18
     6c6:	e6 53       	subi	r30, 0x36	; 54
     6c8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	80 83       	st	Z, r24
     6ce:	8f c1       	rjmp	.+798    	; 0x9ee <listenEncoders+0x442>
				}
			}
			break;
			
			case SequencerMenuArrow3:;
			if(menuSub==1)
     6d0:	a1 30       	cpi	r26, 0x01	; 1
     6d2:	19 f4       	brne	.+6      	; 0x6da <listenEncoders+0x12e>
			{
				currentGlobals->menuState = SequencerMenuArrow2;
     6d4:	82 e1       	ldi	r24, 0x12	; 18
     6d6:	8e 83       	std	Y+6, r24	; 0x06
     6d8:	8a c1       	rjmp	.+788    	; 0x9ee <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = SequencerMenuArrow1;
     6da:	81 e1       	ldi	r24, 0x11	; 17
     6dc:	8e 83       	std	Y+6, r24	; 0x06
     6de:	87 c1       	rjmp	.+782    	; 0x9ee <listenEncoders+0x442>
			}
			break;
			
			case SequencerMenuArrow3Select:
			//change current step number
			if(menuSub==1)
     6e0:	a1 30       	cpi	r26, 0x01	; 1
     6e2:	69 f4       	brne	.+26     	; 0x6fe <listenEncoders+0x152>
			{
				currentGlobals->currentStep++;
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	9f 5f       	subi	r25, 0xFF	; 255
     6e8:	9c 83       	std	Y+4, r25	; 0x04
				if(currentGlobals->currentStep>=currentPattern->numSteps)
     6ea:	f9 01       	movw	r30, r18
     6ec:	e6 53       	subi	r30, 0x36	; 54
     6ee:	ff 4f       	sbci	r31, 0xFF	; 255
     6f0:	80 81       	ld	r24, Z
     6f2:	98 17       	cp	r25, r24
     6f4:	08 f4       	brcc	.+2      	; 0x6f8 <listenEncoders+0x14c>
     6f6:	7b c1       	rjmp	.+758    	; 0x9ee <listenEncoders+0x442>
				{//our ceiling is the maximum number of steps.
					currentGlobals->currentStep=(currentPattern->numSteps)-1;
     6f8:	81 50       	subi	r24, 0x01	; 1
     6fa:	8c 83       	std	Y+4, r24	; 0x04
     6fc:	78 c1       	rjmp	.+752    	; 0x9ee <listenEncoders+0x442>
				}
			}else
			{
				currentGlobals->currentStep--;
     6fe:	9c 81       	ldd	r25, Y+4	; 0x04
     700:	91 50       	subi	r25, 0x01	; 1
     702:	9c 83       	std	Y+4, r25	; 0x04
				if(currentGlobals->currentStep>currentPattern->numSteps)
     704:	f9 01       	movw	r30, r18
     706:	e6 53       	subi	r30, 0x36	; 54
     708:	ff 4f       	sbci	r31, 0xFF	; 255
     70a:	80 81       	ld	r24, Z
     70c:	89 17       	cp	r24, r25
     70e:	08 f0       	brcs	.+2      	; 0x712 <listenEncoders+0x166>
     710:	6e c1       	rjmp	.+732    	; 0x9ee <listenEncoders+0x442>
				{//do no write notes to step 0.
					currentGlobals->currentStep=0;
     712:	1c 82       	std	Y+4, r1	; 0x04
     714:	6c c1       	rjmp	.+728    	; 0x9ee <listenEncoders+0x442>
				}				
			}
			break;
			
			case TrackMenuArrow1:;
			if(menuSub==1)
     716:	a1 30       	cpi	r26, 0x01	; 1
     718:	19 f4       	brne	.+6      	; 0x720 <listenEncoders+0x174>
			{
				currentGlobals->menuState = TrackMenuArrow5;
     71a:	85 e2       	ldi	r24, 0x25	; 37
     71c:	8e 83       	std	Y+6, r24	; 0x06
     71e:	67 c1       	rjmp	.+718    	; 0x9ee <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow2;
     720:	82 e2       	ldi	r24, 0x22	; 34
     722:	8e 83       	std	Y+6, r24	; 0x06
     724:	64 c1       	rjmp	.+712    	; 0x9ee <listenEncoders+0x442>
			}
			break;
			
			case TrackMenuArrow1Select:;
			uint16_t currentSample = ((currentPattern->trackSampleMSB[currentGlobals->currentTrack])<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
     726:	8d 81       	ldd	r24, Y+5	; 0x05
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	b9 01       	movw	r22, r18
     72c:	68 0f       	add	r22, r24
     72e:	79 1f       	adc	r23, r25
     730:	fb 01       	movw	r30, r22
     732:	e8 56       	subi	r30, 0x68	; 104
     734:	ff 4f       	sbci	r31, 0xFF	; 255
     736:	40 81       	ld	r20, Z
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	54 2f       	mov	r21, r20
     73c:	44 27       	eor	r20, r20
     73e:	70 96       	adiw	r30, 0x10	; 16
     740:	60 81       	ld	r22, Z
     742:	46 2b       	or	r20, r22
			if(menuSub==1)
     744:	a1 30       	cpi	r26, 0x01	; 1
     746:	49 f4       	brne	.+18     	; 0x75a <listenEncoders+0x1ae>
     748:	4f 5f       	subi	r20, 0xFF	; 255
     74a:	5f 4f       	sbci	r21, 0xFF	; 255
     74c:	41 30       	cpi	r20, 0x01	; 1
     74e:	60 e1       	ldi	r22, 0x10	; 16
     750:	56 07       	cpc	r21, r22
     752:	40 f0       	brcs	.+16     	; 0x764 <listenEncoders+0x1b8>
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	50 e1       	ldi	r21, 0x10	; 16
     758:	05 c0       	rjmp	.+10     	; 0x764 <listenEncoders+0x1b8>
				{//maximum number of indexable samples.
					currentSample=4096;
				}
			}else
			{//no samples in space 0.
				currentSample--;
     75a:	41 50       	subi	r20, 0x01	; 1
     75c:	51 09       	sbc	r21, r1
				if(currentSample<1)
     75e:	11 f4       	brne	.+4      	; 0x764 <listenEncoders+0x1b8>
				{
					currentSample=1;
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	50 e0       	ldi	r21, 0x00	; 0
				}
			}
			currentPattern->trackSampleLSB[currentGlobals->currentTrack] = (currentSample&0x00FF);//we want to lob off the top 8 bits, just in case. May be unnecessary.
     764:	82 0f       	add	r24, r18
     766:	93 1f       	adc	r25, r19
     768:	fc 01       	movw	r30, r24
     76a:	e8 55       	subi	r30, 0x58	; 88
     76c:	ff 4f       	sbci	r31, 0xFF	; 255
     76e:	40 83       	st	Z, r20
			currentPattern->trackSampleMSB[currentGlobals->currentTrack] = (currentSample>>8); 
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	28 0f       	add	r18, r24
     774:	31 1d       	adc	r19, r1
     776:	f9 01       	movw	r30, r18
     778:	e8 56       	subi	r30, 0x68	; 104
     77a:	ff 4f       	sbci	r31, 0xFF	; 255
     77c:	50 83       	st	Z, r21
			break;
     77e:	37 c1       	rjmp	.+622    	; 0x9ee <listenEncoders+0x442>
			
			case TrackMenuArrow2:
			if(menuSub==1)
     780:	a1 30       	cpi	r26, 0x01	; 1
     782:	19 f4       	brne	.+6      	; 0x78a <listenEncoders+0x1de>
			{
				currentGlobals->menuState = TrackMenuArrow1;
     784:	81 e2       	ldi	r24, 0x21	; 33
     786:	8e 83       	std	Y+6, r24	; 0x06
     788:	32 c1       	rjmp	.+612    	; 0x9ee <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow3;
     78a:	83 e2       	ldi	r24, 0x23	; 35
     78c:	8e 83       	std	Y+6, r24	; 0x06
     78e:	2f c1       	rjmp	.+606    	; 0x9ee <listenEncoders+0x442>
			
			case TrackMenuArrow2Select:
			//change play mode of currently selected track
			//since we only have two play modes currently,
			//we only need to flip the play mode.
			currentPattern->trackPlayMode[currentGlobals->currentTrack] = (!(currentPattern->trackPlayMode[currentGlobals->currentTrack]))&(0b00000001);
     790:	8d 81       	ldd	r24, Y+5	; 0x05
     792:	28 0f       	add	r18, r24
     794:	31 1d       	adc	r19, r1
     796:	f9 01       	movw	r30, r18
     798:	e8 57       	subi	r30, 0x78	; 120
     79a:	ff 4f       	sbci	r31, 0xFF	; 255
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 81       	ld	r25, Z
     7a0:	91 11       	cpse	r25, r1
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	80 83       	st	Z, r24
			//flip all bits, mask for first bit. 
			break;
     7a6:	23 c1       	rjmp	.+582    	; 0x9ee <listenEncoders+0x442>
			
			case TrackMenuArrow3:
			if(menuSub==1)
     7a8:	a1 30       	cpi	r26, 0x01	; 1
     7aa:	19 f4       	brne	.+6      	; 0x7b2 <listenEncoders+0x206>
			{
				currentGlobals->menuState = TrackMenuArrow2;
     7ac:	82 e2       	ldi	r24, 0x22	; 34
     7ae:	8e 83       	std	Y+6, r24	; 0x06
     7b0:	1e c1       	rjmp	.+572    	; 0x9ee <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow4;
     7b2:	84 e2       	ldi	r24, 0x24	; 36
     7b4:	8e 83       	std	Y+6, r24	; 0x06
     7b6:	1b c1       	rjmp	.+566    	; 0x9ee <listenEncoders+0x442>
			}
			break;
			
			case TrackMenuArrow3Select:
			
			if(menuSub==1)
     7b8:	a1 30       	cpi	r26, 0x01	; 1
     7ba:	b1 f4       	brne	.+44     	; 0x7e8 <listenEncoders+0x23c>
			{
				//indexing might be an issue here, don't remember if this is 0 indexed or not. 
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1 ;
     7bc:	8d 81       	ldd	r24, Y+5	; 0x05
     7be:	f9 01       	movw	r30, r18
     7c0:	e8 0f       	add	r30, r24
     7c2:	f1 1d       	adc	r31, r1
     7c4:	80 8d       	ldd	r24, Z+24	; 0x18
     7c6:	8f 5f       	subi	r24, 0xFF	; 255
     7c8:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     7ca:	8d 81       	ldd	r24, Y+5	; 0x05
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	f9 01       	movw	r30, r18
     7d0:	e8 0f       	add	r30, r24
     7d2:	f9 1f       	adc	r31, r25
     7d4:	40 8d       	ldd	r20, Z+24	; 0x18
     7d6:	48 30       	cpi	r20, 0x08	; 8
     7d8:	08 f4       	brcc	.+2      	; 0x7dc <listenEncoders+0x230>
     7da:	09 c1       	rjmp	.+530    	; 0x9ee <listenEncoders+0x442>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=7;
     7dc:	f9 01       	movw	r30, r18
     7de:	e8 0f       	add	r30, r24
     7e0:	f9 1f       	adc	r31, r25
     7e2:	87 e0       	ldi	r24, 0x07	; 7
     7e4:	80 8f       	std	Z+24, r24	; 0x18
     7e6:	03 c1       	rjmp	.+518    	; 0x9ee <listenEncoders+0x442>
				}
			}else
			{
				(currentPattern->trackOutputRoute[currentGlobals->currentTrack]) = (currentPattern->trackOutputRoute[currentGlobals->currentTrack])-1;
     7e8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ea:	f9 01       	movw	r30, r18
     7ec:	e8 0f       	add	r30, r24
     7ee:	f1 1d       	adc	r31, r1
     7f0:	80 8d       	ldd	r24, Z+24	; 0x18
     7f2:	81 50       	subi	r24, 0x01	; 1
     7f4:	80 8f       	std	Z+24, r24	; 0x18
				if(currentPattern->trackOutputRoute[currentGlobals->currentTrack]>7)
     7f6:	8d 81       	ldd	r24, Y+5	; 0x05
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	f9 01       	movw	r30, r18
     7fc:	e8 0f       	add	r30, r24
     7fe:	f9 1f       	adc	r31, r25
     800:	40 8d       	ldd	r20, Z+24	; 0x18
     802:	48 30       	cpi	r20, 0x08	; 8
     804:	08 f4       	brcc	.+2      	; 0x808 <listenEncoders+0x25c>
     806:	f3 c0       	rjmp	.+486    	; 0x9ee <listenEncoders+0x442>
				{
					currentPattern->trackOutputRoute[currentGlobals->currentTrack]=0;
     808:	f9 01       	movw	r30, r18
     80a:	e8 0f       	add	r30, r24
     80c:	f9 1f       	adc	r31, r25
     80e:	10 8e       	std	Z+24, r1	; 0x18
     810:	ee c0       	rjmp	.+476    	; 0x9ee <listenEncoders+0x442>
				}
			}
			break;
			
			case TrackMenuArrow4:
			if(menuSub==1)
     812:	a1 30       	cpi	r26, 0x01	; 1
     814:	19 f4       	brne	.+6      	; 0x81c <listenEncoders+0x270>
			{
				currentGlobals->menuState = TrackMenuArrow3;
     816:	83 e2       	ldi	r24, 0x23	; 35
     818:	8e 83       	std	Y+6, r24	; 0x06
     81a:	e9 c0       	rjmp	.+466    	; 0x9ee <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow5;
     81c:	85 e2       	ldi	r24, 0x25	; 37
     81e:	8e 83       	std	Y+6, r24	; 0x06
     820:	e6 c0       	rjmp	.+460    	; 0x9ee <listenEncoders+0x442>
			}
			break;
			
			case TrackMenuArrow4Select:
			if(menuSub==1)
     822:	a1 30       	cpi	r26, 0x01	; 1
     824:	d9 f4       	brne	.+54     	; 0x85c <listenEncoders+0x2b0>
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])++;
     826:	8d 81       	ldd	r24, Y+5	; 0x05
     828:	f9 01       	movw	r30, r18
     82a:	e8 0f       	add	r30, r24
     82c:	f1 1d       	adc	r31, r1
     82e:	e5 51       	subi	r30, 0x15	; 21
     830:	ff 4f       	sbci	r31, 0xFF	; 255
     832:	80 81       	ld	r24, Z
     834:	8f 5f       	subi	r24, 0xFF	; 255
     836:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     838:	8d 81       	ldd	r24, Y+5	; 0x05
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	f9 01       	movw	r30, r18
     83e:	e8 0f       	add	r30, r24
     840:	f9 1f       	adc	r31, r25
     842:	e5 51       	subi	r30, 0x15	; 21
     844:	ff 4f       	sbci	r31, 0xFF	; 255
     846:	40 81       	ld	r20, Z
     848:	44 30       	cpi	r20, 0x04	; 4
     84a:	08 f1       	brcs	.+66     	; 0x88e <listenEncoders+0x2e2>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=3;
     84c:	82 0f       	add	r24, r18
     84e:	93 1f       	adc	r25, r19
     850:	fc 01       	movw	r30, r24
     852:	e5 51       	subi	r30, 0x15	; 21
     854:	ff 4f       	sbci	r31, 0xFF	; 255
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	80 83       	st	Z, r24
     85a:	19 c0       	rjmp	.+50     	; 0x88e <listenEncoders+0x2e2>
				}
			}else
			{
				(currentPattern->envelopeType[currentGlobals->currentTrack])--;
     85c:	8d 81       	ldd	r24, Y+5	; 0x05
     85e:	f9 01       	movw	r30, r18
     860:	e8 0f       	add	r30, r24
     862:	f1 1d       	adc	r31, r1
     864:	e5 51       	subi	r30, 0x15	; 21
     866:	ff 4f       	sbci	r31, 0xFF	; 255
     868:	80 81       	ld	r24, Z
     86a:	81 50       	subi	r24, 0x01	; 1
     86c:	80 83       	st	Z, r24
				if((currentPattern->envelopeType[currentGlobals->currentTrack])>3)
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	f9 01       	movw	r30, r18
     874:	e8 0f       	add	r30, r24
     876:	f9 1f       	adc	r31, r25
     878:	e5 51       	subi	r30, 0x15	; 21
     87a:	ff 4f       	sbci	r31, 0xFF	; 255
     87c:	40 81       	ld	r20, Z
     87e:	44 30       	cpi	r20, 0x04	; 4
     880:	30 f0       	brcs	.+12     	; 0x88e <listenEncoders+0x2e2>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
     882:	82 0f       	add	r24, r18
     884:	93 1f       	adc	r25, r19
     886:	fc 01       	movw	r30, r24
     888:	e5 51       	subi	r30, 0x15	; 21
     88a:	ff 4f       	sbci	r31, 0xFF	; 255
     88c:	10 82       	st	Z, r1
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
     88e:	8d 81       	ldd	r24, Y+5	; 0x05
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	f9 01       	movw	r30, r18
     894:	e8 0f       	add	r30, r24
     896:	f9 1f       	adc	r31, r25
     898:	e5 51       	subi	r30, 0x15	; 21
     89a:	ff 4f       	sbci	r31, 0xFF	; 255
     89c:	40 81       	ld	r20, Z
     89e:	4d 7f       	andi	r20, 0xFD	; 253
     8a0:	89 f4       	brne	.+34     	; 0x8c4 <listenEncoders+0x318>
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
     8a2:	28 0f       	add	r18, r24
     8a4:	39 1f       	adc	r19, r25
     8a6:	f9 01       	movw	r30, r18
     8a8:	e8 56       	subi	r30, 0x68	; 104
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	60 81       	ld	r22, Z
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	70 96       	adiw	r30, 0x10	; 16
     8b2:	80 81       	ld	r24, Z
     8b4:	2a eb       	ldi	r18, 0xBA	; 186
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	4f ef       	ldi	r20, 0xFF	; 255
     8ba:	50 e0       	ldi	r21, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <setTrackVolume>
				{
					(currentPattern->envelopeType[currentGlobals->currentTrack])=0;
				}
			}
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
			{
     8c2:	95 c0       	rjmp	.+298    	; 0x9ee <listenEncoders+0x442>
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
     8c4:	f9 01       	movw	r30, r18
     8c6:	e8 0f       	add	r30, r24
     8c8:	f9 1f       	adc	r31, r25
			if(currentPattern->envelopeType[currentGlobals->currentTrack]==0||currentPattern->envelopeType[currentGlobals->currentTrack]==2) //AR or A
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],255,186);
			}else
			{
				setTrackVolume(currentPattern->trackSampleLSB[currentGlobals->currentTrack], currentPattern->trackSampleMSB[currentGlobals->currentTrack],
     8ca:	20 a5       	ldd	r18, Z+40	; 0x28
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 ad       	ldd	r20, Z+56	; 0x38
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	df 01       	movw	r26, r30
     8d4:	a8 56       	subi	r26, 0x68	; 104
     8d6:	bf 4f       	sbci	r27, 0xFF	; 255
     8d8:	6c 91       	ld	r22, X
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	e8 55       	subi	r30, 0x58	; 88
     8de:	ff 4f       	sbci	r31, 0xFF	; 255
     8e0:	80 81       	ld	r24, Z
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <setTrackVolume>
     8e8:	82 c0       	rjmp	.+260    	; 0x9ee <listenEncoders+0x442>
				currentPattern->trackMainVolumeLSB[currentGlobals->currentTrack],currentPattern->trackMainVolumeMSB[currentGlobals->currentTrack]);		
			}
			break;
			
			case TrackMenuArrow5:
			if(menuSub==1)
     8ea:	a1 30       	cpi	r26, 0x01	; 1
     8ec:	19 f4       	brne	.+6      	; 0x8f4 <listenEncoders+0x348>
			{
				currentGlobals->menuState = TrackMenuArrow4;
     8ee:	84 e2       	ldi	r24, 0x24	; 36
     8f0:	8e 83       	std	Y+6, r24	; 0x06
     8f2:	7d c0       	rjmp	.+250    	; 0x9ee <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = TrackMenuArrow1;
     8f4:	81 e2       	ldi	r24, 0x21	; 33
     8f6:	8e 83       	std	Y+6, r24	; 0x06
     8f8:	7a c0       	rjmp	.+244    	; 0x9ee <listenEncoders+0x442>
			}
			break;
			
			case TrackMenuArrow5Select:;
			uint16_t sustainTime = (currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack])|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);	
     8fa:	4d 81       	ldd	r20, Y+5	; 0x05
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	b9 01       	movw	r22, r18
     900:	64 0f       	add	r22, r20
     902:	75 1f       	adc	r23, r21
     904:	fb 01       	movw	r30, r22
     906:	e5 53       	subi	r30, 0x35	; 53
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	80 81       	ld	r24, Z
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	98 2f       	mov	r25, r24
     910:	88 27       	eor	r24, r24
     912:	70 96       	adiw	r30, 0x10	; 16
     914:	60 81       	ld	r22, Z
     916:	86 2b       	or	r24, r22
			if(menuSub==1)
     918:	a1 30       	cpi	r26, 0x01	; 1
     91a:	71 f4       	brne	.+28     	; 0x938 <listenEncoders+0x38c>
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     91c:	6a 81       	ldd	r22, Y+2	; 0x02
     91e:	62 ff       	sbrs	r22, 2
     920:	02 c0       	rjmp	.+4      	; 0x926 <listenEncoders+0x37a>
				{
					sustainTime++;
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	02 c0       	rjmp	.+4      	; 0x92a <listenEncoders+0x37e>
				}
				else
				{
					sustainTime = sustainTime+236;
     926:	84 51       	subi	r24, 0x14	; 20
     928:	9f 4f       	sbci	r25, 0xFF	; 255
     92a:	81 36       	cpi	r24, 0x61	; 97
     92c:	ea ee       	ldi	r30, 0xEA	; 234
     92e:	9e 07       	cpc	r25, r30
     930:	80 f0       	brcs	.+32     	; 0x952 <listenEncoders+0x3a6>
     932:	80 e6       	ldi	r24, 0x60	; 96
     934:	9a ee       	ldi	r25, 0xEA	; 234
     936:	0d c0       	rjmp	.+26     	; 0x952 <listenEncoders+0x3a6>
				{
					sustainTime = 60000;
				}
			}else
			{
				if((currentGlobals->currentGPButtons)&(0x04))
     938:	6a 81       	ldd	r22, Y+2	; 0x02
     93a:	62 ff       	sbrs	r22, 2
     93c:	02 c0       	rjmp	.+4      	; 0x942 <listenEncoders+0x396>
				{
					sustainTime--;
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	02 c0       	rjmp	.+4      	; 0x946 <listenEncoders+0x39a>
				}else
				{	
					sustainTime = sustainTime - 236;
     942:	8c 5e       	subi	r24, 0xEC	; 236
     944:	91 09       	sbc	r25, r1
				}
				
				if(sustainTime>60000)
     946:	81 36       	cpi	r24, 0x61	; 97
     948:	fa ee       	ldi	r31, 0xEA	; 234
     94a:	9f 07       	cpc	r25, r31
     94c:	10 f0       	brcs	.+4      	; 0x952 <listenEncoders+0x3a6>
				{
					sustainTime = 0;
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack] = (sustainTime>>8);
     952:	42 0f       	add	r20, r18
     954:	53 1f       	adc	r21, r19
     956:	fa 01       	movw	r30, r20
     958:	e5 53       	subi	r30, 0x35	; 53
     95a:	ff 4f       	sbci	r31, 0xFF	; 255
     95c:	90 83       	st	Z, r25
			currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack] = sustainTime; //upper bits will be truncated.
     95e:	9d 81       	ldd	r25, Y+5	; 0x05
     960:	29 0f       	add	r18, r25
     962:	31 1d       	adc	r19, r1
     964:	f9 01       	movw	r30, r18
     966:	e5 52       	subi	r30, 0x25	; 37
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	80 83       	st	Z, r24

			break;
     96c:	40 c0       	rjmp	.+128    	; 0x9ee <listenEncoders+0x442>
			
			case GlobalMenuArrow1:
			if(menuSub==1)
     96e:	a1 30       	cpi	r26, 0x01	; 1
     970:	19 f4       	brne	.+6      	; 0x978 <listenEncoders+0x3cc>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     972:	81 e3       	ldi	r24, 0x31	; 49
     974:	8e 83       	std	Y+6, r24	; 0x06
     976:	3b c0       	rjmp	.+118    	; 0x9ee <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     978:	82 e3       	ldi	r24, 0x32	; 50
     97a:	8e 83       	std	Y+6, r24	; 0x06
     97c:	38 c0       	rjmp	.+112    	; 0x9ee <listenEncoders+0x442>
			}
			break;
			
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
     97e:	a1 30       	cpi	r26, 0x01	; 1
     980:	49 f4       	brne	.+18     	; 0x994 <listenEncoders+0x3e8>
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     982:	8c 85       	ldd	r24, Y+12	; 0x0c
     984:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentGlobals->midiChannel>15)
     986:	80 31       	cpi	r24, 0x10	; 16
     988:	10 f4       	brcc	.+4      	; 0x98e <listenEncoders+0x3e2>
			//this may need to be in the range 0 to 15, and displayed with + 1.
			case GlobalMenuArrow1Select:
			if(menuSub==1)
			{ 
				//increment midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)+1;
     98a:	8c 87       	std	Y+12, r24	; 0x0c
     98c:	30 c0       	rjmp	.+96     	; 0x9ee <listenEncoders+0x442>
				if(currentGlobals->midiChannel>15)
				{
					currentGlobals->midiChannel=15;
     98e:	8f e0       	ldi	r24, 0x0F	; 15
     990:	8c 87       	std	Y+12, r24	; 0x0c
     992:	2d c0       	rjmp	.+90     	; 0x9ee <listenEncoders+0x442>
				}
			}
			else
			{
				//decrement midi number
				currentGlobals->midiChannel = (currentGlobals->midiChannel)-1;
     994:	8c 85       	ldd	r24, Y+12	; 0x0c
     996:	81 50       	subi	r24, 0x01	; 1
     998:	10 f0       	brcs	.+4      	; 0x99e <listenEncoders+0x3f2>
     99a:	8c 87       	std	Y+12, r24	; 0x0c
     99c:	28 c0       	rjmp	.+80     	; 0x9ee <listenEncoders+0x442>
				if(currentGlobals->midiChannel>254)
				{
					currentGlobals->midiChannel=0;
     99e:	1c 86       	std	Y+12, r1	; 0x0c
     9a0:	26 c0       	rjmp	.+76     	; 0x9ee <listenEncoders+0x442>
				}
			}
			break;
			
			case GlobalMenuArrow2:
			if(menuSub==1)
     9a2:	a1 30       	cpi	r26, 0x01	; 1
     9a4:	19 f4       	brne	.+6      	; 0x9ac <listenEncoders+0x400>
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     9a6:	81 e3       	ldi	r24, 0x31	; 49
     9a8:	8e 83       	std	Y+6, r24	; 0x06
     9aa:	21 c0       	rjmp	.+66     	; 0x9ee <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     9ac:	82 e3       	ldi	r24, 0x32	; 50
     9ae:	8e 83       	std	Y+6, r24	; 0x06
     9b0:	1e c0       	rjmp	.+60     	; 0x9ee <listenEncoders+0x442>
			break;
			
			case GlobalMenuArrow2Select:;
			//change midi note for selected track.
			//midi range is 0 to 127.
			uint8_t currentMidiNote = currentGlobals->midiTrackNote[currentGlobals->currentTrack];
     9b2:	ed 81       	ldd	r30, Y+5	; 0x05
     9b4:	2e 2f       	mov	r18, r30
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	ce 01       	movw	r24, r28
     9ba:	82 0f       	add	r24, r18
     9bc:	93 1f       	adc	r25, r19
     9be:	fc 01       	movw	r30, r24
     9c0:	85 85       	ldd	r24, Z+13	; 0x0d
			if(menuSub==1)
     9c2:	a1 30       	cpi	r26, 0x01	; 1
     9c4:	21 f4       	brne	.+8      	; 0x9ce <listenEncoders+0x422>
			{
				//not 100% sure how to set this up.
				currentMidiNote++;
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
				if(currentMidiNote>127)
     9c8:	32 f4       	brpl	.+12     	; 0x9d6 <listenEncoders+0x42a>
				{
					currentMidiNote = 127;
     9ca:	8f e7       	ldi	r24, 0x7F	; 127
     9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <listenEncoders+0x42a>
				}
			}else
			{
				currentMidiNote--;
     9ce:	81 50       	subi	r24, 0x01	; 1
				if(currentMidiNote>128)
     9d0:	81 38       	cpi	r24, 0x81	; 129
     9d2:	08 f0       	brcs	.+2      	; 0x9d6 <listenEncoders+0x42a>
				{
					currentMidiNote = 0;
     9d4:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			currentGlobals->midiTrackNote[currentGlobals->currentTrack] = currentMidiNote;
     9d6:	f9 01       	movw	r30, r18
     9d8:	ec 0f       	add	r30, r28
     9da:	fd 1f       	adc	r31, r29
     9dc:	85 87       	std	Z+13, r24	; 0x0d
			break;
     9de:	07 c0       	rjmp	.+14     	; 0x9ee <listenEncoders+0x442>
			
			case GlobalMenuArrow3:
			//currently unreachable, no settings live here atm		
			if(menuSub==1)
     9e0:	a1 30       	cpi	r26, 0x01	; 1
     9e2:	19 f4       	brne	.+6      	; 0x9ea <listenEncoders+0x43e>
			{
				currentGlobals->menuState = GlobalMenuArrow2;
     9e4:	82 e3       	ldi	r24, 0x32	; 50
     9e6:	8e 83       	std	Y+6, r24	; 0x06
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <listenEncoders+0x442>
			}else
			{
				currentGlobals->menuState = GlobalMenuArrow1;
     9ea:	81 e3       	ldi	r24, 0x31	; 49
     9ec:	8e 83       	std	Y+6, r24	; 0x06
			
			case GlobalMenuArrow3Select:
			//nothing to put here yet.
			break;
		}
		bottomEncoderLastValue = bottomEncoderValue;
     9ee:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <bottomEncoderValue>
     9f2:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <bottomEncoderLastValue>
		//menuSub=0;
	}
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	08 95       	ret

000009fc <initArrays>:
#include "globalVariables.h"
#include <string.h>

//takes an array less than 20 and fills it with blank characters
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
	uint8_t lengthOfString = strlen(myString);
     a06:	fa 01       	movw	r30, r20
     a08:	01 90       	ld	r0, Z+
     a0a:	00 20       	and	r0, r0
     a0c:	e9 f7       	brne	.-6      	; 0xa08 <initArrays+0xc>
     a0e:	31 97       	sbiw	r30, 0x01	; 1
     a10:	8f 01       	movw	r16, r30
     a12:	04 1b       	sub	r16, r20
     a14:	15 0b       	sbc	r17, r21
     a16:	90 2f       	mov	r25, r16
	uint8_t charLeft = 20 - lengthOfString;
     a18:	84 e1       	ldi	r24, 0x14	; 20
     a1a:	80 1b       	sub	r24, r16
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     a1c:	00 23       	and	r16, r16
     a1e:	a9 f0       	breq	.+42     	; 0xa4a <initArrays+0x4e>
     a20:	fa 01       	movw	r30, r20
     a22:	25 e1       	ldi	r18, 0x15	; 21
     a24:	26 9f       	mul	r18, r22
     a26:	d0 01       	movw	r26, r0
     a28:	27 9f       	mul	r18, r23
     a2a:	b0 0d       	add	r27, r0
     a2c:	11 24       	eor	r1, r1
     a2e:	ac 0f       	add	r26, r28
     a30:	bd 1f       	adc	r27, r29
     a32:	2f ef       	ldi	r18, 0xFF	; 255
     a34:	20 0f       	add	r18, r16
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	2f 5f       	subi	r18, 0xFF	; 255
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	42 0f       	add	r20, r18
     a3e:	53 1f       	adc	r21, r19
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
     a40:	21 91       	ld	r18, Z+
     a42:	2d 93       	st	X+, r18
void initArrays(unsigned char myArray[9][21], int stringNumber, char* myString)
{
	uint8_t lengthOfString = strlen(myString);
	uint8_t charLeft = 20 - lengthOfString;
	uint8_t currentIndex = 0;
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
     a44:	e4 17       	cp	r30, r20
     a46:	f5 07       	cpc	r31, r21
     a48:	d9 f7       	brne	.-10     	; 0xa40 <initArrays+0x44>
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     a4a:	88 23       	and	r24, r24
     a4c:	89 f0       	breq	.+34     	; 0xa70 <initArrays+0x74>
	{
		myArray[stringNumber][currentIndex] = ' ';
     a4e:	45 e1       	ldi	r20, 0x15	; 21
     a50:	46 9f       	mul	r20, r22
     a52:	90 01       	movw	r18, r0
     a54:	47 9f       	mul	r20, r23
     a56:	30 0d       	add	r19, r0
     a58:	11 24       	eor	r1, r1
     a5a:	c2 0f       	add	r28, r18
     a5c:	d3 1f       	adc	r29, r19
     a5e:	08 0f       	add	r16, r24
     a60:	80 e2       	ldi	r24, 0x20	; 32
     a62:	fe 01       	movw	r30, r28
     a64:	e9 0f       	add	r30, r25
     a66:	f1 1d       	adc	r31, r1
     a68:	80 83       	st	Z, r24
		currentIndex++;
     a6a:	9f 5f       	subi	r25, 0xFF	; 255
	for(currentIndex; currentIndex<lengthOfString; currentIndex++)
	{
		myArray[stringNumber][currentIndex] = myString[currentIndex];
	}

	for(charLeft; charLeft>0; charLeft--)
     a6c:	90 13       	cpse	r25, r16
     a6e:	f9 cf       	rjmp	.-14     	; 0xa62 <initArrays+0x66>
	{
		myArray[stringNumber][currentIndex] = ' ';
		currentIndex++;
	}
}
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	08 95       	ret

00000a7a <initBank>:

void initBank(Pattern *currentInitPattern)
{
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	ac 01       	movw	r20, r24
     a80:	fc 01       	movw	r30, r24
     a82:	e8 55       	subi	r30, 0x58	; 88
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	ec 01       	movw	r28, r24
     a88:	c8 57       	subi	r28, 0x78	; 120
     a8a:	df 4f       	sbci	r29, 0xFF	; 255
     a8c:	dc 01       	movw	r26, r24
     a8e:	a5 51       	subi	r26, 0x15	; 21
     a90:	bf 4f       	sbci	r27, 0xFF	; 255
	for(uint8_t i = 0; i<16; i++)
     a92:	90 e0       	ldi	r25, 0x00	; 0
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
    currentInitPattern->trackPlayMode[i] = 0x01;
     a94:	31 e0       	ldi	r19, 0x01	; 1
	currentInitPattern->envelopeType[i] = 3;
     a96:	23 e0       	ldi	r18, 0x03	; 3

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
  {
    currentInitPattern->trackSampleLSB[i] = i+1;
     a98:	9f 5f       	subi	r25, 0xFF	; 255
     a9a:	91 93       	st	Z+, r25
    currentInitPattern->trackPlayMode[i] = 0x01;
     a9c:	39 93       	st	Y+, r19
	currentInitPattern->envelopeType[i] = 3;
     a9e:	2d 93       	st	X+, r18
	currentInitPattern->trackSustainTimeLSB[i] = 0;
     aa0:	12 aa       	std	Z+50, r1	; 0x32
	currentInitPattern->trackSustainTimeMSB[i] = 0;
     aa2:	12 a2       	std	Z+34, r1	; 0x22
	}
}

void initBank(Pattern *currentInitPattern)
{
	for(uint8_t i = 0; i<16; i++)
     aa4:	90 31       	cpi	r25, 0x10	; 16
     aa6:	c1 f7       	brne	.-16     	; 0xa98 <initBank+0x1e>
     aa8:	fa 01       	movw	r30, r20
     aaa:	e5 50       	subi	r30, 0x05	; 5
     aac:	ff 4f       	sbci	r31, 0xFF	; 255
     aae:	9a 01       	movw	r18, r20
     ab0:	25 58       	subi	r18, 0x85	; 133
     ab2:	3e 4f       	sbci	r19, 0xFE	; 254
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
     ab4:	11 92       	st	Z+, r1
     ab6:	11 92       	st	Z+, r1
	currentInitPattern->envelopeType[i] = 3;
	currentInitPattern->trackSustainTimeLSB[i] = 0;
	currentInitPattern->trackSustainTimeMSB[i] = 0;
  }
  
  for(uint8_t j = 0; j<64; j++)
     ab8:	e2 17       	cp	r30, r18
     aba:	f3 07       	cpc	r31, r19
     abc:	d9 f7       	brne	.-10     	; 0xab4 <initBank+0x3a>
  {
	  currentInitPattern->trackSequence[j] = 0; //start with an empty sequence. 
 
  }
  //We need to take these and put them in global. 
  currentInitPattern->patternBPM = 120;
     abe:	fa 01       	movw	r30, r20
     ac0:	e8 53       	subi	r30, 0x38	; 56
     ac2:	ff 4f       	sbci	r31, 0xFF	; 255
     ac4:	88 e7       	ldi	r24, 0x78	; 120
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	91 83       	std	Z+1, r25	; 0x01
     aca:	80 83       	st	Z, r24
  currentInitPattern->numSteps = 16;
     acc:	32 96       	adiw	r30, 0x02	; 2
     ace:	80 e1       	ldi	r24, 0x10	; 16
     ad0:	80 83       	st	Z, r24
}
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <initGlobals>:

void initGlobals(Globals *currentGlobals, uint8_t factoryReset)
{
     ad8:	fc 01       	movw	r30, r24
		currentGlobals->currentTrigButtons=0; //current state of Trig buttons.
     ada:	11 82       	std	Z+1, r1	; 0x01
     adc:	10 82       	st	Z, r1
		currentGlobals->currentGPButtons=0; //current state of GP buttons
     ade:	12 82       	std	Z+2, r1	; 0x02
		currentGlobals->currentPatternNumber=0; //current pattern, between 1 and 256
     ae0:	13 82       	std	Z+3, r1	; 0x03
		currentGlobals->currentStep=0; // current step in the sequencer
     ae2:	14 82       	std	Z+4, r1	; 0x04
		currentGlobals->currentTrack=0; //current track being edited
     ae4:	15 82       	std	Z+5, r1	; 0x05
		currentGlobals->menuState=0; //where the menu is currently
     ae6:	16 82       	std	Z+6, r1	; 0x06
		currentGlobals->playState=0; //whether the sequencer is playing, stopped, or paused.
     ae8:	17 82       	std	Z+7, r1	; 0x07
		currentGlobals->factoryReset=0; //we may not need this in this struct, but good to have for now.
     aea:	10 86       	std	Z+8, r1	; 0x08
		currentGlobals->buttonSwitchFlag=0; // could be rolled into value bits.
     aec:	11 86       	std	Z+9, r1	; 0x09
		currentGlobals->valueChangeFlag=0; //bit 0 -> changes in encoders, bit 1-> changes in buttons, bit2 -> changes in knobs
     aee:	12 86       	std	Z+10, r1	; 0x0a
		currentGlobals->knobStatus=0; //top 4 bits: knob type, bottom 4 bits: knob location.
     af0:	13 86       	std	Z+11, r1	; 0x0b
		
		if(factoryReset==1)
     af2:	61 30       	cpi	r22, 0x01	; 1
     af4:	09 f5       	brne	.+66     	; 0xb38 <initGlobals+0x60>
		{
			currentGlobals->midiChannel=0;
     af6:	14 86       	std	Z+12, r1	; 0x0c
			currentGlobals->midiTrackNote[0] = 0x24;
     af8:	84 e2       	ldi	r24, 0x24	; 36
     afa:	85 87       	std	Z+13, r24	; 0x0d
			currentGlobals->midiTrackNote[1] = 0x25;
     afc:	85 e2       	ldi	r24, 0x25	; 37
     afe:	86 87       	std	Z+14, r24	; 0x0e
			currentGlobals->midiTrackNote[2] = 0x26;
     b00:	86 e2       	ldi	r24, 0x26	; 38
     b02:	87 87       	std	Z+15, r24	; 0x0f
			currentGlobals->midiTrackNote[3] = 0x27;
     b04:	87 e2       	ldi	r24, 0x27	; 39
     b06:	80 8b       	std	Z+16, r24	; 0x10
			currentGlobals->midiTrackNote[4] = 0x28;
     b08:	88 e2       	ldi	r24, 0x28	; 40
     b0a:	81 8b       	std	Z+17, r24	; 0x11
			currentGlobals->midiTrackNote[5] = 0x29;
     b0c:	89 e2       	ldi	r24, 0x29	; 41
     b0e:	82 8b       	std	Z+18, r24	; 0x12
			currentGlobals->midiTrackNote[6] = 0x2a;
     b10:	8a e2       	ldi	r24, 0x2A	; 42
     b12:	83 8b       	std	Z+19, r24	; 0x13
			currentGlobals->midiTrackNote[7] = 0x2b;
     b14:	8b e2       	ldi	r24, 0x2B	; 43
     b16:	84 8b       	std	Z+20, r24	; 0x14
			currentGlobals->midiTrackNote[8] = 0x2c;
     b18:	8c e2       	ldi	r24, 0x2C	; 44
     b1a:	85 8b       	std	Z+21, r24	; 0x15
			currentGlobals->midiTrackNote[9] = 0x2d;
     b1c:	8d e2       	ldi	r24, 0x2D	; 45
     b1e:	86 8b       	std	Z+22, r24	; 0x16
			currentGlobals->midiTrackNote[10] = 0x2e;
     b20:	8e e2       	ldi	r24, 0x2E	; 46
     b22:	87 8b       	std	Z+23, r24	; 0x17
			currentGlobals->midiTrackNote[11] = 0x2f;
     b24:	8f e2       	ldi	r24, 0x2F	; 47
     b26:	80 8f       	std	Z+24, r24	; 0x18
			currentGlobals->midiTrackNote[12] = 0x30;
     b28:	80 e3       	ldi	r24, 0x30	; 48
     b2a:	81 8f       	std	Z+25, r24	; 0x19
			currentGlobals->midiTrackNote[13] = 0x31;
     b2c:	81 e3       	ldi	r24, 0x31	; 49
     b2e:	82 8f       	std	Z+26, r24	; 0x1a
			currentGlobals->midiTrackNote[14] = 0x32;
     b30:	82 e3       	ldi	r24, 0x32	; 50
     b32:	83 8f       	std	Z+27, r24	; 0x1b
			currentGlobals->midiTrackNote[15] = 0x33;
     b34:	83 e3       	ldi	r24, 0x33	; 51
     b36:	84 8f       	std	Z+28, r24	; 0x1c
     b38:	08 95       	ret

00000b3a <startADCConversion>:



uint8_t startADCConversion()
{
	ADCSRA |= (1 << ADSC); //this moves the read instruction bit to the ADC Register.
     b3a:	ea e7       	ldi	r30, 0x7A	; 122
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	80 64       	ori	r24, 0x40	; 64
     b42:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
     b44:	80 81       	ld	r24, Z
     b46:	86 fd       	sbrc	r24, 6
     b48:	fd cf       	rjmp	.-6      	; 0xb44 <startADCConversion+0xa>
	return ADCH; //this is the top 8 bits of the 10 bit ADC Read.	
     b4a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     b4e:	08 95       	ret

00000b50 <initADC>:

void initADC()
{
	DDRF |= 0B00000111; //init pins F2, 1, and 0 as select pins on the external mux.
     b50:	80 b3       	in	r24, 0x10	; 16
     b52:	87 60       	ori	r24, 0x07	; 7
     b54:	80 bb       	out	0x10, r24	; 16
	
	ADMUX = (1 << ADLAR);//we're using the AREF pin to reduce analog noise, and only grabbing 8 bits from the ADC
     b56:	80 e2       	ldi	r24, 0x20	; 32
     b58:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 <<  ADEN) | (1 <<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     b5c:	87 e8       	ldi	r24, 0x87	; 135
     b5e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = (1 << MUX5);
     b62:	88 e0       	ldi	r24, 0x08	; 8
     b64:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	DIDR0 = 0xff; // we should set this register to all 1s, so there is no digital input triggering.
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
	DIDR2 = 0xff;
     b6e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
	knobBufferCounter = 0;
     b72:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <knobBufferCounter>
	startADCConversion();
     b76:	e1 cf       	rjmp	.-62     	; 0xb3a <startADCConversion>
     b78:	08 95       	ret

00000b7a <selectKnob>:
}

void selectKnob(uint8_t select)
{ 
     b7a:	cf 93       	push	r28
	select = select%44; //accounts for overflows, may be unnecessary
     b7c:	98 2f       	mov	r25, r24
     b7e:	96 95       	lsr	r25
     b80:	96 95       	lsr	r25
     b82:	2f e2       	ldi	r18, 0x2F	; 47
     b84:	92 9f       	mul	r25, r18
     b86:	91 2d       	mov	r25, r1
     b88:	11 24       	eor	r1, r1
     b8a:	96 95       	lsr	r25
     b8c:	2c e2       	ldi	r18, 0x2C	; 44
     b8e:	92 9f       	mul	r25, r18
     b90:	80 19       	sub	r24, r0
     b92:	11 24       	eor	r1, r1
     b94:	98 2f       	mov	r25, r24
	if(select<40)
     b96:	88 32       	cpi	r24, 0x28	; 40
     b98:	70 f4       	brcc	.+28     	; 0xbb6 <selectKnob+0x3c>
	{
		ADCSRB = (1 << MUX5);
     b9a:	88 e0       	ldi	r24, 0x08	; 8
     b9c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		uint8_t muxSelect = select%8; //this should produce a number between 1 and 7.
     ba0:	c9 2f       	mov	r28, r25
     ba2:	c7 70       	andi	r28, 0x07	; 7
		//uint8_t tempMuxSelect = muxSelect;

	//we need to set the internal multiplxer
		uint8_t internalMuxSelect = select/8;
		
		ADMUX = internalMuxSelect|(1 << ADLAR);   
     ba4:	96 95       	lsr	r25
     ba6:	96 95       	lsr	r25
     ba8:	96 95       	lsr	r25
     baa:	90 62       	ori	r25, 0x20	; 32
     bac:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();//this should throw away our first read after the mux changover.
     bb0:	c4 df       	rcall	.-120    	; 0xb3a <startADCConversion>
		

		//then the external multiplexer
		PORTF = muxSelect;
     bb2:	c1 bb       	out	0x11, r28	; 17
     bb4:	20 c0       	rjmp	.+64     	; 0xbf6 <selectKnob+0x7c>
	
	}else
	{ //we only have to change the ADC Register, since these knobs are wired directly into our microcontroller.
		switch (select){
     bb6:	89 32       	cpi	r24, 0x29	; 41
     bb8:	71 f0       	breq	.+28     	; 0xbd6 <selectKnob+0x5c>
     bba:	18 f4       	brcc	.+6      	; 0xbc2 <selectKnob+0x48>
     bbc:	88 32       	cpi	r24, 0x28	; 40
     bbe:	31 f0       	breq	.+12     	; 0xbcc <selectKnob+0x52>
     bc0:	1a c0       	rjmp	.+52     	; 0xbf6 <selectKnob+0x7c>
     bc2:	8a 32       	cpi	r24, 0x2A	; 42
     bc4:	69 f0       	breq	.+26     	; 0xbe0 <selectKnob+0x66>
     bc6:	8b 32       	cpi	r24, 0x2B	; 43
     bc8:	81 f0       	breq	.+32     	; 0xbea <selectKnob+0x70>
     bca:	15 c0       	rjmp	.+42     	; 0xbf6 <selectKnob+0x7c>
		case 40:
		ADMUX = 5|(1 << ADLAR);
     bcc:	85 e2       	ldi	r24, 0x25	; 37
     bce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     bd2:	b3 df       	rcall	.-154    	; 0xb3a <startADCConversion>
		break;
     bd4:	10 c0       	rjmp	.+32     	; 0xbf6 <selectKnob+0x7c>
		
		case 41:
		ADMUX = 6|(1 << ADLAR);
     bd6:	86 e2       	ldi	r24, 0x26	; 38
     bd8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     bdc:	ae df       	rcall	.-164    	; 0xb3a <startADCConversion>
		break;
     bde:	0b c0       	rjmp	.+22     	; 0xbf6 <selectKnob+0x7c>
		
		case 42:
		ADMUX = 7|(1 << ADLAR);
     be0:	87 e2       	ldi	r24, 0x27	; 39
     be2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		startADCConversion();
     be6:	a9 df       	rcall	.-174    	; 0xb3a <startADCConversion>
		break;
     be8:	06 c0       	rjmp	.+12     	; 0xbf6 <selectKnob+0x7c>
		
		case 43:
		//remember, this knob is in port A0.
		ADMUX = 0|(1 << ADLAR);
     bea:	80 e2       	ldi	r24, 0x20	; 32
     bec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
		ADCSRB = (0 << MUX5); 
     bf0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
		startADCConversion();
     bf4:	a2 df       	rcall	.-188    	; 0xb3a <startADCConversion>
		break;
		}
	
	}
	
}
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <updateKnob>:

void updateKnob(uint8_t select, Globals *currentGlobals)
{
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	8b 01       	movw	r16, r22
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
     c04:	c8 2f       	mov	r28, r24
     c06:	d0 e0       	ldi	r29, 0x00	; 0
     c08:	98 df       	rcall	.-208    	; 0xb3a <startADCConversion>
     c0a:	f8 01       	movw	r30, r16
     c0c:	ec 0f       	add	r30, r28
     c0e:	fd 1f       	adc	r31, r29
     c10:	85 8f       	std	Z+29, r24	; 0x1d
		currentGlobals->filteredKnobBuffer[select] = 
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
     c12:	e7 5b       	subi	r30, 0xB7	; 183
     c14:	ff 4f       	sbci	r31, 0xFF	; 255
     c16:	40 81       	ld	r20, Z

void updateKnob(uint8_t select, Globals *currentGlobals)
{
	//IIR filter.
	currentGlobals->rawKnobBuffer[select] = startADCConversion(); //raw reads
		currentGlobals->filteredKnobBuffer[select] = 
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	84 1b       	sub	r24, r20
     c1c:	91 09       	sbc	r25, r1
     c1e:	9c 01       	movw	r18, r24
     c20:	12 f4       	brpl	.+4      	; 0xc26 <updateKnob+0x2c>
     c22:	2f 5f       	subi	r18, 0xFF	; 255
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	35 95       	asr	r19
     c28:	27 95       	ror	r18
     c2a:	24 0f       	add	r18, r20
     c2c:	20 83       	st	Z, r18
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	08 95       	ret

00000c38 <initializeKnob>:
void initializeKnob(Globals *currentGlobals)
{
     c38:	fc 01       	movw	r30, r24
     c3a:	e7 5b       	subi	r30, 0xB7	; 183
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	9c 01       	movw	r18, r24
     c40:	2b 58       	subi	r18, 0x8B	; 139
     c42:	3f 4f       	sbci	r19, 0xFF	; 255
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
     c44:	91 91       	ld	r25, Z+
     c46:	93 a7       	std	Z+43, r25	; 0x2b
		currentGlobals->filteredKnobBuffer[select] + ((currentGlobals->rawKnobBuffer[select]-currentGlobals->filteredKnobBuffer[select])/2); //reads with math done to them
}
void initializeKnob(Globals *currentGlobals)
{
	//we do this after we fill the knob buffer at startup. 
	for(int i = 0; i<44; i++){
     c48:	e2 17       	cp	r30, r18
     c4a:	f3 07       	cpc	r31, r19
     c4c:	d9 f7       	brne	.-10     	; 0xc44 <initializeKnob+0xc>
	currentGlobals->lastFilteredKnobBuffer[i] = currentGlobals->filteredKnobBuffer[i];
	}
}
     c4e:	08 95       	ret

00000c50 <interperetKnob>:

void interperetKnob(uint8_t select, Pattern *currentKnobPattern, Globals *currentGlobals)
{//this function will compare outputs, and write to our struct.
     c50:	4f 92       	push	r4
     c52:	5f 92       	push	r5
     c54:	6f 92       	push	r6
     c56:	7f 92       	push	r7
     c58:	8f 92       	push	r8
     c5a:	9f 92       	push	r9
     c5c:	af 92       	push	r10
     c5e:	bf 92       	push	r11
     c60:	cf 92       	push	r12
     c62:	df 92       	push	r13
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	ea 01       	movw	r28, r20
	select = select%44;
     c72:	98 2f       	mov	r25, r24
     c74:	96 95       	lsr	r25
     c76:	96 95       	lsr	r25
     c78:	2f e2       	ldi	r18, 0x2F	; 47
     c7a:	92 9f       	mul	r25, r18
     c7c:	91 2d       	mov	r25, r1
     c7e:	11 24       	eor	r1, r1
     c80:	96 95       	lsr	r25
     c82:	2c e2       	ldi	r18, 0x2C	; 44
     c84:	92 9f       	mul	r25, r18
     c86:	80 19       	sub	r24, r0
     c88:	11 24       	eor	r1, r1
     c8a:	98 2f       	mov	r25, r24
	
	if (select<40)
     c8c:	88 32       	cpi	r24, 0x28	; 40
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <interperetKnob+0x42>
     c90:	b4 c1       	rjmp	.+872    	; 0xffa <interperetKnob+0x3aa>
	{
		uint8_t positionSelect = select%8;
     c92:	18 2f       	mov	r17, r24
     c94:	17 70       	andi	r17, 0x07	; 7
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
		uint8_t bankSwitch = select/8;
     c96:	86 95       	lsr	r24
     c98:	86 95       	lsr	r24
     c9a:	86 95       	lsr	r24
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
     c9c:	29 85       	ldd	r18, Y+9	; 0x09
     c9e:	20 ff       	sbrs	r18, 0
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <interperetKnob+0x5c>
		{
			positionSelectTracks=positionSelectTracks+8;
     ca2:	68 94       	set
     ca4:	aa 24       	eor	r10, r10
     ca6:	a3 f8       	bld	r10, 3
     ca8:	a1 0e       	add	r10, r17
     caa:	01 c0       	rjmp	.+2      	; 0xcae <interperetKnob+0x5e>
	select = select%44;
	
	if (select<40)
	{
		uint8_t positionSelect = select%8;
		uint8_t positionSelectTracks = select%8; //this seems redundant looking at it. Maybe there is a clever way we can avoid this?
     cac:	a1 2e       	mov	r10, r17
		if(((currentGlobals->buttonSwitchFlag)&0x01)==1) //we only want to check bit 1 of the GP buttons. We might want to check other values later. 
		{
			positionSelectTracks=positionSelectTracks+8;
		}
		
		switch (bankSwitch){
     cae:	82 30       	cpi	r24, 0x02	; 2
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <interperetKnob+0x64>
     cb2:	9f c0       	rjmp	.+318    	; 0xdf2 <interperetKnob+0x1a2>
     cb4:	7e 01       	movw	r14, r28
     cb6:	6b 01       	movw	r12, r22
     cb8:	83 30       	cpi	r24, 0x03	; 3
     cba:	30 f4       	brcc	.+12     	; 0xcc8 <interperetKnob+0x78>
     cbc:	88 23       	and	r24, r24
     cbe:	59 f0       	breq	.+22     	; 0xcd6 <interperetKnob+0x86>
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <interperetKnob+0x76>
     cc4:	6d c0       	rjmp	.+218    	; 0xda0 <interperetKnob+0x150>
     cc6:	b6 c1       	rjmp	.+876    	; 0x1034 <interperetKnob+0x3e4>
     cc8:	83 30       	cpi	r24, 0x03	; 3
     cca:	09 f4       	brne	.+2      	; 0xcce <interperetKnob+0x7e>
     ccc:	db c0       	rjmp	.+438    	; 0xe84 <interperetKnob+0x234>
     cce:	84 30       	cpi	r24, 0x04	; 4
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <interperetKnob+0x84>
     cd2:	1f c1       	rjmp	.+574    	; 0xf12 <interperetKnob+0x2c2>
     cd4:	af c1       	rjmp	.+862    	; 0x1034 <interperetKnob+0x3e4>
			uint8_t newRead = 0;
			case 0:; //outputVolume
			
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     cd6:	c9 2f       	mov	r28, r25
     cd8:	d0 e0       	ldi	r29, 0x00	; 0
     cda:	c7 01       	movw	r24, r14
     cdc:	8c 0f       	add	r24, r28
     cde:	9d 1f       	adc	r25, r29
     ce0:	fc 01       	movw	r30, r24
     ce2:	eb 58       	subi	r30, 0x8B	; 139
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     ce8:	bc 97       	sbiw	r30, 0x2c	; 44
     cea:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     cec:	26 17       	cp	r18, r22
     cee:	20 f4       	brcc	.+8      	; 0xcf8 <interperetKnob+0xa8>
	{
		returnMe = v1-v2;
     cf0:	86 2f       	mov	r24, r22
     cf2:	82 1b       	sub	r24, r18
     cf4:	28 2f       	mov	r18, r24
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <interperetKnob+0xaa>
	}
	else
	{
		returnMe = v2-v1;
     cf8:	26 1b       	sub	r18, r22
			//int16_t currentOutVoulume = ((currentKnobPattern->outputLevelMSB[positionSelect]<<8)|(currentKnobPattern->outputLevelLSB[positionSelect])); 
			//this should be a regular integer between -70 and +10
			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];

			if(checkVariation(newRead,prevRead)>2)
     cfa:	23 30       	cpi	r18, 0x03	; 3
     cfc:	08 f4       	brcc	.+2      	; 0xd00 <interperetKnob+0xb0>
     cfe:	9a c1       	rjmp	.+820    	; 0x1034 <interperetKnob+0x3e4>
			{
				
				int16_t negCheckValue = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__floatsisf>
     d0a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
     d0e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
     d12:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
     d16:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
     d1a:	0e 94 96 1c 	call	0x392c	; 0x392c <__divsf3>
     d1e:	2b 01       	movw	r4, r22
     d20:	3c 01       	movw	r6, r24
     d22:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__floatsisf>
     d30:	9b 01       	movw	r18, r22
     d32:	ac 01       	movw	r20, r24
     d34:	c3 01       	movw	r24, r6
     d36:	b2 01       	movw	r22, r4
     d38:	0e 94 31 1c 	call	0x3862	; 0x3862 <__subsf3>
     d3c:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <__fixsfsi>
     d40:	86 2f       	mov	r24, r22
     d42:	26 2f       	mov	r18, r22
     d44:	37 2f       	mov	r19, r23
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     d46:	d7 01       	movw	r26, r14
     d48:	1a 96       	adiw	r26, 0x0a	; 10
     d4a:	9c 91       	ld	r25, X
     d4c:	1a 97       	sbiw	r26, 0x0a	; 10
     d4e:	94 60       	ori	r25, 0x04	; 4
     d50:	1a 96       	adiw	r26, 0x0a	; 10
     d52:	9c 93       	st	X, r25
     d54:	1a 97       	sbiw	r26, 0x0a	; 10
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value 
     d56:	1b 96       	adiw	r26, 0x0b	; 11
     d58:	1c 93       	st	X, r17
				
				currentKnobPattern->outputLevelLSB[positionSelect] = (negCheckValue);
     d5a:	61 2f       	mov	r22, r17
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	f6 01       	movw	r30, r12
     d60:	e6 0f       	add	r30, r22
     d62:	f7 1f       	adc	r31, r23
     d64:	80 87       	std	Z+8, r24	; 0x08
				if(negCheckValue>(-1))
     d66:	33 23       	and	r19, r19
     d68:	2c f0       	brlt	.+10     	; 0xd74 <interperetKnob+0x124>
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 0;	
     d6a:	f6 01       	movw	r30, r12
     d6c:	e6 0f       	add	r30, r22
     d6e:	f7 1f       	adc	r31, r23
     d70:	10 82       	st	Z, r1
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <interperetKnob+0x12e>
				}else
				{
					currentKnobPattern->outputLevelMSB[positionSelect] = 255;
     d74:	9f ef       	ldi	r25, 0xFF	; 255
     d76:	f6 01       	movw	r30, r12
     d78:	e6 0f       	add	r30, r22
     d7a:	f7 1f       	adc	r31, r23
     d7c:	90 83       	st	Z, r25
				}
				setOutputVolume(currentKnobPattern->outputLevelLSB[positionSelect], currentKnobPattern->outputLevelMSB[positionSelect], positionSelect);
     d7e:	f6 01       	movw	r30, r12
     d80:	e6 0f       	add	r30, r22
     d82:	f7 1f       	adc	r31, r23
     d84:	41 2f       	mov	r20, r17
     d86:	60 81       	ld	r22, Z
     d88:	0e 94 e7 15 	call	0x2bce	; 0x2bce <setOutputVolume>
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     d8c:	ce 0d       	add	r28, r14
     d8e:	df 1d       	adc	r29, r15
     d90:	fe 01       	movw	r30, r28
     d92:	eb 58       	subi	r30, 0x8B	; 139
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	c7 5b       	subi	r28, 0xB7	; 183
     d98:	df 4f       	sbci	r29, 0xFF	; 255
     d9a:	88 81       	ld	r24, Y
     d9c:	80 83       	st	Z, r24
     d9e:	4a c1       	rjmp	.+660    	; 0x1034 <interperetKnob+0x3e4>
			}
			break;
			
 			case 1: //pitch
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     da0:	89 2f       	mov	r24, r25
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9e 01       	movw	r18, r28
     da6:	28 0f       	add	r18, r24
     da8:	39 1f       	adc	r19, r25
     daa:	f9 01       	movw	r30, r18
     dac:	e7 5b       	subi	r30, 0xB7	; 183
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	40 81       	ld	r20, Z
     db2:	bc 96       	adiw	r30, 0x2c	; 44
     db4:	20 81       	ld	r18, Z
     db6:	24 17       	cp	r18, r20
     db8:	09 f4       	brne	.+2      	; 0xdbc <interperetKnob+0x16c>
     dba:	3c c1       	rjmp	.+632    	; 0x1034 <interperetKnob+0x3e4>
 			{
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     dbc:	2a 85       	ldd	r18, Y+10	; 0x0a
     dbe:	24 60       	ori	r18, 0x04	; 4
     dc0:	2a 87       	std	Y+10, r18	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     dc2:	21 2f       	mov	r18, r17
     dc4:	20 61       	ori	r18, 0x10	; 16
     dc6:	2b 87       	std	Y+11, r18	; 0x0b
 				currentKnobPattern->outputPitch[positionSelect] = (currentGlobals->filteredKnobBuffer[select]^128);
     dc8:	fb 01       	movw	r30, r22
     dca:	e1 0f       	add	r30, r17
     dcc:	f1 1d       	adc	r31, r1
     dce:	40 58       	subi	r20, 0x80	; 128
     dd0:	40 8b       	std	Z+16, r20	; 0x10
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     dd2:	8c 0f       	add	r24, r28
     dd4:	9d 1f       	adc	r25, r29
     dd6:	dc 01       	movw	r26, r24
     dd8:	ab 58       	subi	r26, 0x8B	; 139
     dda:	bf 4f       	sbci	r27, 0xFF	; 255
     ddc:	ec 01       	movw	r28, r24
     dde:	c7 5b       	subi	r28, 0xB7	; 183
     de0:	df 4f       	sbci	r29, 0xFF	; 255
     de2:	88 81       	ld	r24, Y
     de4:	8c 93       	st	X, r24
				outputSampleRate(positionSelect, 0, currentKnobPattern->outputPitch[positionSelect]);
     de6:	40 89       	ldd	r20, Z+16	; 0x10
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	81 2f       	mov	r24, r17
     dec:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <outputSampleRate>
     df0:	21 c1       	rjmp	.+578    	; 0x1034 <interperetKnob+0x3e4>
 			}
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     df2:	e9 2f       	mov	r30, r25
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	ce 01       	movw	r24, r28
     df8:	8e 0f       	add	r24, r30
     dfa:	9f 1f       	adc	r25, r31
     dfc:	dc 01       	movw	r26, r24
     dfe:	ab 58       	subi	r26, 0x8B	; 139
     e00:	bf 4f       	sbci	r27, 0xFF	; 255
     e02:	0c 91       	ld	r16, X
     e04:	87 5b       	subi	r24, 0xB7	; 183
     e06:	9f 4f       	sbci	r25, 0xFF	; 255
     e08:	dc 01       	movw	r26, r24
     e0a:	8c 91       	ld	r24, X
     e0c:	08 17       	cp	r16, r24
     e0e:	09 f4       	brne	.+2      	; 0xe12 <interperetKnob+0x1c2>
     e10:	11 c1       	rjmp	.+546    	; 0x1034 <interperetKnob+0x3e4>
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     e12:	ca 2c       	mov	r12, r10
     e14:	d1 2c       	mov	r13, r1
     e16:	ab 01       	movw	r20, r22
     e18:	4c 0d       	add	r20, r12
     e1a:	5d 1d       	adc	r21, r13
     e1c:	9a 01       	movw	r18, r20
     e1e:	28 5a       	subi	r18, 0xA8	; 168
     e20:	3f 4f       	sbci	r19, 0xFF	; 255
     e22:	d9 01       	movw	r26, r18
     e24:	2c 91       	ld	r18, X
     e26:	48 5b       	subi	r20, 0xB8	; 184
     e28:	5f 4f       	sbci	r21, 0xFF	; 255
     e2a:	da 01       	movw	r26, r20
     e2c:	4c 91       	ld	r20, X
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e30:	94 60       	ori	r25, 0x04	; 4
     e32:	9a 87       	std	Y+10, r25	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
     e34:	91 2f       	mov	r25, r17
     e36:	90 62       	ori	r25, 0x20	; 32
     e38:	9b 87       	std	Y+11, r25	; 0x0b
				
				if(currentGlobals->currentGPButtons&0x04) 
     e3a:	9a 81       	ldd	r25, Y+2	; 0x02
     e3c:	92 ff       	sbrs	r25, 2
     e3e:	08 c0       	rjmp	.+16     	; 0xe50 <interperetKnob+0x200>
 			break;
 			
 			case 2:; //attackEnvelope
			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
			{
				uint16_t totalAttackTime = currentKnobPattern->trackAttackTimeLSB[positionSelectTracks]|((currentKnobPattern->trackAttackTimeMSB[positionSelectTracks])<<8);
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	34 2b       	or	r19, r20
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value	
				
				if(currentGlobals->currentGPButtons&0x04) 
				{ //if "fine" is on:
					totalAttackTime = totalAttackTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select])); 
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	80 1b       	sub	r24, r16
     e48:	91 09       	sbc	r25, r1
     e4a:	28 0f       	add	r18, r24
     e4c:	39 1f       	adc	r19, r25
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <interperetKnob+0x210>
					//this algorithm needs work. We need to not write to Attack time if attack time is less than 20ms. 
					//maybe this algorithm is fine, we just don't print/attack stage for values under 20MS?
				}else
				{
					totalAttackTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	4e ee       	ldi	r20, 0xEE	; 238
     e56:	48 9f       	mul	r20, r24
     e58:	90 01       	movw	r18, r0
     e5a:	49 9f       	mul	r20, r25
     e5c:	30 0d       	add	r19, r0
     e5e:	11 24       	eor	r1, r1
				}
				currentKnobPattern->trackAttackTimeMSB[positionSelectTracks] = ((totalAttackTime)>>8);
     e60:	6c 0d       	add	r22, r12
     e62:	7d 1d       	adc	r23, r13
     e64:	db 01       	movw	r26, r22
     e66:	a8 5b       	subi	r26, 0xB8	; 184
     e68:	bf 4f       	sbci	r27, 0xFF	; 255
     e6a:	3c 93       	st	X, r19
				currentKnobPattern->trackAttackTimeLSB[positionSelectTracks] = (totalAttackTime); //this should truncate the top 8 bits. 
     e6c:	50 96       	adiw	r26, 0x10	; 16
     e6e:	2c 93       	st	X, r18

				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     e70:	ec 0f       	add	r30, r28
     e72:	fd 1f       	adc	r31, r29
     e74:	df 01       	movw	r26, r30
     e76:	ab 58       	subi	r26, 0x8B	; 139
     e78:	bf 4f       	sbci	r27, 0xFF	; 255
     e7a:	e7 5b       	subi	r30, 0xB7	; 183
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	80 81       	ld	r24, Z
     e80:	8c 93       	st	X, r24
     e82:	d8 c0       	rjmp	.+432    	; 0x1034 <interperetKnob+0x3e4>
			}
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
     e84:	29 2f       	mov	r18, r25
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	ce 01       	movw	r24, r28
     e8a:	82 0f       	add	r24, r18
     e8c:	93 1f       	adc	r25, r19
     e8e:	fc 01       	movw	r30, r24
     e90:	eb 58       	subi	r30, 0x8B	; 139
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	a0 81       	ld	r26, Z
     e96:	bc 97       	sbiw	r30, 0x2c	; 44
     e98:	80 81       	ld	r24, Z
     e9a:	a8 17       	cp	r26, r24
     e9c:	09 f4       	brne	.+2      	; 0xea0 <interperetKnob+0x250>
     e9e:	ca c0       	rjmp	.+404    	; 0x1034 <interperetKnob+0x3e4>
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
     ea0:	6a 2d       	mov	r22, r10
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	f6 01       	movw	r30, r12
     ea6:	e6 0f       	add	r30, r22
     ea8:	f7 1f       	adc	r31, r23
     eaa:	ef 01       	movw	r28, r30
     eac:	c8 58       	subi	r28, 0x88	; 136
     eae:	df 4f       	sbci	r29, 0xFF	; 255
     eb0:	48 81       	ld	r20, Y
     eb2:	e8 59       	subi	r30, 0x98	; 152
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	e0 81       	ld	r30, Z
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     eb8:	e7 01       	movw	r28, r14
     eba:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebc:	94 60       	ori	r25, 0x04	; 4
     ebe:	9a 87       	std	Y+10, r25	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     ec0:	91 2f       	mov	r25, r17
     ec2:	90 63       	ori	r25, 0x30	; 48
     ec4:	9b 87       	std	Y+11, r25	; 0x0b
				if(currentGlobals->currentGPButtons&0x04)
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	92 ff       	sbrs	r25, 2
     eca:	08 c0       	rjmp	.+16     	; 0xedc <interperetKnob+0x28c>
			break;
 			
 			case 3: //release Envelope
 			if(currentGlobals->lastFilteredKnobBuffer[select]!=currentGlobals->filteredKnobBuffer[select])
 			{
				 uint16_t totalReleaseTime = currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks]|((currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks])<<8);
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	5e 2b       	or	r21, r30
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
				if(currentGlobals->currentGPButtons&0x04)
				{ //if "fine" is on:
					totalReleaseTime = totalReleaseTime+((currentGlobals->filteredKnobBuffer[select])-(currentGlobals->lastFilteredKnobBuffer[select]));
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	8a 1b       	sub	r24, r26
     ed4:	91 09       	sbc	r25, r1
     ed6:	48 0f       	add	r20, r24
     ed8:	59 1f       	adc	r21, r25
     eda:	08 c0       	rjmp	.+16     	; 0xeec <interperetKnob+0x29c>
				}else
				{
					totalReleaseTime = ((currentGlobals->filteredKnobBuffer[select])-1)*238;
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	ee ee       	ldi	r30, 0xEE	; 238
     ee2:	e8 9f       	mul	r30, r24
     ee4:	a0 01       	movw	r20, r0
     ee6:	e9 9f       	mul	r30, r25
     ee8:	50 0d       	add	r21, r0
     eea:	11 24       	eor	r1, r1
				}
				currentKnobPattern->trackReleaseTimeMSB[positionSelectTracks] = ((totalReleaseTime)>>8);
     eec:	c6 0e       	add	r12, r22
     eee:	d7 1e       	adc	r13, r23
     ef0:	f6 01       	movw	r30, r12
     ef2:	e8 59       	subi	r30, 0x98	; 152
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	50 83       	st	Z, r21
				currentKnobPattern->trackReleaseTimeLSB[positionSelectTracks] = (totalReleaseTime);	
     ef8:	70 96       	adiw	r30, 0x10	; 16
     efa:	40 83       	st	Z, r20
				
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
     efc:	2e 0d       	add	r18, r14
     efe:	3f 1d       	adc	r19, r15
     f00:	f9 01       	movw	r30, r18
     f02:	eb 58       	subi	r30, 0x8B	; 139
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	d9 01       	movw	r26, r18
     f08:	a7 5b       	subi	r26, 0xB7	; 183
     f0a:	bf 4f       	sbci	r27, 0xFF	; 255
     f0c:	8c 91       	ld	r24, X
     f0e:	80 83       	st	Z, r24
     f10:	91 c0       	rjmp	.+290    	; 0x1034 <interperetKnob+0x3e4>
 			}
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
     f12:	89 2e       	mov	r8, r25
     f14:	91 2c       	mov	r9, r1
     f16:	ce 01       	movw	r24, r28
     f18:	88 0d       	add	r24, r8
     f1a:	99 1d       	adc	r25, r9
     f1c:	fc 01       	movw	r30, r24
     f1e:	eb 58       	subi	r30, 0x8B	; 139
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	20 81       	ld	r18, Z
			newRead = currentGlobals->filteredKnobBuffer[select];
     f24:	bc 97       	sbiw	r30, 0x2c	; 44
     f26:	60 81       	ld	r22, Z
}

uint8_t checkVariation(uint8_t v1, uint8_t v2) //this is used to check the difference between 2 knob reads, and give how far appart they are.
{
	uint8_t returnMe=0;
	if(v1>v2)
     f28:	26 17       	cp	r18, r22
     f2a:	20 f4       	brcc	.+8      	; 0xf34 <interperetKnob+0x2e4>
	{
		returnMe = v1-v2;
     f2c:	d6 2f       	mov	r29, r22
     f2e:	d2 1b       	sub	r29, r18
     f30:	2d 2f       	mov	r18, r29
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <interperetKnob+0x2e6>
	}
	else
	{
		returnMe = v2-v1;
     f34:	26 1b       	sub	r18, r22
 			break;
 			
 			case 4:;
 			prevRead = currentGlobals->lastFilteredKnobBuffer[select];
			newRead = currentGlobals->filteredKnobBuffer[select];
 			if(checkVariation(newRead,prevRead)>2)
     f36:	23 30       	cpi	r18, 0x03	; 3
     f38:	08 f4       	brcc	.+2      	; 0xf3c <interperetKnob+0x2ec>
     f3a:	7c c0       	rjmp	.+248    	; 0x1034 <interperetKnob+0x3e4>
 			{
				int16_t negCheckValueTrack = (currentGlobals->filteredKnobBuffer[select] / volumeDivisor)-NegativeOffset;
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__floatsisf>
     f46:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <volumeDivisor>
     f4a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <volumeDivisor+0x1>
     f4e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <volumeDivisor+0x2>
     f52:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <volumeDivisor+0x3>
     f56:	0e 94 96 1c 	call	0x392c	; 0x392c <__divsf3>
     f5a:	2b 01       	movw	r4, r22
     f5c:	3c 01       	movw	r6, r24
     f5e:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <NegativeOffset>
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__floatsisf>
     f6c:	9b 01       	movw	r18, r22
     f6e:	ac 01       	movw	r20, r24
     f70:	c3 01       	movw	r24, r6
     f72:	b2 01       	movw	r22, r4
     f74:	0e 94 31 1c 	call	0x3862	; 0x3862 <__subsf3>
     f78:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <__fixsfsi>
     f7c:	86 2f       	mov	r24, r22
     f7e:	97 2f       	mov	r25, r23
     f80:	9c 01       	movw	r18, r24
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
     f82:	f7 01       	movw	r30, r14
     f84:	82 85       	ldd	r24, Z+10	; 0x0a
     f86:	84 60       	ori	r24, 0x04	; 4
     f88:	82 87       	std	Z+10, r24	; 0x0a
				currentGlobals->knobStatus = (bankSwitch<<4)|positionSelect; //we don't want to | this, we just want to set it equal, so the screen only updates the last value
     f8a:	81 2f       	mov	r24, r17
     f8c:	80 64       	ori	r24, 0x40	; 64
     f8e:	83 87       	std	Z+11, r24	; 0x0b
				
	 			currentKnobPattern->trackMainVolumeLSB[positionSelectTracks] = (negCheckValueTrack);
     f90:	b1 2c       	mov	r11, r1
     f92:	f6 01       	movw	r30, r12
     f94:	ea 0d       	add	r30, r10
     f96:	fb 1d       	adc	r31, r11
     f98:	60 af       	std	Z+56, r22	; 0x38
	 			if(negCheckValueTrack>(-1))
     f9a:	33 23       	and	r19, r19
     f9c:	2c f0       	brlt	.+10     	; 0xfa8 <interperetKnob+0x358>
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 0;
     f9e:	f6 01       	movw	r30, r12
     fa0:	ea 0d       	add	r30, r10
     fa2:	fb 1d       	adc	r31, r11
     fa4:	10 a6       	std	Z+40, r1	; 0x28
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <interperetKnob+0x362>
	 			}else
	 			{
		 			currentKnobPattern->trackMainVolumeMSB[positionSelectTracks] = 255;
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	f6 01       	movw	r30, r12
     fac:	ea 0d       	add	r30, r10
     fae:	fb 1d       	adc	r31, r11
     fb0:	80 a7       	std	Z+40, r24	; 0x28
	 			}

				
				if(currentKnobPattern->envelopeType[positionSelectTracks]==1||currentKnobPattern->envelopeType[positionSelectTracks]==3) //set track volume directly if Envelope mode is only release, or none. 
     fb2:	f6 01       	movw	r30, r12
     fb4:	ea 0d       	add	r30, r10
     fb6:	fb 1d       	adc	r31, r11
     fb8:	e5 51       	subi	r30, 0x15	; 21
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	80 81       	ld	r24, Z
     fbe:	8d 7f       	andi	r24, 0xFD	; 253
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	79 f4       	brne	.+30     	; 0xfe2 <interperetKnob+0x392>
				{
	 				setTrackVolume(currentKnobPattern->trackSampleLSB[positionSelectTracks], currentKnobPattern->trackSampleMSB[positionSelectTracks],
     fc4:	e6 01       	movw	r28, r12
     fc6:	ca 0d       	add	r28, r10
     fc8:	db 1d       	adc	r29, r11
     fca:	de 01       	movw	r26, r28
     fcc:	a8 56       	subi	r26, 0x68	; 104
     fce:	bf 4f       	sbci	r27, 0xFF	; 255
     fd0:	fe 01       	movw	r30, r28
     fd2:	e8 55       	subi	r30, 0x58	; 88
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	28 a5       	ldd	r18, Y+40	; 0x28
     fd8:	46 2f       	mov	r20, r22
     fda:	6c 91       	ld	r22, X
     fdc:	80 81       	ld	r24, Z
     fde:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <setTrackVolume>
					currentKnobPattern->trackMainVolumeLSB[positionSelectTracks], currentKnobPattern->trackMainVolumeMSB[positionSelectTracks]);
				}
				 currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select]; 
     fe2:	87 01       	movw	r16, r14
     fe4:	08 0d       	add	r16, r8
     fe6:	19 1d       	adc	r17, r9
     fe8:	f8 01       	movw	r30, r16
     fea:	eb 58       	subi	r30, 0x8B	; 139
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	d8 01       	movw	r26, r16
     ff0:	a7 5b       	subi	r26, 0xB7	; 183
     ff2:	bf 4f       	sbci	r27, 0xFF	; 255
     ff4:	8c 91       	ld	r24, X
     ff6:	80 83       	st	Z, r24
     ff8:	1d c0       	rjmp	.+58     	; 0x1034 <interperetKnob+0x3e4>
		}
		
		
	}else
	{
		switch (select)
     ffa:	8a 32       	cpi	r24, 0x2A	; 42
     ffc:	d9 f4       	brne	.+54     	; 0x1034 <interperetKnob+0x3e4>
// 			break;
// 			
 			case 42:
			 
			 //we need to do a bit more filtering here. Not sure if that's happening here, or in the actual knob read.
			 if(currentGlobals->lastFilteredKnobBuffer[select]!=(currentGlobals->filteredKnobBuffer[select]))
     ffe:	fa 01       	movw	r30, r20
    1000:	ed 58       	subi	r30, 0x8D	; 141
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	80 81       	ld	r24, Z
    1006:	bc 96       	adiw	r30, 0x2c	; 44
    1008:	90 81       	ld	r25, Z
    100a:	98 17       	cp	r25, r24
    100c:	99 f0       	breq	.+38     	; 0x1034 <interperetKnob+0x3e4>
			{//not sure if this works here, but we're going to try it. 
				
				currentGlobals->valueChangeFlag |= (1<<knobChange); //if knob change bit is already set, this should be fine.
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	94 60       	ori	r25, 0x04	; 4
    1012:	9a 87       	std	Y+10, r25	; 0x0a
				currentGlobals->knobStatus = (5<<4); //since all other pot banks are 0-4, the next ones will be 5-8. We should maybe figure out a better system for this, 
    1014:	90 e5       	ldi	r25, 0x50	; 80
    1016:	9b 87       	std	Y+11, r25	; 0x0b
				//maybe some defines?				
 				currentKnobPattern->patternBPM = currentGlobals->filteredKnobBuffer[select];
    1018:	fb 01       	movw	r30, r22
    101a:	e8 53       	subi	r30, 0x38	; 56
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	91 83       	std	Z+1, r25	; 0x01
    1022:	80 83       	st	Z, r24
				currentGlobals->lastFilteredKnobBuffer[select] = currentGlobals->filteredKnobBuffer[select];
    1024:	da 01       	movw	r26, r20
    1026:	a1 56       	subi	r26, 0x61	; 97
    1028:	bf 4f       	sbci	r27, 0xFF	; 255
    102a:	fa 01       	movw	r30, r20
    102c:	ed 58       	subi	r30, 0x8D	; 141
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	80 81       	ld	r24, Z
    1032:	8c 93       	st	X, r24
// 			break;
		}
		
	}

}
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	bf 90       	pop	r11
    1046:	af 90       	pop	r10
    1048:	9f 90       	pop	r9
    104a:	8f 90       	pop	r8
    104c:	7f 90       	pop	r7
    104e:	6f 90       	pop	r6
    1050:	5f 90       	pop	r5
    1052:	4f 90       	pop	r4
    1054:	08 95       	ret

00001056 <listenKnobs>:

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	7c 01       	movw	r14, r24
    1062:	8b 01       	movw	r16, r22
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    1064:	c0 e0       	ldi	r28, 0x00	; 0
	{
		selectKnob(loopCounter);
    1066:	8c 2f       	mov	r24, r28
    1068:	88 dd       	rcall	.-1264   	; 0xb7a <selectKnob>
		updateKnob(loopCounter, currentGlobals);
    106a:	b8 01       	movw	r22, r16
    106c:	8c 2f       	mov	r24, r28
    106e:	c5 dd       	rcall	.-1142   	; 0xbfa <updateKnob>
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
    1070:	a8 01       	movw	r20, r16
    1072:	b7 01       	movw	r22, r14
    1074:	8c 2f       	mov	r24, r28
    1076:	ec dd       	rcall	.-1064   	; 0xc50 <interperetKnob>

}

void listenKnobs(Pattern *currentKnobPattern, Globals *currentGlobals)
{
	for(uint8_t loopCounter = 0; loopCounter<44; loopCounter++)
    1078:	cf 5f       	subi	r28, 0xFF	; 255
    107a:	cc 32       	cpi	r28, 0x2C	; 44
    107c:	a1 f7       	brne	.-24     	; 0x1066 <listenKnobs+0x10>
	{
		selectKnob(loopCounter);
		updateKnob(loopCounter, currentGlobals);
		interperetKnob(loopCounter,currentKnobPattern, currentGlobals);
	}
}
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	ff 90       	pop	r15
    1086:	ef 90       	pop	r14
    1088:	08 95       	ret

0000108a <initLEDs>:
extern Pattern currentPattern;
extern uint8_t currentStep;

void initLEDs()
{
	DDRG = 0B00000111; //outputs on G5,2, and 0.
    108a:	87 e0       	ldi	r24, 0x07	; 7
    108c:	83 bb       	out	0x13, r24	; 19
    108e:	08 95       	ret

00001090 <parseLEDs>:
}
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
    1090:	a2 98       	cbi	0x14, 2	; 20
    1092:	27 e0       	ldi	r18, 0x07	; 7
	for(uint8_t j=0; j<7; j++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    1094:	a0 9a       	sbi	0x14, 0	; 20
		if(gpParse&0x80)
    1096:	66 23       	and	r22, r22
    1098:	14 f4       	brge	.+4      	; 0x109e <parseLEDs+0xe>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    109a:	a1 9a       	sbi	0x14, 1	; 20
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <parseLEDs+0x10>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    109e:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    10a0:	a0 98       	cbi	0x14, 0	; 20
		gpParse = gpParse << 1;
    10a2:	66 0f       	add	r22, r22
    10a4:	21 50       	subi	r18, 0x01	; 1
void parseLEDs(uint16_t LEDInput, uint8_t gpButtonInput) //this should not be a 16 bit int, or we need an additional 8 bits
{
	uint16_t trigLEDParse = LEDInput;
	uint8_t gpParse = gpButtonInput; //we might not need these variables if they revert after they fall out of scope. These might be 2 whole wasted clock cycles.
	PORTG &= (~(1 << PG2)); //set latch low for data input
	for(uint8_t j=0; j<7; j++)
    10a6:	b1 f7       	brne	.-20     	; 0x1094 <parseLEDs+0x4>
    10a8:	21 e1       	ldi	r18, 0x11	; 17
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
	{
		PORTG |= (1 << PG0); //turn clock pin high
    10aa:	a0 9a       	sbi	0x14, 0	; 20
		if(trigLEDParse&32768)
    10ac:	99 23       	and	r25, r25
    10ae:	14 f4       	brge	.+4      	; 0x10b4 <parseLEDs+0x24>
		{
			PORTG |= (1 << PG1); //send current 1's place bit to the data pin
    10b0:	a1 9a       	sbi	0x14, 1	; 20
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <parseLEDs+0x26>
		}
		else
		{
			PORTG &= (~(1 << PG1));
    10b4:	a1 98       	cbi	0x14, 1	; 20
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
    10b6:	a0 98       	cbi	0x14, 0	; 20
		trigLEDParse = trigLEDParse << 1;
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	21 50       	subi	r18, 0x01	; 1
		}
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		gpParse = gpParse << 1;
	}
	
	for(uint8_t i = 0; i<17; i++)
    10be:	a9 f7       	brne	.-22     	; 0x10aa <parseLEDs+0x1a>
		PORTG &= (~(1 << PG0)); //turn clock pin low.
		trigLEDParse = trigLEDParse << 1;
	}
	
	
	PORTG |= (1 << PG2); //latch pin high
    10c0:	a2 9a       	sbi	0x14, 2	; 20
    10c2:	08 95       	ret

000010c4 <updateLEDs>:
}

void updateLEDs(Pattern ledCurrentPattern, Globals currentGlobals)
{
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	cf 57       	subi	r28, 0x7F	; 127
    10ce:	de 4f       	sbci	r29, 0xFE	; 254
    10d0:	28 81       	ld	r18, Y
    10d2:	39 81       	ldd	r19, Y+1	; 0x01
    10d4:	c1 58       	subi	r28, 0x81	; 129
    10d6:	d1 40       	sbci	r29, 0x01	; 1
    10d8:	cd 57       	subi	r28, 0x7D	; 125
    10da:	de 4f       	sbci	r29, 0xFE	; 254
    10dc:	68 81       	ld	r22, Y
    10de:	c3 58       	subi	r28, 0x83	; 131
    10e0:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t shiftedState = currentGlobals.menuState >> 4; //this will get rid of EncoderB
	switch(shiftedState)
    10e2:	c9 57       	subi	r28, 0x79	; 121
    10e4:	de 4f       	sbci	r29, 0xFE	; 254
    10e6:	98 81       	ld	r25, Y
    10e8:	c7 58       	subi	r28, 0x87	; 135
    10ea:	d1 40       	sbci	r29, 0x01	; 1
    10ec:	92 95       	swap	r25
    10ee:	9f 70       	andi	r25, 0x0F	; 15
    10f0:	91 30       	cpi	r25, 0x01	; 1
    10f2:	49 f0       	breq	.+18     	; 0x1106 <updateLEDs+0x42>
    10f4:	28 f0       	brcs	.+10     	; 0x1100 <updateLEDs+0x3c>
    10f6:	92 30       	cpi	r25, 0x02	; 2
    10f8:	d1 f0       	breq	.+52     	; 0x112e <updateLEDs+0x6a>
    10fa:	93 30       	cpi	r25, 0x03	; 3
    10fc:	d9 f0       	breq	.+54     	; 0x1134 <updateLEDs+0x70>
    10fe:	1c c0       	rjmp	.+56     	; 0x1138 <updateLEDs+0x74>
	{
		case 0:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    1100:	c9 01       	movw	r24, r18
    1102:	c6 df       	rcall	.-116    	; 0x1090 <parseLEDs>
		break;
    1104:	19 c0       	rjmp	.+50     	; 0x1138 <updateLEDs+0x74>

		case 1:
		parseLEDs(ledCurrentPattern.trackSequence[currentGlobals.currentStep], currentGlobals.currentGPButtons);
    1106:	cb 57       	subi	r28, 0x7B	; 123
    1108:	de 4f       	sbci	r29, 0xFE	; 254
    110a:	e8 81       	ld	r30, Y
    110c:	c5 58       	subi	r28, 0x85	; 133
    110e:	d1 40       	sbci	r29, 0x01	; 1
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	86 e0       	ldi	r24, 0x06	; 6
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	8c 0f       	add	r24, r28
    111c:	9d 1f       	adc	r25, r29
    111e:	e8 0f       	add	r30, r24
    1120:	f9 1f       	adc	r31, r25
    1122:	e5 50       	subi	r30, 0x05	; 5
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	80 81       	ld	r24, Z
    1128:	91 81       	ldd	r25, Z+1	; 0x01
    112a:	b2 df       	rcall	.-156    	; 0x1090 <parseLEDs>
		break;

		case 2:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    112c:	05 c0       	rjmp	.+10     	; 0x1138 <updateLEDs+0x74>
    112e:	c9 01       	movw	r24, r18
		break;
    1130:	af df       	rcall	.-162    	; 0x1090 <parseLEDs>

		case 3:
		parseLEDs(currentGlobals.currentTrigButtons, currentGlobals.currentGPButtons);
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <updateLEDs+0x74>
    1134:	c9 01       	movw	r24, r18
    1136:	ac df       	rcall	.-168    	; 0x1090 <parseLEDs>
		break;
	}

}
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <main>:
//Pattern may not need to be volatile, but I'd like to keep it around. 
volatile Pattern currentPattern;
volatile Globals currentGlobals;


int main(){
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	c1 5b       	subi	r28, 0xB1	; 177
    1148:	d3 40       	sbci	r29, 0x03	; 3
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
	uint8_t factoryReset=0; // set this to 1 if you would like to fill the eeprom with Factory data, and erase all user data.
	Screen screenBank;
	
	initScreen();
    1154:	0e 94 2a 12 	call	0x2454	; 0x2454 <initScreen>
	initButtons();
    1158:	99 d8       	rcall	.-3790   	; 0x28c <initButtons>
	initEncoders();
    115a:	9a d9       	rcall	.-3276   	; 0x490 <initEncoders>
    115c:	00 99       	sbic	0x00, 0	; 0
	//factory Reset;
	if(((~PINA)&0x01)&&((~PINL)&0x01))
    115e:	1f c0       	rjmp	.+62     	; 0x119e <main+0x60>
    1160:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1164:	80 fd       	sbrc	r24, 0
    1166:	1b c0       	rjmp	.+54     	; 0x119e <main+0x60>
    1168:	60 e0       	ldi	r22, 0x00	; 0
	{//if both buttons are pressed on startup, wait 4 seconds
		outputS("FactoryReset?       ",0);
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	80 e6       	ldi	r24, 0x60	; 96
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	0e 94 87 12 	call	0x250e	; 0x250e <outputS>
    1174:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1176:	8f e4       	ldi	r24, 0x4F	; 79
    1178:	93 ec       	ldi	r25, 0xC3	; 195
    117a:	21 50       	subi	r18, 0x01	; 1
    117c:	80 40       	sbci	r24, 0x00	; 0
    117e:	90 40       	sbci	r25, 0x00	; 0
    1180:	e1 f7       	brne	.-8      	; 0x117a <main+0x3c>
    1182:	00 c0       	rjmp	.+0      	; 0x1184 <main+0x46>
    1184:	00 00       	nop
    1186:	00 99       	sbic	0x00, 0	; 0
		_delay_ms(4000);
		if(((~PINA)&0x01)&&((~PINL)&0x01))
    1188:	0a c0       	rjmp	.+20     	; 0x119e <main+0x60>
    118a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    118e:	80 fd       	sbrc	r24, 0
    1190:	06 c0       	rjmp	.+12     	; 0x119e <main+0x60>
    1192:	61 e0       	ldi	r22, 0x01	; 1
		{
			outputS("yes?  no?           ",1);
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	85 e7       	ldi	r24, 0x75	; 117
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	0e 94 87 12 	call	0x250e	; 0x250e <outputS>
    119e:	60 e0       	ldi	r22, 0x00	; 0
			//then do stuff here to cause factory reset. 
			//probably use some while loop structure to make it happen. 
		}
		
	}
	initGlobals(&currentGlobals, factoryReset);  
    11a0:	8c e4       	ldi	r24, 0x4C	; 76
    11a2:	95 e0       	ldi	r25, 0x05	; 5
    11a4:	99 dc       	rcall	.-1742   	; 0xad8 <initGlobals>
	initLEDs();
    11a6:	71 df       	rcall	.-286    	; 0x108a <initLEDs>
    11a8:	73 d9       	rcall	.-3354   	; 0x490 <initEncoders>
	initEncoders();
    11aa:	d2 dc       	rcall	.-1628   	; 0xb50 <initADC>
    11ac:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <serialInit0>
	initADC();
    11b0:	0e 94 83 11 	call	0x2306	; 0x2306 <initMidi>
	serialInit0();
    11b4:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <initEnvelopes>
	initMidi();
    11b8:	0e 94 ae 14 	call	0x295c	; 0x295c <initSequencer>
	initEnvelopes();
    11bc:	0e 94 10 18 	call	0x3020	; 0x3020 <twi_init>
	initSequencer();
	twi_init();
    11c0:	81 ed       	ldi	r24, 0xD1	; 209
    11c2:	93 e0       	ldi	r25, 0x03	; 3
	initBank(&currentPattern);
    11c4:	5a dc       	rcall	.-1868   	; 0xa7a <initBank>
    11c6:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <currentGlobals+0x3>
    11ca:	81 ed       	ldi	r24, 0xD1	; 209
		//do factory reset here.
		factoryResetEeprom(currentPattern);
		globalWrite(&currentGlobals);
	}

	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
    11cc:	93 e0       	ldi	r25, 0x03	; 3
    11ce:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <eepromLoadPattern>
    11d2:	00 e0       	ldi	r16, 0x00	; 0
    11d4:	10 e0       	ldi	r17, 0x00	; 0
    11d6:	0f 2e       	mov	r0, r31
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    11d8:	fc e2       	ldi	r31, 0x2C	; 44
    11da:	df 2e       	mov	r13, r31
	{
		uint8_t loadSelect = i%44;
    11dc:	f0 2d       	mov	r31, r0
    11de:	98 01       	movw	r18, r16
    11e0:	af e2       	ldi	r26, 0x2F	; 47
    11e2:	ba eb       	ldi	r27, 0xBA	; 186
    11e4:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    11e8:	96 95       	lsr	r25
    11ea:	87 95       	ror	r24
    11ec:	92 95       	swap	r25
    11ee:	82 95       	swap	r24
    11f0:	8f 70       	andi	r24, 0x0F	; 15
    11f2:	89 27       	eor	r24, r25
    11f4:	9f 70       	andi	r25, 0x0F	; 15
    11f6:	89 27       	eor	r24, r25
    11f8:	d8 9e       	mul	r13, r24
    11fa:	90 01       	movw	r18, r0
    11fc:	d9 9e       	mul	r13, r25
    11fe:	30 0d       	add	r19, r0
    1200:	11 24       	eor	r1, r1
    1202:	78 01       	movw	r14, r16
    1204:	e2 1a       	sub	r14, r18
    1206:	f3 0a       	sbc	r15, r19
    1208:	8e 2d       	mov	r24, r14
		selectKnob(loadSelect);
    120a:	b7 dc       	rcall	.-1682   	; 0xb7a <selectKnob>
    120c:	6c e4       	ldi	r22, 0x4C	; 76
    120e:	75 e0       	ldi	r23, 0x05	; 5
		updateKnob(loadSelect, &currentGlobals);
    1210:	8e 2d       	mov	r24, r14
    1212:	f3 dc       	rcall	.-1562   	; 0xbfa <updateKnob>
    1214:	0f 5f       	subi	r16, 0xFF	; 255
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
		factoryResetEeprom(currentPattern);
		globalWrite(&currentGlobals);
	}

	eepromLoadPattern(&currentPattern,currentGlobals.currentPatternNumber);
	for(uint16_t i = 0; i<440; i++ ) //we need to load the FilterKnobbuffer into a stable state 
    1218:	08 3b       	cpi	r16, 0xB8	; 184
    121a:	21 e0       	ldi	r18, 0x01	; 1
    121c:	12 07       	cpc	r17, r18
    121e:	f9 f6       	brne	.-66     	; 0x11de <main+0xa0>
    1220:	8c e4       	ldi	r24, 0x4C	; 76
    1222:	95 e0       	ldi	r25, 0x05	; 5
	{
		uint8_t loadSelect = i%44;
		selectKnob(loadSelect);
		updateKnob(loadSelect, &currentGlobals);
	}
	initializeKnob(&currentGlobals); //then copy it to the lastFilteredKnobBuffer. 
    1224:	09 dd       	rcall	.-1518   	; 0xc38 <initializeKnob>
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	8c e4       	ldi	r24, 0x4C	; 76
    122a:	95 e0       	ldi	r25, 0x05	; 5
	globalLoad(&currentGlobals, factoryReset);
    122c:	0e 94 1e 1c 	call	0x383c	; 0x383c <globalLoad>
    1230:	8d b7       	in	r24, 0x3d	; 61
    1232:	9e b7       	in	r25, 0x3e	; 62
    1234:	87 5e       	subi	r24, 0xE7	; 231
	initMenu(&screenBank, currentPattern, currentGlobals); //fills screenBank with menu strings
    1236:	91 09       	sbc	r25, r1
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	9e bf       	out	0x3e, r25	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	8d bf       	out	0x3d, r24	; 61
    1242:	ad b7       	in	r26, 0x3d	; 61
    1244:	be b7       	in	r27, 0x3e	; 62
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	87 ee       	ldi	r24, 0xE7	; 231
    124a:	ec e4       	ldi	r30, 0x4C	; 76
    124c:	f5 e0       	ldi	r31, 0x05	; 5
    124e:	01 90       	ld	r0, Z+
    1250:	0d 92       	st	X+, r0
    1252:	8a 95       	dec	r24
    1254:	e1 f7       	brne	.-8      	; 0x124e <main+0x110>
    1256:	8d b7       	in	r24, 0x3d	; 61
    1258:	9e b7       	in	r25, 0x3e	; 62
    125a:	8b 57       	subi	r24, 0x7B	; 123
    125c:	91 40       	sbci	r25, 0x01	; 1
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	9e bf       	out	0x3e, r25	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	8d bf       	out	0x3d, r24	; 61
    1268:	ad b7       	in	r26, 0x3d	; 61
    126a:	be b7       	in	r27, 0x3e	; 62
    126c:	11 96       	adiw	r26, 0x01	; 1
    126e:	8b e7       	ldi	r24, 0x7B	; 123
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	e1 ed       	ldi	r30, 0xD1	; 209
    1274:	f3 e0       	ldi	r31, 0x03	; 3
    1276:	01 90       	ld	r0, Z+
    1278:	0d 92       	st	X+, r0
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	e1 f7       	brne	.-8      	; 0x1276 <main+0x138>
    127e:	ce 01       	movw	r24, r28
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	f9 d0       	rcall	.+498    	; 0x1476 <initMenu>
    1284:	84 e0       	ldi	r24, 0x04	; 4
    1286:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

	//this ISR is used for Button De-Bouncing. Maybe we could put it somewhere else. 
	TCCR2B = 1<<CS22;//using 64 from pre-scaler
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
	TIMSK2 = 1<<TOIE2;
    1290:	78 94       	sei
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli


	sei();	
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	6c e4       	ldi	r22, 0x4C	; 76
    129e:	75 e0       	ldi	r23, 0x05	; 5
    12a0:	81 ed       	ldi	r24, 0xD1	; 209


while(1) {
	
	
	listenTrigButtons(&currentPattern, &currentGlobals);
    12a2:	93 e0       	ldi	r25, 0x03	; 3
    12a4:	0e 94 4d 01 	call	0x29a	; 0x29a <listenTrigButtons>
    12a8:	8c e4       	ldi	r24, 0x4C	; 76
    12aa:	95 e0       	ldi	r25, 0x05	; 5
    12ac:	9f 93       	push	r25
	listenGPButtons(currentPattern, &currentGlobals);
    12ae:	8f 93       	push	r24
    12b0:	8d b7       	in	r24, 0x3d	; 61
    12b2:	9e b7       	in	r25, 0x3e	; 62
    12b4:	8b 57       	subi	r24, 0x7B	; 123
    12b6:	91 40       	sbci	r25, 0x01	; 1
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	9e bf       	out	0x3e, r25	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	8d bf       	out	0x3d, r24	; 61
    12c2:	ad b7       	in	r26, 0x3d	; 61
    12c4:	be b7       	in	r27, 0x3e	; 62
    12c6:	11 96       	adiw	r26, 0x01	; 1
    12c8:	8b e7       	ldi	r24, 0x7B	; 123
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	e1 ed       	ldi	r30, 0xD1	; 209
    12ce:	f3 e0       	ldi	r31, 0x03	; 3
    12d0:	01 90       	ld	r0, Z+
    12d2:	0d 92       	st	X+, r0
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <main+0x192>
    12d8:	49 d8       	rcall	.-3950   	; 0x36c <listenGPButtons>
    12da:	8d b7       	in	r24, 0x3d	; 61
    12dc:	9e b7       	in	r25, 0x3e	; 62
    12de:	83 58       	subi	r24, 0x83	; 131
	updateLEDs(currentPattern, currentGlobals);
    12e0:	9e 4f       	sbci	r25, 0xFE	; 254
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	87 5e       	subi	r24, 0xE7	; 231
    12ee:	91 09       	sbc	r25, r1
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	9e bf       	out	0x3e, r25	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	8d bf       	out	0x3d, r24	; 61
    12fa:	ad b7       	in	r26, 0x3d	; 61
    12fc:	be b7       	in	r27, 0x3e	; 62
    12fe:	11 96       	adiw	r26, 0x01	; 1
    1300:	87 ee       	ldi	r24, 0xE7	; 231
    1302:	ec e4       	ldi	r30, 0x4C	; 76
    1304:	f5 e0       	ldi	r31, 0x05	; 5
    1306:	01 90       	ld	r0, Z+
    1308:	0d 92       	st	X+, r0
    130a:	8a 95       	dec	r24
    130c:	e1 f7       	brne	.-8      	; 0x1306 <main+0x1c8>
    130e:	8d b7       	in	r24, 0x3d	; 61
    1310:	9e b7       	in	r25, 0x3e	; 62
    1312:	8b 57       	subi	r24, 0x7B	; 123
    1314:	91 40       	sbci	r25, 0x01	; 1
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	9e bf       	out	0x3e, r25	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	8d bf       	out	0x3d, r24	; 61
    1320:	ad b7       	in	r26, 0x3d	; 61
    1322:	be b7       	in	r27, 0x3e	; 62
    1324:	11 96       	adiw	r26, 0x01	; 1
    1326:	8b e7       	ldi	r24, 0x7B	; 123
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	e1 ed       	ldi	r30, 0xD1	; 209
    132c:	f3 e0       	ldi	r31, 0x03	; 3
    132e:	01 90       	ld	r0, Z+
    1330:	0d 92       	st	X+, r0
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	e1 f7       	brne	.-8      	; 0x132e <main+0x1f0>
    1336:	c6 de       	rcall	.-628    	; 0x10c4 <updateLEDs>
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
	listenEncoders(&currentPattern, &currentGlobals);
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	6c e4       	ldi	r22, 0x4C	; 76
    1344:	75 e0       	ldi	r23, 0x05	; 5
    1346:	81 ed       	ldi	r24, 0xD1	; 209
    1348:	93 e0       	ldi	r25, 0x03	; 3
    134a:	30 d9       	rcall	.-3488   	; 0x5ac <listenEncoders>
    134c:	6c e4       	ldi	r22, 0x4C	; 76
    134e:	75 e0       	ldi	r23, 0x05	; 5
	listenKnobs(&currentPattern, &currentGlobals);
    1350:	81 ed       	ldi	r24, 0xD1	; 209
    1352:	93 e0       	ldi	r25, 0x03	; 3
    1354:	80 de       	rcall	.-768    	; 0x1056 <listenKnobs>
    1356:	8d b7       	in	r24, 0x3d	; 61
    1358:	9e b7       	in	r25, 0x3e	; 62
    135a:	87 5e       	subi	r24, 0xE7	; 231
	updateSequencer(currentPattern, currentGlobals);
    135c:	91 09       	sbc	r25, r1
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	9e bf       	out	0x3e, r25	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	8d bf       	out	0x3d, r24	; 61
    1368:	ad b7       	in	r26, 0x3d	; 61
    136a:	be b7       	in	r27, 0x3e	; 62
    136c:	11 96       	adiw	r26, 0x01	; 1
    136e:	87 ee       	ldi	r24, 0xE7	; 231
    1370:	ec e4       	ldi	r30, 0x4C	; 76
    1372:	f5 e0       	ldi	r31, 0x05	; 5
    1374:	01 90       	ld	r0, Z+
    1376:	0d 92       	st	X+, r0
    1378:	8a 95       	dec	r24
    137a:	e1 f7       	brne	.-8      	; 0x1374 <main+0x236>
    137c:	8d b7       	in	r24, 0x3d	; 61
    137e:	9e b7       	in	r25, 0x3e	; 62
    1380:	8b 57       	subi	r24, 0x7B	; 123
    1382:	91 40       	sbci	r25, 0x01	; 1
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	9e bf       	out	0x3e, r25	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	8d bf       	out	0x3d, r24	; 61
    138e:	ad b7       	in	r26, 0x3d	; 61
    1390:	be b7       	in	r27, 0x3e	; 62
    1392:	11 96       	adiw	r26, 0x01	; 1
    1394:	8b e7       	ldi	r24, 0x7B	; 123
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	e1 ed       	ldi	r30, 0xD1	; 209
    139a:	f3 e0       	ldi	r31, 0x03	; 3
    139c:	01 90       	ld	r0, Z+
    139e:	0d 92       	st	X+, r0
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	e1 f7       	brne	.-8      	; 0x139c <main+0x25e>
    13a4:	0e 94 ce 14 	call	0x299c	; 0x299c <updateSequencer>
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
	updateScreen(&screenBank, &currentPattern, &currentGlobals);
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	4c e4       	ldi	r20, 0x4C	; 76
    13b4:	55 e0       	ldi	r21, 0x05	; 5
    13b6:	61 ed       	ldi	r22, 0xD1	; 209
    13b8:	73 e0       	ldi	r23, 0x03	; 3
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	9b d1       	rcall	.+822    	; 0x16f6 <updateScreen>
    13c0:	8d b7       	in	r24, 0x3d	; 61
    13c2:	9e b7       	in	r25, 0x3e	; 62
    13c4:	87 5e       	subi	r24, 0xE7	; 231
	midiRead(currentPattern, currentGlobals);
    13c6:	91 09       	sbc	r25, r1
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	9e bf       	out	0x3e, r25	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	8d bf       	out	0x3d, r24	; 61
    13d2:	ad b7       	in	r26, 0x3d	; 61
    13d4:	be b7       	in	r27, 0x3e	; 62
    13d6:	11 96       	adiw	r26, 0x01	; 1
    13d8:	87 ee       	ldi	r24, 0xE7	; 231
    13da:	ec e4       	ldi	r30, 0x4C	; 76
    13dc:	f5 e0       	ldi	r31, 0x05	; 5
    13de:	01 90       	ld	r0, Z+
    13e0:	0d 92       	st	X+, r0
    13e2:	8a 95       	dec	r24
    13e4:	e1 f7       	brne	.-8      	; 0x13de <main+0x2a0>
    13e6:	8d b7       	in	r24, 0x3d	; 61
    13e8:	9e b7       	in	r25, 0x3e	; 62
    13ea:	8b 57       	subi	r24, 0x7B	; 123
    13ec:	91 40       	sbci	r25, 0x01	; 1
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	9e bf       	out	0x3e, r25	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	8d bf       	out	0x3d, r24	; 61
    13f8:	ad b7       	in	r26, 0x3d	; 61
    13fa:	be b7       	in	r27, 0x3e	; 62
    13fc:	11 96       	adiw	r26, 0x01	; 1
    13fe:	8b e7       	ldi	r24, 0x7B	; 123
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	e1 ed       	ldi	r30, 0xD1	; 209
    1404:	f3 e0       	ldi	r31, 0x03	; 3
    1406:	01 90       	ld	r0, Z+
    1408:	0d 92       	st	X+, r0
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	e1 f7       	brne	.-8      	; 0x1406 <main+0x2c8>
    140e:	8b d7       	rcall	.+3862   	; 0x2326 <midiRead>
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
	releaseUpdate(&currentPattern, &currentGlobals);
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	6c e4       	ldi	r22, 0x4C	; 76
    141c:	75 e0       	ldi	r23, 0x05	; 5
    141e:	81 ed       	ldi	r24, 0xD1	; 209
    1420:	93 e0       	ldi	r25, 0x03	; 3
    1422:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <releaseUpdate>
    1426:	3a cf       	rjmp	.-396    	; 0x129c <main+0x15e>

00001428 <__vector_32>:
    1428:	1f 92       	push	r1
    142a:	0f 92       	push	r0
    142c:	0f b6       	in	r0, 0x3f	; 63

	}
}

ISR(TIMER3_COMPA_vect)
{
    142e:	0f 92       	push	r0
    1430:	11 24       	eor	r1, r1
    1432:	0b b6       	in	r0, 0x3b	; 59
    1434:	0f 92       	push	r0
    1436:	8f 93       	push	r24
    1438:	9f 93       	push	r25
    143a:	af 93       	push	r26
    143c:	bf 93       	push	r27
    143e:	ef 93       	push	r30
    1440:	ff 93       	push	r31
	currentGlobals.releaseCounter++; //this will increase every millisecond.
    1442:	ed ee       	ldi	r30, 0xED	; 237
    1444:	f5 e0       	ldi	r31, 0x05	; 5
    1446:	80 81       	ld	r24, Z
    1448:	91 81       	ldd	r25, Z+1	; 0x01
    144a:	a2 81       	ldd	r26, Z+2	; 0x02
    144c:	b3 81       	ldd	r27, Z+3	; 0x03
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	a1 1d       	adc	r26, r1
    1452:	b1 1d       	adc	r27, r1
    1454:	80 83       	st	Z, r24
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	a2 83       	std	Z+2, r26	; 0x02
    145a:	b3 83       	std	Z+3, r27	; 0x03
	//should run for about 1000 hours before overflow, so not something we really have to worry about.
    145c:	ff 91       	pop	r31
    145e:	ef 91       	pop	r30
    1460:	bf 91       	pop	r27
    1462:	af 91       	pop	r26
    1464:	9f 91       	pop	r25
    1466:	8f 91       	pop	r24
    1468:	0f 90       	pop	r0
    146a:	0b be       	out	0x3b, r0	; 59
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	0f 90       	pop	r0
    1472:	1f 90       	pop	r1
    1474:	18 95       	reti

00001476 <initMenu>:
uint8_t prevMenuState; //do we need this anymore?

//I don't like using a global extern here, instead of a passed pointer,
//but I can't seem to get the struct to stay in scope.
void initMenu(Screen *initTheScreen, Pattern currentPattern, Globals currentGlobals)
{
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	8c 01       	movw	r16, r24
    148c:	c6 57       	subi	r28, 0x76	; 118
    148e:	de 4f       	sbci	r29, 0xFE	; 254
    1490:	e8 80       	ld	r14, Y
    1492:	ca 58       	subi	r28, 0x8A	; 138
    1494:	d1 40       	sbci	r29, 0x01	; 1

//screen0
initArrays(initTheScreen->screen0,0,"Performance Mode");
    1496:	4a e8       	ldi	r20, 0x8A	; 138
    1498:	52 e0       	ldi	r21, 0x02	; 2
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	70 e0       	ldi	r23, 0x00	; 0
    149e:	ae da       	rcall	.-2724   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen0,1,"Pattern:");
    14a0:	4b e9       	ldi	r20, 0x9B	; 155
    14a2:	52 e0       	ldi	r21, 0x02	; 2
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	c8 01       	movw	r24, r16
    14aa:	a8 da       	rcall	.-2736   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen0,2,"BPM:");
    14ac:	44 ea       	ldi	r20, 0xA4	; 164
    14ae:	52 e0       	ldi	r21, 0x02	; 2
    14b0:	62 e0       	ldi	r22, 0x02	; 2
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	c8 01       	movw	r24, r16
    14b6:	a2 da       	rcall	.-2748   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen0,3,"Stop");
    14b8:	49 ea       	ldi	r20, 0xA9	; 169
    14ba:	52 e0       	ldi	r21, 0x02	; 2
    14bc:	63 e0       	ldi	r22, 0x03	; 3
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	c8 01       	movw	r24, r16
    14c2:	9c da       	rcall	.-2760   	; 0x9fc <initArrays>

//screen1
initArrays(initTheScreen->screen1,0,"Sequence Edit");
    14c4:	68 01       	movw	r12, r16
    14c6:	8d eb       	ldi	r24, 0xBD	; 189
    14c8:	c8 0e       	add	r12, r24
    14ca:	d1 1c       	adc	r13, r1
    14cc:	4e ea       	ldi	r20, 0xAE	; 174
    14ce:	52 e0       	ldi	r21, 0x02	; 2
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	c6 01       	movw	r24, r12
    14d6:	92 da       	rcall	.-2780   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen1,1,"Pattern:");
    14d8:	4b e9       	ldi	r20, 0x9B	; 155
    14da:	52 e0       	ldi	r21, 0x02	; 2
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	c6 01       	movw	r24, r12
    14e2:	8c da       	rcall	.-2792   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen1,2,"Steps:");
    14e4:	4c eb       	ldi	r20, 0xBC	; 188
    14e6:	52 e0       	ldi	r21, 0x02	; 2
    14e8:	62 e0       	ldi	r22, 0x02	; 2
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	c6 01       	movw	r24, r12
    14ee:	86 da       	rcall	.-2804   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen1,3,"Step number:");
    14f0:	43 ec       	ldi	r20, 0xC3	; 195
    14f2:	52 e0       	ldi	r21, 0x02	; 2
    14f4:	63 e0       	ldi	r22, 0x03	; 3
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	c6 01       	movw	r24, r12
    14fa:	80 da       	rcall	.-2816   	; 0x9fc <initArrays>
    14fc:	68 01       	movw	r12, r16

//screen2
initArrays(initTheScreen->screen2,0,"Track Settings");
    14fe:	86 e8       	ldi	r24, 0x86	; 134
    1500:	c8 1a       	sub	r12, r24
    1502:	8e ef       	ldi	r24, 0xFE	; 254
    1504:	d8 0a       	sbc	r13, r24
    1506:	40 ed       	ldi	r20, 0xD0	; 208
    1508:	52 e0       	ldi	r21, 0x02	; 2
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	c6 01       	movw	r24, r12
    1510:	75 da       	rcall	.-2838   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen2,1,"Track:");
    1512:	4f ed       	ldi	r20, 0xDF	; 223
    1514:	52 e0       	ldi	r21, 0x02	; 2
    1516:	61 e0       	ldi	r22, 0x01	; 1
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	c6 01       	movw	r24, r12
    151c:	6f da       	rcall	.-2850   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen2,2,"PlayMode:");
    151e:	46 ee       	ldi	r20, 0xE6	; 230
    1520:	52 e0       	ldi	r21, 0x02	; 2
    1522:	62 e0       	ldi	r22, 0x02	; 2
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	c6 01       	movw	r24, r12
    1528:	69 da       	rcall	.-2862   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen2,3,"OutRoute:");
    152a:	40 ef       	ldi	r20, 0xF0	; 240
    152c:	52 e0       	ldi	r21, 0x02	; 2
    152e:	63 e0       	ldi	r22, 0x03	; 3
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	c6 01       	movw	r24, r12
    1534:	63 da       	rcall	.-2874   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen2,4,"EnvelopeMode:");
    1536:	4a ef       	ldi	r20, 0xFA	; 250
    1538:	52 e0       	ldi	r21, 0x02	; 2
    153a:	64 e0       	ldi	r22, 0x04	; 4
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	c6 01       	movw	r24, r12
    1540:	5d da       	rcall	.-2886   	; 0x9fc <initArrays>
    1542:	48 e0       	ldi	r20, 0x08	; 8
initArrays(initTheScreen->screen2,5,"SustainTime:      S");
    1544:	53 e0       	ldi	r21, 0x03	; 3
    1546:	65 e0       	ldi	r22, 0x05	; 5
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	c6 01       	movw	r24, r12
    154c:	57 da       	rcall	.-2898   	; 0x9fc <initArrays>
    154e:	68 01       	movw	r12, r16

//screen3
initArrays(initTheScreen->screen3,1,"Midi Channel:");
    1550:	89 ec       	ldi	r24, 0xC9	; 201
    1552:	c8 1a       	sub	r12, r24
    1554:	8d ef       	ldi	r24, 0xFD	; 253
    1556:	d8 0a       	sbc	r13, r24
    1558:	4c e1       	ldi	r20, 0x1C	; 28
    155a:	53 e0       	ldi	r21, 0x03	; 3
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	c6 01       	movw	r24, r12
    1562:	4c da       	rcall	.-2920   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen3,2,"Midi trig   :");
    1564:	4a e2       	ldi	r20, 0x2A	; 42
    1566:	53 e0       	ldi	r21, 0x03	; 3
    1568:	62 e0       	ldi	r22, 0x02	; 2
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	c6 01       	movw	r24, r12
    156e:	46 da       	rcall	.-2932   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen3,3," ");
    1570:	48 e8       	ldi	r20, 0x88	; 136
    1572:	52 e0       	ldi	r21, 0x02	; 2
    1574:	63 e0       	ldi	r22, 0x03	; 3
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	c6 01       	movw	r24, r12
    157a:	40 da       	rcall	.-2944   	; 0x9fc <initArrays>
initArrays(initTheScreen->screen3,0,"Global Settings");
    157c:	48 e3       	ldi	r20, 0x38	; 56
    157e:	53 e0       	ldi	r21, 0x03	; 3
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	c6 01       	movw	r24, r12
    1586:	3a da       	rcall	.-2956   	; 0x9fc <initArrays>

//init all of the knob arrays:
initArrays(initTheScreen->knobScreen,0,"OutVolume x : xxxdb");//string 0 is outVolume
    1588:	68 01       	movw	r12, r16
    158a:	8c e0       	ldi	r24, 0x0C	; 12
    158c:	c8 1a       	sub	r12, r24
    158e:	8d ef       	ldi	r24, 0xFD	; 253
    1590:	d8 0a       	sbc	r13, r24
    1592:	48 e4       	ldi	r20, 0x48	; 72
    1594:	53 e0       	ldi	r21, 0x03	; 3
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,1,"Pitch : xxx");//string 1 is pitch
    159c:	2f da       	rcall	.-2978   	; 0x9fc <initArrays>
    159e:	4c e5       	ldi	r20, 0x5C	; 92
    15a0:	53 e0       	ldi	r21, 0x03	; 3
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	c6 01       	movw	r24, r12
initArrays(initTheScreen->knobScreen,2,"AttackTime  :      S"); //string 2 is Envelope gain
    15a8:	29 da       	rcall	.-2990   	; 0x9fc <initArrays>
    15aa:	48 e6       	ldi	r20, 0x68	; 104
    15ac:	53 e0       	ldi	r21, 0x03	; 3
    15ae:	62 e0       	ldi	r22, 0x02	; 2
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	c6 01       	movw	r24, r12
    15b4:	23 da       	rcall	.-3002   	; 0x9fc <initArrays>
initArrays(initTheScreen->knobScreen,3,"ReleaseTimexx:xx xxx"); //string 3 is Envelop Time
    15b6:	4d e7       	ldi	r20, 0x7D	; 125
    15b8:	53 e0       	ldi	r21, 0x03	; 3
    15ba:	63 e0       	ldi	r22, 0x03	; 3
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	c6 01       	movw	r24, r12
    15c0:	1d da       	rcall	.-3014   	; 0x9fc <initArrays>
initArrays(initTheScreen->knobScreen,4,"TrackVolume xx:xxxdb"); //string 4 is track Level.
    15c2:	42 e9       	ldi	r20, 0x92	; 146
    15c4:	53 e0       	ldi	r21, 0x03	; 3
    15c6:	64 e0       	ldi	r22, 0x04	; 4
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	c6 01       	movw	r24, r12
    15cc:	17 da       	rcall	.-3026   	; 0x9fc <initArrays>
    15ce:	cc 52       	subi	r28, 0x2C	; 44
//initArrays(initTheScreen->knobScreen,5,"BPM: ");
//we might want to put in one of these for BPM, but I'm not sure. 

numPrinter(initTheScreen->screen0[2],5,3, currentPattern.patternBPM);
    15d0:	df 4f       	sbci	r29, 0xFF	; 255
    15d2:	28 81       	ld	r18, Y
    15d4:	39 81       	ldd	r19, Y+1	; 0x01
    15d6:	c4 5d       	subi	r28, 0xD4	; 212
    15d8:	d0 40       	sbci	r29, 0x00	; 0
    15da:	43 e0       	ldi	r20, 0x03	; 3
    15dc:	65 e0       	ldi	r22, 0x05	; 5
    15de:	c8 01       	movw	r24, r16
    15e0:	8a 96       	adiw	r24, 0x2a	; 42
    15e2:	ad d7       	rcall	.+3930   	; 0x253e <numPrinter>
    15e4:	cd 56       	subi	r28, 0x6D	; 109
numPrinter(initTheScreen->screen3[1],14,2, (currentGlobals.midiChannel)+1);
    15e6:	de 4f       	sbci	r29, 0xFE	; 254
    15e8:	28 81       	ld	r18, Y
    15ea:	c3 59       	subi	r28, 0x93	; 147
    15ec:	d1 40       	sbci	r29, 0x01	; 1
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	2f 5f       	subi	r18, 0xFF	; 255
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	42 e0       	ldi	r20, 0x02	; 2
    15f6:	6e e0       	ldi	r22, 0x0E	; 14
    15f8:	c8 01       	movw	r24, r16
    15fa:	84 5b       	subi	r24, 0xB4	; 180
    15fc:	9d 4f       	sbci	r25, 0xFD	; 253
    15fe:	9f d7       	rcall	.+3902   	; 0x253e <numPrinter>
    1600:	f1 2c       	mov	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	e8 1a       	sub	r14, r24
    1606:	f8 0a       	sbc	r15, r24
    1608:	97 01       	movw	r18, r14
    160a:	43 e0       	ldi	r20, 0x03	; 3
    160c:	69 e0       	ldi	r22, 0x09	; 9
    160e:	c8 01       	movw	r24, r16
    1610:	45 96       	adiw	r24, 0x15	; 21
    1612:	95 d7       	rcall	.+3882   	; 0x253e <numPrinter>
    1614:	97 01       	movw	r18, r14
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
    1616:	43 e0       	ldi	r20, 0x03	; 3
    1618:	69 e0       	ldi	r22, 0x09	; 9
    161a:	c8 01       	movw	r24, r16
    161c:	8e 52       	subi	r24, 0x2E	; 46
    161e:	9f 4f       	sbci	r25, 0xFF	; 255
    1620:	8e d7       	rcall	.+3868   	; 0x253e <numPrinter>
    1622:	ca 52       	subi	r28, 0x2A	; 42
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
    1624:	df 4f       	sbci	r29, 0xFF	; 255
    1626:	28 81       	ld	r18, Y
    1628:	c6 5d       	subi	r28, 0xD6	; 214
    162a:	d0 40       	sbci	r29, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	42 e0       	ldi	r20, 0x02	; 2
    1630:	67 e0       	ldi	r22, 0x07	; 7
    1632:	c8 01       	movw	r24, r16
    1634:	89 51       	subi	r24, 0x19	; 25
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	82 d7       	rcall	.+3844   	; 0x253e <numPrinter>
    163a:	c5 57       	subi	r28, 0x75	; 117
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
    163c:	de 4f       	sbci	r29, 0xFE	; 254
    163e:	28 81       	ld	r18, Y
    1640:	cb 58       	subi	r28, 0x8B	; 139
    1642:	d1 40       	sbci	r29, 0x01	; 1
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	2f 5f       	subi	r18, 0xFF	; 255
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	42 e0       	ldi	r20, 0x02	; 2
    164c:	6d e0       	ldi	r22, 0x0D	; 13
    164e:	c8 01       	movw	r24, r16
    1650:	84 50       	subi	r24, 0x04	; 4
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	74 d7       	rcall	.+3816   	; 0x253e <numPrinter>
    1656:	e1 2c       	mov	r14, r1
    1658:	f1 2c       	mov	r15, r1
    165a:	b7 01       	movw	r22, r14
    165c:	c8 01       	movw	r24, r16
 
	for(uint8_t i=0;i<4; i++ )
	{
		outputS(initTheScreen->screen0[i],i);
    165e:	57 d7       	rcall	.+3758   	; 0x250e <outputS>
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	e8 1a       	sub	r14, r24
    1664:	f8 0a       	sbc	r15, r24
    1666:	0b 5e       	subi	r16, 0xEB	; 235
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	84 e0       	ldi	r24, 0x04	; 4
    166c:	e8 16       	cp	r14, r24
    166e:	f1 04       	cpc	r15, r1
numPrinter(initTheScreen->screen0[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[1], 9, 3, (currentGlobals.currentPatternNumber)+1);
numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern.numSteps);
numPrinter(initTheScreen->screen1[3], 13, 2, (currentGlobals.currentStep)+1);
 
	for(uint8_t i=0;i<4; i++ )
    1670:	a1 f7       	brne	.-24     	; 0x165a <initMenu+0x1e4>
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
	{
		outputS(initTheScreen->screen0[i],i);
	}
}
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	08 95       	ret

00001684 <reInitMenuOnLoad>:
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16

//this method fills all the relevant screens once we load a new pattern. 
void reInitMenuOnLoad(Screen *initTheScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	ec 01       	movw	r28, r24
    1692:	8b 01       	movw	r16, r22
    1694:	7a 01       	movw	r14, r20
	numPrinter(initTheScreen->screen0[2],5,3, currentPattern->patternBPM);
    1696:	fb 01       	movw	r30, r22
    1698:	e8 53       	subi	r30, 0x38	; 56
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	20 81       	ld	r18, Z
    169e:	31 81       	ldd	r19, Z+1	; 0x01
    16a0:	43 e0       	ldi	r20, 0x03	; 3
    16a2:	65 e0       	ldi	r22, 0x05	; 5
    16a4:	8a 96       	adiw	r24, 0x2a	; 42
    16a6:	4b d7       	rcall	.+3734   	; 0x253e <numPrinter>
	numPrinter(initTheScreen->screen1[2], 7, 2, currentPattern->numSteps);
    16a8:	f8 01       	movw	r30, r16
    16aa:	e6 53       	subi	r30, 0x36	; 54
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	20 81       	ld	r18, Z
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	42 e0       	ldi	r20, 0x02	; 2
    16b4:	67 e0       	ldi	r22, 0x07	; 7
    16b6:	ce 01       	movw	r24, r28
    16b8:	89 51       	subi	r24, 0x19	; 25
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	40 d7       	rcall	.+3712   	; 0x253e <numPrinter>
	numPrinter(initTheScreen->screen1[1],9,3,(currentGlobals->currentPatternNumber)+1);
    16be:	f7 01       	movw	r30, r14
    16c0:	23 81       	ldd	r18, Z+3	; 0x03
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	2f 5f       	subi	r18, 0xFF	; 255
    16c6:	3f 4f       	sbci	r19, 0xFF	; 255
    16c8:	43 e0       	ldi	r20, 0x03	; 3
    16ca:	69 e0       	ldi	r22, 0x09	; 9
    16cc:	ce 01       	movw	r24, r28
    16ce:	8e 52       	subi	r24, 0x2E	; 46
    16d0:	9f 4f       	sbci	r25, 0xFF	; 255
    16d2:	35 d7       	rcall	.+3690   	; 0x253e <numPrinter>
	numPrinter(initTheScreen->screen0[1],9,3,(currentGlobals->currentPatternNumber)+1);
    16d4:	f7 01       	movw	r30, r14
    16d6:	23 81       	ldd	r18, Z+3	; 0x03
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	2f 5f       	subi	r18, 0xFF	; 255
    16dc:	3f 4f       	sbci	r19, 0xFF	; 255
    16de:	43 e0       	ldi	r20, 0x03	; 3
    16e0:	69 e0       	ldi	r22, 0x09	; 9
    16e2:	ce 01       	movw	r24, r28
    16e4:	45 96       	adiw	r24, 0x15	; 21
    16e6:	2b d7       	rcall	.+3670   	; 0x253e <numPrinter>
}
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	08 95       	ret

000016f6 <updateScreen>:

void updateScreen(Screen *menuScreen, Pattern *currentPattern, Globals *currentGlobals)
{
    16f6:	8f 92       	push	r8
    16f8:	9f 92       	push	r9
    16fa:	af 92       	push	r10
    16fc:	bf 92       	push	r11
    16fe:	cf 92       	push	r12
    1700:	df 92       	push	r13
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	8c 01       	movw	r16, r24
    1710:	7b 01       	movw	r14, r22
    1712:	ea 01       	movw	r28, r20
	
	if((currentGlobals->valueChangeFlag)&(1<<encoderChange))//check if encoder bit is high
    1714:	8a 85       	ldd	r24, Y+10	; 0x0a
    1716:	80 ff       	sbrs	r24, 0
    1718:	da c2       	rjmp	.+1460   	; 0x1cce <updateScreen+0x5d8>
	{ 
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<encoderChange));//set encoder bit low, and carry our whatever encoder change has occurred. 
    171a:	1a 86       	std	Y+10, r1	; 0x0a
		//we need to debug this to make sure it's doing what we think it's doing.
		switch(currentGlobals->menuState)
    171c:	8e 81       	ldd	r24, Y+6	; 0x06
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	8b 33       	cpi	r24, 0x3B	; 59
    1722:	91 05       	cpc	r25, r1
    1724:	08 f0       	brcs	.+2      	; 0x1728 <updateScreen+0x32>
    1726:	d0 c2       	rjmp	.+1440   	; 0x1cc8 <updateScreen+0x5d2>
    1728:	fc 01       	movw	r30, r24
    172a:	88 27       	eor	r24, r24
    172c:	e3 55       	subi	r30, 0x53	; 83
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	8f 4f       	sbci	r24, 0xFF	; 255
    1732:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__tablejump2__>
		{
			case PreformanceModeInit: //initial state
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    1736:	c8 01       	movw	r24, r16
    1738:	a5 df       	rcall	.-182    	; 0x1684 <reInitMenuOnLoad>
			outputS(menuScreen->screen0[0], 0);
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	c8 01       	movw	r24, r16
    1740:	e6 d6       	rcall	.+3532   	; 0x250e <outputS>
			outputS(menuScreen->screen0[1], 1);
    1742:	61 e0       	ldi	r22, 0x01	; 1
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	c8 01       	movw	r24, r16
    1748:	45 96       	adiw	r24, 0x15	; 21
    174a:	e1 d6       	rcall	.+3522   	; 0x250e <outputS>
			outputS(menuScreen->screen0[2], 2);
    174c:	62 e0       	ldi	r22, 0x02	; 2
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	c8 01       	movw	r24, r16
    1752:	8a 96       	adiw	r24, 0x2a	; 42
    1754:	dc d6       	rcall	.+3512   	; 0x250e <outputS>
			outputS(menuScreen->screen0[3], 3);
    1756:	63 e0       	ldi	r22, 0x03	; 3
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	c8 01       	movw	r24, r16
    175c:	cf 96       	adiw	r24, 0x3f	; 63
    175e:	d7 d6       	rcall	.+3502   	; 0x250e <outputS>
			break;
    1760:	b3 c2       	rjmp	.+1382   	; 0x1cc8 <updateScreen+0x5d2>

			case SequencerMenuInit:
			outputS(menuScreen->screen1[0], 0);
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	c8 01       	movw	r24, r16
    1768:	83 54       	subi	r24, 0x43	; 67
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	d0 d6       	rcall	.+3488   	; 0x250e <outputS>
			outputS(menuScreen->screen1[1], 1);
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	c8 01       	movw	r24, r16
    1774:	8e 52       	subi	r24, 0x2E	; 46
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	ca d6       	rcall	.+3476   	; 0x250e <outputS>
			outputS(menuScreen->screen1[2], 2);
    177a:	62 e0       	ldi	r22, 0x02	; 2
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	c8 01       	movw	r24, r16
    1780:	89 51       	subi	r24, 0x19	; 25
    1782:	9f 4f       	sbci	r25, 0xFF	; 255
    1784:	c4 d6       	rcall	.+3464   	; 0x250e <outputS>
			outputS(menuScreen->screen1[3], 3);
    1786:	63 e0       	ldi	r22, 0x03	; 3
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	c8 01       	movw	r24, r16
    178c:	84 50       	subi	r24, 0x04	; 4
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	be d6       	rcall	.+3452   	; 0x250e <outputS>
    1792:	81 e1       	ldi	r24, 0x11	; 17
			currentGlobals->menuState = SequencerMenuArrow1; 
    1794:	8e 83       	std	Y+6, r24	; 0x06
    1796:	88 e0       	ldi	r24, 0x08	; 8
			
			
			case SequencerMenuArrow1:
			menuScreen->screen1[1][19]= 8;
    1798:	f8 01       	movw	r30, r16
    179a:	eb 51       	subi	r30, 0x1B	; 27
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 83       	st	Z, r24
    17a0:	80 e2       	ldi	r24, 0x20	; 32
			menuScreen->screen1[2][19] = ' ';
    17a2:	75 96       	adiw	r30, 0x15	; 21
    17a4:	80 83       	st	Z, r24
			menuScreen->screen1[3][19] = ' ';
    17a6:	75 96       	adiw	r30, 0x15	; 21
    17a8:	80 83       	st	Z, r24
			outputS(menuScreen->screen1[1], 1);
    17aa:	61 e0       	ldi	r22, 0x01	; 1
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	c8 01       	movw	r24, r16
    17b0:	8e 52       	subi	r24, 0x2E	; 46
    17b2:	9f 4f       	sbci	r25, 0xFF	; 255
    17b4:	ac d6       	rcall	.+3416   	; 0x250e <outputS>
			outputS(menuScreen->screen1[2], 2);
    17b6:	62 e0       	ldi	r22, 0x02	; 2
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	c8 01       	movw	r24, r16
    17bc:	89 51       	subi	r24, 0x19	; 25
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    17c0:	a6 d6       	rcall	.+3404   	; 0x250e <outputS>
    17c2:	63 e0       	ldi	r22, 0x03	; 3
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	c8 01       	movw	r24, r16
    17c8:	84 50       	subi	r24, 0x04	; 4
    17ca:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    17cc:	a0 d6       	rcall	.+3392   	; 0x250e <outputS>
			
			case SequencerMenuArrow1Select:
			reInitMenuOnLoad(menuScreen, currentPattern, currentGlobals);
    17ce:	7c c2       	rjmp	.+1272   	; 0x1cc8 <updateScreen+0x5d2>
    17d0:	c8 01       	movw	r24, r16
    17d2:	58 df       	rcall	.-336    	; 0x1684 <reInitMenuOnLoad>
			outputS(menuScreen->screen1[1],1);
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	c8 01       	movw	r24, r16
    17da:	8e 52       	subi	r24, 0x2E	; 46
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	97 d6       	rcall	.+3374   	; 0x250e <outputS>
    17e0:	73 c2       	rjmp	.+1254   	; 0x1cc8 <updateScreen+0x5d2>
			break;
    17e2:	80 e2       	ldi	r24, 0x20	; 32
	
	
			case SequencerMenuArrow2:
			menuScreen->screen1[1][19]= ' ';
    17e4:	f8 01       	movw	r30, r16
    17e6:	eb 51       	subi	r30, 0x1B	; 27
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	80 83       	st	Z, r24
			menuScreen->screen1[2][19] = 8;
    17ec:	98 e0       	ldi	r25, 0x08	; 8
    17ee:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = ' ';
    17f0:	90 83       	st	Z, r25
    17f2:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen1[1], 1);
    17f4:	80 83       	st	Z, r24
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	c8 01       	movw	r24, r16
    17fc:	8e 52       	subi	r24, 0x2E	; 46
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    1800:	86 d6       	rcall	.+3340   	; 0x250e <outputS>
    1802:	62 e0       	ldi	r22, 0x02	; 2
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	c8 01       	movw	r24, r16
    1808:	89 51       	subi	r24, 0x19	; 25
    180a:	9f 4f       	sbci	r25, 0xFF	; 255
    180c:	80 d6       	rcall	.+3328   	; 0x250e <outputS>
			outputS(menuScreen->screen1[3], 3);
    180e:	63 e0       	ldi	r22, 0x03	; 3
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	c8 01       	movw	r24, r16
    1814:	84 50       	subi	r24, 0x04	; 4
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	7a d6       	rcall	.+3316   	; 0x250e <outputS>
			break;
	
			case SequencerMenuArrow2Select:
			numPrinter(menuScreen->screen1[2],7,2,currentPattern->numSteps);
    181a:	56 c2       	rjmp	.+1196   	; 0x1cc8 <updateScreen+0x5d2>
    181c:	fb 01       	movw	r30, r22
    181e:	e6 53       	subi	r30, 0x36	; 54
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	20 81       	ld	r18, Z
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	42 e0       	ldi	r20, 0x02	; 2
    1828:	67 e0       	ldi	r22, 0x07	; 7
    182a:	68 01       	movw	r12, r16
    182c:	87 ee       	ldi	r24, 0xE7	; 231
    182e:	c8 0e       	add	r12, r24
    1830:	d1 1c       	adc	r13, r1
    1832:	c6 01       	movw	r24, r12
    1834:	84 d6       	rcall	.+3336   	; 0x253e <numPrinter>
			outputS(menuScreen->screen1[2],2);
    1836:	62 e0       	ldi	r22, 0x02	; 2
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	c6 01       	movw	r24, r12
    183c:	68 d6       	rcall	.+3280   	; 0x250e <outputS>
			break;
    183e:	44 c2       	rjmp	.+1160   	; 0x1cc8 <updateScreen+0x5d2>
	
			case SequencerMenuArrow3:
			menuScreen->screen1[1][19]= ' ';
    1840:	80 e2       	ldi	r24, 0x20	; 32
    1842:	f8 01       	movw	r30, r16
    1844:	eb 51       	subi	r30, 0x1B	; 27
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
			menuScreen->screen1[2][19] = ' ';
    1848:	80 83       	st	Z, r24
    184a:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen1[3][19] = 8;
    184c:	80 83       	st	Z, r24
    184e:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen1[1], 1);
    1850:	75 96       	adiw	r30, 0x15	; 21
    1852:	80 83       	st	Z, r24
    1854:	61 e0       	ldi	r22, 0x01	; 1
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	c8 01       	movw	r24, r16
    185a:	8e 52       	subi	r24, 0x2E	; 46
    185c:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[2], 2);
    185e:	57 d6       	rcall	.+3246   	; 0x250e <outputS>
    1860:	62 e0       	ldi	r22, 0x02	; 2
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	c8 01       	movw	r24, r16
    1866:	89 51       	subi	r24, 0x19	; 25
    1868:	9f 4f       	sbci	r25, 0xFF	; 255
			outputS(menuScreen->screen1[3], 3);
    186a:	51 d6       	rcall	.+3234   	; 0x250e <outputS>
    186c:	63 e0       	ldi	r22, 0x03	; 3
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	c8 01       	movw	r24, r16
    1872:	84 50       	subi	r24, 0x04	; 4
    1874:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
    1876:	4b d6       	rcall	.+3222   	; 0x250e <outputS>
		
			case SequencerMenuArrow3Select:
			numPrinter(menuScreen->screen1[3],14,2,(currentGlobals->currentStep)+1); //these are 0 indexed, so we need to add 1 to the display.
    1878:	27 c2       	rjmp	.+1102   	; 0x1cc8 <updateScreen+0x5d2>
    187a:	2c 81       	ldd	r18, Y+4	; 0x04
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	2f 5f       	subi	r18, 0xFF	; 255
    1880:	3f 4f       	sbci	r19, 0xFF	; 255
    1882:	42 e0       	ldi	r20, 0x02	; 2
    1884:	6e e0       	ldi	r22, 0x0E	; 14
    1886:	68 01       	movw	r12, r16
    1888:	9c ef       	ldi	r25, 0xFC	; 252
    188a:	c9 0e       	add	r12, r25
    188c:	d1 1c       	adc	r13, r1
			outputS(menuScreen->screen1[3],3);
    188e:	c6 01       	movw	r24, r12
    1890:	56 d6       	rcall	.+3244   	; 0x253e <numPrinter>
    1892:	63 e0       	ldi	r22, 0x03	; 3
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	c6 01       	movw	r24, r12
			break;
	

			case TrackMenuInit:
			outputS(menuScreen->screen2[0], 0);
    1898:	3a d6       	rcall	.+3188   	; 0x250e <outputS>
    189a:	16 c2       	rjmp	.+1068   	; 0x1cc8 <updateScreen+0x5d2>
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	c8 01       	movw	r24, r16
    18a2:	86 58       	subi	r24, 0x86	; 134
    18a4:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[1], 1);
    18a6:	33 d6       	rcall	.+3174   	; 0x250e <outputS>
    18a8:	61 e0       	ldi	r22, 0x01	; 1
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	c8 01       	movw	r24, r16
    18ae:	81 57       	subi	r24, 0x71	; 113
    18b0:	9e 4f       	sbci	r25, 0xFE	; 254
    18b2:	2d d6       	rcall	.+3162   	; 0x250e <outputS>
			outputS(menuScreen->screen2[2], 2);
    18b4:	62 e0       	ldi	r22, 0x02	; 2
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	c8 01       	movw	r24, r16
    18ba:	8c 55       	subi	r24, 0x5C	; 92
    18bc:	9e 4f       	sbci	r25, 0xFE	; 254
    18be:	27 d6       	rcall	.+3150   	; 0x250e <outputS>
			outputS(menuScreen->screen2[3], 3);
    18c0:	63 e0       	ldi	r22, 0x03	; 3
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	c8 01       	movw	r24, r16
    18c6:	87 54       	subi	r24, 0x47	; 71
    18c8:	9e 4f       	sbci	r25, 0xFE	; 254
    18ca:	21 d6       	rcall	.+3138   	; 0x250e <outputS>
			currentGlobals->menuState = TrackMenuArrow1;
    18cc:	81 e2       	ldi	r24, 0x21	; 33
		
			case TrackMenuArrow1:
			menuScreen->screen2[1][19]= 8;
    18ce:	8e 83       	std	Y+6, r24	; 0x06
    18d0:	88 e0       	ldi	r24, 0x08	; 8
    18d2:	f8 01       	movw	r30, r16
    18d4:	ee 55       	subi	r30, 0x5E	; 94
    18d6:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    18d8:	80 83       	st	Z, r24
    18da:	80 e2       	ldi	r24, 0x20	; 32
    18dc:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    18de:	80 83       	st	Z, r24
    18e0:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    18e2:	80 83       	st	Z, r24
    18e4:	61 e0       	ldi	r22, 0x01	; 1
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	c8 01       	movw	r24, r16
    18ea:	81 57       	subi	r24, 0x71	; 113
    18ec:	9e 4f       	sbci	r25, 0xFE	; 254
    18ee:	0f d6       	rcall	.+3102   	; 0x250e <outputS>
			outputS(menuScreen->screen2[2], 2);
    18f0:	62 e0       	ldi	r22, 0x02	; 2
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	c8 01       	movw	r24, r16
    18f6:	8c 55       	subi	r24, 0x5C	; 92
    18f8:	9e 4f       	sbci	r25, 0xFE	; 254
    18fa:	09 d6       	rcall	.+3090   	; 0x250e <outputS>
			outputS(menuScreen->screen2[3], 3);
    18fc:	63 e0       	ldi	r22, 0x03	; 3
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	c8 01       	movw	r24, r16
    1902:	87 54       	subi	r24, 0x47	; 71
    1904:	9e 4f       	sbci	r25, 0xFE	; 254
    1906:	03 d6       	rcall	.+3078   	; 0x250e <outputS>
			break;
    1908:	df c1       	rjmp	.+958    	; 0x1cc8 <updateScreen+0x5d2>
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	db 01       	movw	r26, r22
    190e:	a8 0f       	add	r26, r24
    1910:	b1 1d       	adc	r27, r1
    1912:	fd 01       	movw	r30, r26
    1914:	e8 56       	subi	r30, 0x68	; 104
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1918:	20 81       	ld	r18, Z
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	32 2f       	mov	r19, r18
    191e:	22 27       	eor	r18, r18
			outputS(menuScreen->screen2[2], 2);
			outputS(menuScreen->screen2[3], 3);
			break;
		
			case TrackMenuArrow1Select:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1920:	70 96       	adiw	r30, 0x10	; 16
			numPrinter(menuScreen->screen2[1],10,4,(trackSample));
    1922:	80 81       	ld	r24, Z
    1924:	28 2b       	or	r18, r24
    1926:	44 e0       	ldi	r20, 0x04	; 4
    1928:	6a e0       	ldi	r22, 0x0A	; 10
    192a:	68 01       	movw	r12, r16
    192c:	b1 e7       	ldi	r27, 0x71	; 113
    192e:	cb 1a       	sub	r12, r27
    1930:	be ef       	ldi	r27, 0xFE	; 254
    1932:	db 0a       	sbc	r13, r27
    1934:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen2[1],1);
    1936:	03 d6       	rcall	.+3078   	; 0x253e <numPrinter>
    1938:	61 e0       	ldi	r22, 0x01	; 1
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	c6 01       	movw	r24, r12
			break;
    193e:	e7 d5       	rcall	.+3022   	; 0x250e <outputS>
	
			case TrackMenuArrow2:
			menuScreen->screen2[1][19]= ' ';
    1940:	c3 c1       	rjmp	.+902    	; 0x1cc8 <updateScreen+0x5d2>
    1942:	80 e2       	ldi	r24, 0x20	; 32
    1944:	f8 01       	movw	r30, r16
    1946:	ee 55       	subi	r30, 0x5E	; 94
    1948:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = 8;
    194a:	80 83       	st	Z, r24
    194c:	98 e0       	ldi	r25, 0x08	; 8
    194e:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = ' ';
    1950:	90 83       	st	Z, r25
    1952:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[1], 1);
    1954:	80 83       	st	Z, r24
    1956:	61 e0       	ldi	r22, 0x01	; 1
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	c8 01       	movw	r24, r16
    195c:	81 57       	subi	r24, 0x71	; 113
    195e:	9e 4f       	sbci	r25, 0xFE	; 254
    1960:	d6 d5       	rcall	.+2988   	; 0x250e <outputS>
			outputS(menuScreen->screen2[2], 2);
    1962:	62 e0       	ldi	r22, 0x02	; 2
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	c8 01       	movw	r24, r16
    1968:	8c 55       	subi	r24, 0x5C	; 92
    196a:	9e 4f       	sbci	r25, 0xFE	; 254
    196c:	d0 d5       	rcall	.+2976   	; 0x250e <outputS>
    196e:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[3], 3);
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	c8 01       	movw	r24, r16
    1974:	87 54       	subi	r24, 0x47	; 71
    1976:	9e 4f       	sbci	r25, 0xFE	; 254
    1978:	ca d5       	rcall	.+2964   	; 0x250e <outputS>
    197a:	a6 c1       	rjmp	.+844    	; 0x1cc8 <updateScreen+0x5d2>
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    197e:	fb 01       	movw	r30, r22
		
			case TrackMenuArrow2Select:
			//we need some serious button code in these two cases. 
			switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1980:	e8 0f       	add	r30, r24
    1982:	f1 1d       	adc	r31, r1
    1984:	e8 57       	subi	r30, 0x78	; 120
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 81       	ld	r24, Z
    198a:	88 23       	and	r24, r24
    198c:	19 f0       	breq	.+6      	; 0x1994 <updateScreen+0x29e>
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	79 f0       	breq	.+30     	; 0x19b0 <updateScreen+0x2ba>
    1992:	1c c0       	rjmp	.+56     	; 0x19cc <updateScreen+0x2d6>
    1994:	83 e5       	ldi	r24, 0x53	; 83
			{
				case 0:
				menuScreen->screen2[2][10] = 'S';
    1996:	f8 01       	movw	r30, r16
    1998:	e2 55       	subi	r30, 0x52	; 82
    199a:	fe 4f       	sbci	r31, 0xFE	; 254
    199c:	80 83       	st	Z, r24
    199e:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[2][11] = 'o';
    19a0:	31 96       	adiw	r30, 0x01	; 1
    19a2:	80 83       	st	Z, r24
    19a4:	9c e6       	ldi	r25, 0x6C	; 108
				menuScreen->screen2[2][12] = 'l';
    19a6:	31 96       	adiw	r30, 0x01	; 1
    19a8:	90 83       	st	Z, r25
    19aa:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'o';
    19ac:	80 83       	st	Z, r24
    19ae:	0e c0       	rjmp	.+28     	; 0x19cc <updateScreen+0x2d6>
				break;
    19b0:	80 e5       	ldi	r24, 0x50	; 80

				case 1:
				menuScreen->screen2[2][10] = 'P';
    19b2:	f8 01       	movw	r30, r16
    19b4:	e2 55       	subi	r30, 0x52	; 82
    19b6:	fe 4f       	sbci	r31, 0xFE	; 254
    19b8:	80 83       	st	Z, r24
				menuScreen->screen2[2][11] = 'o';
    19ba:	8f e6       	ldi	r24, 0x6F	; 111
    19bc:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][12] = 'l';
    19be:	80 83       	st	Z, r24
    19c0:	8c e6       	ldi	r24, 0x6C	; 108
    19c2:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[2][13] = 'y';
    19c4:	80 83       	st	Z, r24
    19c6:	89 e7       	ldi	r24, 0x79	; 121
	
				case 3:
				break;
			}
			
			outputS(menuScreen->screen2[2], 2);
    19c8:	31 96       	adiw	r30, 0x01	; 1
    19ca:	80 83       	st	Z, r24
    19cc:	62 e0       	ldi	r22, 0x02	; 2
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	c8 01       	movw	r24, r16
    19d2:	8c 55       	subi	r24, 0x5C	; 92
    19d4:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    19d6:	9b d5       	rcall	.+2870   	; 0x250e <outputS>

			case TrackMenuArrow3:
			menuScreen->screen2[1][19]= ' ';
    19d8:	77 c1       	rjmp	.+750    	; 0x1cc8 <updateScreen+0x5d2>
    19da:	80 e2       	ldi	r24, 0x20	; 32
    19dc:	f8 01       	movw	r30, r16
    19de:	ee 55       	subi	r30, 0x5E	; 94
    19e0:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[2][19] = ' ';
    19e2:	80 83       	st	Z, r24
    19e4:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[3][19] = 8;
    19e6:	80 83       	st	Z, r24
    19e8:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[1], 1);
    19ea:	75 96       	adiw	r30, 0x15	; 21
    19ec:	80 83       	st	Z, r24
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	c8 01       	movw	r24, r16
    19f4:	81 57       	subi	r24, 0x71	; 113
			outputS(menuScreen->screen2[2], 2);
    19f6:	9e 4f       	sbci	r25, 0xFE	; 254
    19f8:	8a d5       	rcall	.+2836   	; 0x250e <outputS>
    19fa:	62 e0       	ldi	r22, 0x02	; 2
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	c8 01       	movw	r24, r16
    1a00:	8c 55       	subi	r24, 0x5C	; 92
    1a02:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[3], 3);
    1a04:	84 d5       	rcall	.+2824   	; 0x250e <outputS>
    1a06:	63 e0       	ldi	r22, 0x03	; 3
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	c8 01       	movw	r24, r16
    1a0c:	87 54       	subi	r24, 0x47	; 71
    1a0e:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1a10:	7e d5       	rcall	.+2812   	; 0x250e <outputS>
		
			case TrackMenuArrow3Select:
			numPrinter(menuScreen->screen2[3],10,2,(currentPattern->trackOutputRoute[currentGlobals->currentTrack])+1);
    1a12:	5a c1       	rjmp	.+692    	; 0x1cc8 <updateScreen+0x5d2>
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	fb 01       	movw	r30, r22
    1a18:	e8 0f       	add	r30, r24
    1a1a:	f1 1d       	adc	r31, r1
    1a1c:	20 8d       	ldd	r18, Z+24	; 0x18
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	2f 5f       	subi	r18, 0xFF	; 255
    1a22:	3f 4f       	sbci	r19, 0xFF	; 255
    1a24:	42 e0       	ldi	r20, 0x02	; 2
    1a26:	6a e0       	ldi	r22, 0x0A	; 10
    1a28:	68 01       	movw	r12, r16
    1a2a:	e7 e4       	ldi	r30, 0x47	; 71
    1a2c:	ce 1a       	sub	r12, r30
    1a2e:	ee ef       	ldi	r30, 0xFE	; 254
    1a30:	de 0a       	sbc	r13, r30
			outputS(menuScreen->screen2[3],3);
    1a32:	c6 01       	movw	r24, r12
    1a34:	84 d5       	rcall	.+2824   	; 0x253e <numPrinter>
    1a36:	63 e0       	ldi	r22, 0x03	; 3
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	c6 01       	movw	r24, r12
			break;
    1a3c:	68 d5       	rcall	.+2768   	; 0x250e <outputS>
			
			case TrackMenuArrow4:
			menuScreen->screen2[2][19]= ' ';
    1a3e:	44 c1       	rjmp	.+648    	; 0x1cc8 <updateScreen+0x5d2>
    1a40:	80 e2       	ldi	r24, 0x20	; 32
    1a42:	f8 01       	movw	r30, r16
    1a44:	e9 54       	subi	r30, 0x49	; 73
    1a46:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[3][19] = ' ';
    1a48:	80 83       	st	Z, r24
    1a4a:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen2[4][19] = 8;
    1a4c:	80 83       	st	Z, r24
    1a4e:	88 e0       	ldi	r24, 0x08	; 8
    1a50:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen2[2], 1);
    1a52:	80 83       	st	Z, r24
    1a54:	61 e0       	ldi	r22, 0x01	; 1
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	c8 01       	movw	r24, r16
    1a5a:	8c 55       	subi	r24, 0x5C	; 92
    1a5c:	9e 4f       	sbci	r25, 0xFE	; 254
    1a5e:	57 d5       	rcall	.+2734   	; 0x250e <outputS>
			outputS(menuScreen->screen2[3], 2);
    1a60:	62 e0       	ldi	r22, 0x02	; 2
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	c8 01       	movw	r24, r16
    1a66:	87 54       	subi	r24, 0x47	; 71
    1a68:	9e 4f       	sbci	r25, 0xFE	; 254
    1a6a:	51 d5       	rcall	.+2722   	; 0x250e <outputS>
    1a6c:	63 e0       	ldi	r22, 0x03	; 3
			outputS(menuScreen->screen2[4], 3);
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	c8 01       	movw	r24, r16
    1a72:	82 53       	subi	r24, 0x32	; 50
    1a74:	9e 4f       	sbci	r25, 0xFE	; 254
    1a76:	4b d5       	rcall	.+2710   	; 0x250e <outputS>
    1a78:	27 c1       	rjmp	.+590    	; 0x1cc8 <updateScreen+0x5d2>
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
			break;
    1a7c:	fb 01       	movw	r30, r22
			
			case TrackMenuArrow4Select:
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1a7e:	e8 0f       	add	r30, r24
    1a80:	f1 1d       	adc	r31, r1
    1a82:	e5 51       	subi	r30, 0x15	; 21
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	81 30       	cpi	r24, 0x01	; 1
    1a8a:	a9 f0       	breq	.+42     	; 0x1ab6 <updateScreen+0x3c0>
    1a8c:	28 f0       	brcs	.+10     	; 0x1a98 <updateScreen+0x3a2>
    1a8e:	82 30       	cpi	r24, 0x02	; 2
    1a90:	f9 f0       	breq	.+62     	; 0x1ad0 <updateScreen+0x3da>
    1a92:	83 30       	cpi	r24, 0x03	; 3
    1a94:	51 f1       	breq	.+84     	; 0x1aea <updateScreen+0x3f4>
    1a96:	37 c0       	rjmp	.+110    	; 0x1b06 <updateScreen+0x410>
    1a98:	81 e4       	ldi	r24, 0x41	; 65
    1a9a:	f8 01       	movw	r30, r16
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1a9c:	e4 52       	subi	r30, 0x24	; 36
    1a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa0:	80 83       	st	Z, r24
    1aa2:	8d e2       	ldi	r24, 0x2D	; 45
    1aa4:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1aa6:	80 83       	st	Z, r24
    1aa8:	82 e5       	ldi	r24, 0x52	; 82
    1aaa:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1aac:	80 83       	st	Z, r24
    1aae:	80 e2       	ldi	r24, 0x20	; 32
    1ab0:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1ab2:	80 83       	st	Z, r24
    1ab4:	28 c0       	rjmp	.+80     	; 0x1b06 <updateScreen+0x410>
    1ab6:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1ab8:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1aba:	e4 52       	subi	r30, 0x24	; 36
    1abc:	fe 4f       	sbci	r31, 0xFE	; 254
    1abe:	80 83       	st	Z, r24
    1ac0:	80 e2       	ldi	r24, 0x20	; 32
				menuScreen->screen2[4][15] = ' ';
    1ac2:	31 96       	adiw	r30, 0x01	; 1
    1ac4:	80 83       	st	Z, r24
    1ac6:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = ' ';
    1ac8:	80 83       	st	Z, r24
    1aca:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1acc:	80 83       	st	Z, r24
    1ace:	1b c0       	rjmp	.+54     	; 0x1b06 <updateScreen+0x410>
				break;
    1ad0:	81 e4       	ldi	r24, 0x41	; 65
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	e4 52       	subi	r30, 0x24	; 36
    1ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad8:	80 83       	st	Z, r24
				menuScreen->screen2[4][15] = ' ';
    1ada:	80 e2       	ldi	r24, 0x20	; 32
    1adc:	31 96       	adiw	r30, 0x01	; 1
    1ade:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1ae0:	31 96       	adiw	r30, 0x01	; 1
    1ae2:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1ae4:	31 96       	adiw	r30, 0x01	; 1
				break;
    1ae6:	80 83       	st	Z, r24
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1ae8:	0e c0       	rjmp	.+28     	; 0x1b06 <updateScreen+0x410>
    1aea:	8e e4       	ldi	r24, 0x4E	; 78
    1aec:	f8 01       	movw	r30, r16
    1aee:	e4 52       	subi	r30, 0x24	; 36
				menuScreen->screen2[4][15] = 'o';
    1af0:	fe 4f       	sbci	r31, 0xFE	; 254
    1af2:	80 83       	st	Z, r24
    1af4:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][16] = 'n';
    1af6:	31 96       	adiw	r30, 0x01	; 1
    1af8:	80 83       	st	Z, r24
    1afa:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][17] = 'e';
    1afc:	31 96       	adiw	r30, 0x01	; 1
    1afe:	80 83       	st	Z, r24
    1b00:	85 e6       	ldi	r24, 0x65	; 101
				break;
			}
			outputS(menuScreen->screen2[4],3);
    1b02:	31 96       	adiw	r30, 0x01	; 1
    1b04:	80 83       	st	Z, r24
    1b06:	63 e0       	ldi	r22, 0x03	; 3
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	c8 01       	movw	r24, r16
    1b0c:	82 53       	subi	r24, 0x32	; 50
    1b0e:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1b10:	fe d4       	rcall	.+2556   	; 0x250e <outputS>
			
			case TrackMenuArrow5:
			menuScreen->screen2[3][19]= ' ';
    1b12:	da c0       	rjmp	.+436    	; 0x1cc8 <updateScreen+0x5d2>
    1b14:	80 e2       	ldi	r24, 0x20	; 32
    1b16:	f8 01       	movw	r30, r16
    1b18:	e4 53       	subi	r30, 0x34	; 52
    1b1a:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[4][19] = ' ';
    1b1c:	80 83       	st	Z, r24
			menuScreen->screen2[5][19] = 8;
    1b1e:	75 96       	adiw	r30, 0x15	; 21
    1b20:	80 83       	st	Z, r24
    1b22:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen2[3], 1);
    1b24:	75 96       	adiw	r30, 0x15	; 21
    1b26:	80 83       	st	Z, r24
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	87 54       	subi	r24, 0x47	; 71
    1b30:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[4], 2);
    1b32:	ed d4       	rcall	.+2522   	; 0x250e <outputS>
    1b34:	62 e0       	ldi	r22, 0x02	; 2
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	c8 01       	movw	r24, r16
    1b3a:	82 53       	subi	r24, 0x32	; 50
    1b3c:	9e 4f       	sbci	r25, 0xFE	; 254
			outputS(menuScreen->screen2[5], 3);
    1b3e:	e7 d4       	rcall	.+2510   	; 0x250e <outputS>
    1b40:	63 e0       	ldi	r22, 0x03	; 3
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	c8 01       	movw	r24, r16
    1b46:	8d 51       	subi	r24, 0x1D	; 29
    1b48:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
    1b4a:	e1 d4       	rcall	.+2498   	; 0x250e <outputS>

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1b4c:	bd c0       	rjmp	.+378    	; 0x1cc8 <updateScreen+0x5d2>
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9b 01       	movw	r18, r22
    1b52:	28 0f       	add	r18, r24
    1b54:	31 1d       	adc	r19, r1
    1b56:	f9 01       	movw	r30, r18
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1b58:	e5 53       	subi	r30, 0x35	; 53
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	20 81       	ld	r18, Z
			outputS(menuScreen->screen2[4], 2);
			outputS(menuScreen->screen2[5], 3);
			break;

			case TrackMenuArrow5Select:;
			uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
			numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1b60:	32 2f       	mov	r19, r18
    1b62:	22 27       	eor	r18, r18
    1b64:	70 96       	adiw	r30, 0x10	; 16
    1b66:	80 81       	ld	r24, Z
    1b68:	28 2b       	or	r18, r24
    1b6a:	45 e0       	ldi	r20, 0x05	; 5
    1b6c:	6d e0       	ldi	r22, 0x0D	; 13
    1b6e:	68 01       	movw	r12, r16
    1b70:	8d e1       	ldi	r24, 0x1D	; 29
    1b72:	c8 1a       	sub	r12, r24
    1b74:	8e ef       	ldi	r24, 0xFE	; 254
			menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    1b76:	d8 0a       	sbc	r13, r24
    1b78:	c6 01       	movw	r24, r12
    1b7a:	e1 d4       	rcall	.+2498   	; 0x253e <numPrinter>
    1b7c:	d8 01       	movw	r26, r16
    1b7e:	a0 51       	subi	r26, 0x10	; 16
    1b80:	be 4f       	sbci	r27, 0xFE	; 254
    1b82:	8c 91       	ld	r24, X
    1b84:	f8 01       	movw	r30, r16
			menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    1b86:	e1 51       	subi	r30, 0x11	; 17
    1b88:	fe 4f       	sbci	r31, 0xFE	; 254
			menuScreen->screen2[5][14] = '.';
    1b8a:	80 83       	st	Z, r24
    1b8c:	32 96       	adiw	r30, 0x02	; 2
			outputS(menuScreen->screen2[5],3);
    1b8e:	80 81       	ld	r24, Z
    1b90:	8c 93       	st	X, r24
    1b92:	8e e2       	ldi	r24, 0x2E	; 46
    1b94:	80 83       	st	Z, r24
			break;
    1b96:	63 e0       	ldi	r22, 0x03	; 3

			case GlobalMenuInit:
			outputS(menuScreen->screen3[0], 0);
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	c6 01       	movw	r24, r12
    1b9c:	b8 d4       	rcall	.+2416   	; 0x250e <outputS>
    1b9e:	94 c0       	rjmp	.+296    	; 0x1cc8 <updateScreen+0x5d2>
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[1], 1);
    1ba4:	c8 01       	movw	r24, r16
    1ba6:	89 5c       	subi	r24, 0xC9	; 201
    1ba8:	9d 4f       	sbci	r25, 0xFD	; 253
    1baa:	b1 d4       	rcall	.+2402   	; 0x250e <outputS>
    1bac:	61 e0       	ldi	r22, 0x01	; 1
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1bb2:	84 5b       	subi	r24, 0xB4	; 180
    1bb4:	9d 4f       	sbci	r25, 0xFD	; 253
    1bb6:	ab d4       	rcall	.+2390   	; 0x250e <outputS>
    1bb8:	62 e0       	ldi	r22, 0x02	; 2
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1bbe:	8f 59       	subi	r24, 0x9F	; 159
    1bc0:	9d 4f       	sbci	r25, 0xFD	; 253
    1bc2:	a5 d4       	rcall	.+2378   	; 0x250e <outputS>
    1bc4:	63 e0       	ldi	r22, 0x03	; 3
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	c8 01       	movw	r24, r16
    1bca:	8a 58       	subi	r24, 0x8A	; 138
			currentGlobals->menuState = GlobalMenuArrow1;
    1bcc:	9d 4f       	sbci	r25, 0xFD	; 253
    1bce:	9f d4       	rcall	.+2366   	; 0x250e <outputS>

			case GlobalMenuArrow1:
			menuScreen->screen3[1][19]= 8;
    1bd0:	81 e3       	ldi	r24, 0x31	; 49
    1bd2:	8e 83       	std	Y+6, r24	; 0x06
    1bd4:	88 e0       	ldi	r24, 0x08	; 8
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	e1 5a       	subi	r30, 0xA1	; 161
			menuScreen->screen3[2][19] = ' ';
    1bda:	fd 4f       	sbci	r31, 0xFD	; 253
    1bdc:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1bde:	80 e2       	ldi	r24, 0x20	; 32
    1be0:	75 96       	adiw	r30, 0x15	; 21
			outputS(menuScreen->screen3[1], 1);
    1be2:	80 83       	st	Z, r24
    1be4:	75 96       	adiw	r30, 0x15	; 21
    1be6:	80 83       	st	Z, r24
    1be8:	61 e0       	ldi	r22, 0x01	; 1
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[2], 2);
    1bee:	84 5b       	subi	r24, 0xB4	; 180
    1bf0:	9d 4f       	sbci	r25, 0xFD	; 253
    1bf2:	8d d4       	rcall	.+2330   	; 0x250e <outputS>
    1bf4:	62 e0       	ldi	r22, 0x02	; 2
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1bfa:	8f 59       	subi	r24, 0x9F	; 159
    1bfc:	9d 4f       	sbci	r25, 0xFD	; 253
    1bfe:	87 d4       	rcall	.+2318   	; 0x250e <outputS>
    1c00:	63 e0       	ldi	r22, 0x03	; 3
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	c8 01       	movw	r24, r16
    1c06:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1c08:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow1Select:
			numPrinter(menuScreen->screen3[1],14,2,(currentGlobals->midiChannel)+1);
    1c0a:	81 d4       	rcall	.+2306   	; 0x250e <outputS>
    1c0c:	5d c0       	rjmp	.+186    	; 0x1cc8 <updateScreen+0x5d2>
    1c0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	2f 5f       	subi	r18, 0xFF	; 255
    1c14:	3f 4f       	sbci	r19, 0xFF	; 255
    1c16:	42 e0       	ldi	r20, 0x02	; 2
    1c18:	6e e0       	ldi	r22, 0x0E	; 14
    1c1a:	68 01       	movw	r12, r16
    1c1c:	94 eb       	ldi	r25, 0xB4	; 180
    1c1e:	c9 1a       	sub	r12, r25
    1c20:	9d ef       	ldi	r25, 0xFD	; 253
			outputS(menuScreen->screen3[1],1);
    1c22:	d9 0a       	sbc	r13, r25
    1c24:	c6 01       	movw	r24, r12
    1c26:	8b d4       	rcall	.+2326   	; 0x253e <numPrinter>
    1c28:	61 e0       	ldi	r22, 0x01	; 1
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
			break;
    1c2c:	c6 01       	movw	r24, r12

			case GlobalMenuArrow2:
			menuScreen->screen3[1][19]= ' ';
    1c2e:	6f d4       	rcall	.+2270   	; 0x250e <outputS>
    1c30:	4b c0       	rjmp	.+150    	; 0x1cc8 <updateScreen+0x5d2>
    1c32:	80 e2       	ldi	r24, 0x20	; 32
    1c34:	f8 01       	movw	r30, r16
			menuScreen->screen3[2][19] = 8;
    1c36:	e1 5a       	subi	r30, 0xA1	; 161
    1c38:	fd 4f       	sbci	r31, 0xFD	; 253
    1c3a:	80 83       	st	Z, r24
			menuScreen->screen3[3][19] = ' ';
    1c3c:	98 e0       	ldi	r25, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1c3e:	75 96       	adiw	r30, 0x15	; 21
    1c40:	90 83       	st	Z, r25
    1c42:	75 96       	adiw	r30, 0x15	; 21
    1c44:	80 83       	st	Z, r24
    1c46:	61 e0       	ldi	r22, 0x01	; 1
    1c48:	70 e0       	ldi	r23, 0x00	; 0
			outputS(menuScreen->screen3[2], 2);
    1c4a:	c8 01       	movw	r24, r16
    1c4c:	84 5b       	subi	r24, 0xB4	; 180
    1c4e:	9d 4f       	sbci	r25, 0xFD	; 253
    1c50:	5e d4       	rcall	.+2236   	; 0x250e <outputS>
    1c52:	62 e0       	ldi	r22, 0x02	; 2
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	c8 01       	movw	r24, r16
			outputS(menuScreen->screen3[3], 3);
    1c58:	8f 59       	subi	r24, 0x9F	; 159
    1c5a:	9d 4f       	sbci	r25, 0xFD	; 253
    1c5c:	58 d4       	rcall	.+2224   	; 0x250e <outputS>
    1c5e:	63 e0       	ldi	r22, 0x03	; 3
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	c8 01       	movw	r24, r16
    1c64:	8a 58       	subi	r24, 0x8A	; 138
			break;
    1c66:	9d 4f       	sbci	r25, 0xFD	; 253
			
			case GlobalMenuArrow2Select:
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1c68:	52 d4       	rcall	.+2212   	; 0x250e <outputS>
    1c6a:	2e c0       	rjmp	.+92     	; 0x1cc8 <updateScreen+0x5d2>
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	fa 01       	movw	r30, r20
    1c70:	e8 0f       	add	r30, r24
    1c72:	f1 1d       	adc	r31, r1
    1c74:	45 85       	ldd	r20, Z+13	; 0x0d
    1c76:	6e e0       	ldi	r22, 0x0E	; 14
    1c78:	68 01       	movw	r12, r16
    1c7a:	af e9       	ldi	r26, 0x9F	; 159
    1c7c:	ca 1a       	sub	r12, r26
    1c7e:	ad ef       	ldi	r26, 0xFD	; 253
    1c80:	da 0a       	sbc	r13, r26
    1c82:	c6 01       	movw	r24, r12
			outputS(menuScreen->screen3[2],2);
    1c84:	22 d6       	rcall	.+3140   	; 0x28ca <midiNotePrinter>
    1c86:	62 e0       	ldi	r22, 0x02	; 2
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	c6 01       	movw	r24, r12
    1c8c:	40 d4       	rcall	.+2176   	; 0x250e <outputS>
			break;
    1c8e:	1c c0       	rjmp	.+56     	; 0x1cc8 <updateScreen+0x5d2>

			case GlobalMenuArrow3:
			menuScreen->screen3[1][19]= ' ';
    1c90:	80 e2       	ldi	r24, 0x20	; 32
    1c92:	f8 01       	movw	r30, r16
    1c94:	e1 5a       	subi	r30, 0xA1	; 161
    1c96:	fd 4f       	sbci	r31, 0xFD	; 253
			menuScreen->screen3[2][19] = ' ';
    1c98:	80 83       	st	Z, r24
    1c9a:	75 96       	adiw	r30, 0x15	; 21
			menuScreen->screen3[3][19] = 8;
    1c9c:	80 83       	st	Z, r24
    1c9e:	88 e0       	ldi	r24, 0x08	; 8
			outputS(menuScreen->screen3[1], 1);
    1ca0:	75 96       	adiw	r30, 0x15	; 21
    1ca2:	80 83       	st	Z, r24
    1ca4:	61 e0       	ldi	r22, 0x01	; 1
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	c8 01       	movw	r24, r16
    1caa:	84 5b       	subi	r24, 0xB4	; 180
    1cac:	9d 4f       	sbci	r25, 0xFD	; 253
			outputS(menuScreen->screen3[2], 2);
    1cae:	2f d4       	rcall	.+2142   	; 0x250e <outputS>
    1cb0:	62 e0       	ldi	r22, 0x02	; 2
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	8f 59       	subi	r24, 0x9F	; 159
    1cb8:	9d 4f       	sbci	r25, 0xFD	; 253
    1cba:	29 d4       	rcall	.+2130   	; 0x250e <outputS>
			outputS(menuScreen->screen3[3], 3);
    1cbc:	63 e0       	ldi	r22, 0x03	; 3
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	8a 58       	subi	r24, 0x8A	; 138
    1cc4:	9d 4f       	sbci	r25, 0xFD	; 253
    1cc6:	23 d4       	rcall	.+2118   	; 0x250e <outputS>
    1cc8:	8e 81       	ldd	r24, Y+6	; 0x06
			break;
		}
		prevMenuState = currentGlobals->menuState;
    1cca:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <prevMenuState>
    1cce:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
	//We should only reach this in track selection and global settings for setting midi notes. 
	if(currentGlobals->valueChangeFlag&(1<<triggerChange))
    1cd0:	81 ff       	sbrs	r24, 1
    1cd2:	19 c1       	rjmp	.+562    	; 0x1f06 <updateScreen+0x810>
    1cd4:	1a 86       	std	Y+10, r1	; 0x0a
	{
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0<<triggerChange); //this is wrong. Will erase all of valueChange Flag. 
    1cd6:	8e 81       	ldd	r24, Y+6	; 0x06
		switch((currentGlobals->menuState)>>4) //we don't need to worry about what the bottom encoder is doing.  
    1cd8:	82 95       	swap	r24
    1cda:	8f 70       	andi	r24, 0x0F	; 15
    1cdc:	82 30       	cpi	r24, 0x02	; 2
    1cde:	21 f0       	breq	.+8      	; 0x1ce8 <updateScreen+0x5f2>
    1ce0:	83 30       	cpi	r24, 0x03	; 3
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <updateScreen+0x5f0>
    1ce4:	f7 c0       	rjmp	.+494    	; 0x1ed4 <updateScreen+0x7de>
    1ce6:	0f c1       	rjmp	.+542    	; 0x1f06 <updateScreen+0x810>
    1ce8:	2d 81       	ldd	r18, Y+5	; 0x05
		{
			case 2:;
			uint16_t trackSample = (currentPattern->trackSampleMSB[currentGlobals->currentTrack]<<8)|(currentPattern->trackSampleLSB[currentGlobals->currentTrack]);
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	c7 01       	movw	r24, r14
    1cee:	82 0f       	add	r24, r18
    1cf0:	93 1f       	adc	r25, r19
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	e8 56       	subi	r30, 0x68	; 104
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	c0 80       	ld	r12, Z
    1cfa:	d1 2c       	mov	r13, r1
    1cfc:	dc 2c       	mov	r13, r12
    1cfe:	cc 24       	eor	r12, r12
    1d00:	70 96       	adiw	r30, 0x10	; 16
    1d02:	80 81       	ld	r24, Z
    1d04:	c8 2a       	or	r12, r24
    1d06:	2f 5f       	subi	r18, 0xFF	; 255
			numPrinter(menuScreen->screen2[1], 7, 2, (currentGlobals->currentTrack)+1);
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	42 e0       	ldi	r20, 0x02	; 2
    1d0c:	67 e0       	ldi	r22, 0x07	; 7
    1d0e:	58 01       	movw	r10, r16
    1d10:	b1 e7       	ldi	r27, 0x71	; 113
    1d12:	ab 1a       	sub	r10, r27
    1d14:	be ef       	ldi	r27, 0xFE	; 254
    1d16:	bb 0a       	sbc	r11, r27
    1d18:	c5 01       	movw	r24, r10
    1d1a:	11 d4       	rcall	.+2082   	; 0x253e <numPrinter>
    1d1c:	96 01       	movw	r18, r12
			numPrinter(menuScreen->screen2[1], 10, 4, trackSample);
    1d1e:	44 e0       	ldi	r20, 0x04	; 4
    1d20:	6a e0       	ldi	r22, 0x0A	; 10
    1d22:	c5 01       	movw	r24, r10
    1d24:	0c d4       	rcall	.+2072   	; 0x253e <numPrinter>
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	f7 01       	movw	r30, r14
			//this feels dumb having it in two places, but It should take care of both cases. Maybe this should be a function?
					switch (currentPattern->trackPlayMode[currentGlobals->currentTrack])
    1d2a:	e8 0f       	add	r30, r24
    1d2c:	f1 1d       	adc	r31, r1
    1d2e:	e8 57       	subi	r30, 0x78	; 120
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	88 23       	and	r24, r24
    1d36:	19 f0       	breq	.+6      	; 0x1d3e <updateScreen+0x648>
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	79 f0       	breq	.+30     	; 0x1d5a <updateScreen+0x664>
    1d3c:	1c c0       	rjmp	.+56     	; 0x1d76 <updateScreen+0x680>
    1d3e:	83 e5       	ldi	r24, 0x53	; 83
    1d40:	f8 01       	movw	r30, r16
					{
						case 0:
						menuScreen->screen2[2][10] = 'S';
    1d42:	e2 55       	subi	r30, 0x52	; 82
    1d44:	fe 4f       	sbci	r31, 0xFE	; 254
    1d46:	80 83       	st	Z, r24
    1d48:	8f e6       	ldi	r24, 0x6F	; 111
    1d4a:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1d4c:	80 83       	st	Z, r24
    1d4e:	9c e6       	ldi	r25, 0x6C	; 108
    1d50:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1d52:	90 83       	st	Z, r25
    1d54:	31 96       	adiw	r30, 0x01	; 1
    1d56:	80 83       	st	Z, r24
						menuScreen->screen2[2][13] = 'o';
    1d58:	0e c0       	rjmp	.+28     	; 0x1d76 <updateScreen+0x680>
    1d5a:	80 e5       	ldi	r24, 0x50	; 80
						break;
    1d5c:	f8 01       	movw	r30, r16

						case 1:
						menuScreen->screen2[2][10] = 'P';
    1d5e:	e2 55       	subi	r30, 0x52	; 82
    1d60:	fe 4f       	sbci	r31, 0xFE	; 254
    1d62:	80 83       	st	Z, r24
    1d64:	8f e6       	ldi	r24, 0x6F	; 111
    1d66:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][11] = 'o';
    1d68:	80 83       	st	Z, r24
    1d6a:	8c e6       	ldi	r24, 0x6C	; 108
    1d6c:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][12] = 'l';
    1d6e:	80 83       	st	Z, r24
    1d70:	89 e7       	ldi	r24, 0x79	; 121
    1d72:	31 96       	adiw	r30, 0x01	; 1
						menuScreen->screen2[2][13] = 'y';
    1d74:	80 83       	st	Z, r24
    1d76:	8d 81       	ldd	r24, Y+5	; 0x05
    1d78:	f7 01       	movw	r30, r14

						case 3:
						break;
					}
					
			numPrinter(menuScreen->screen2[3], 10, 2, (currentPattern->trackOutputRoute[currentGlobals->currentTrack]+1));
    1d7a:	e8 0f       	add	r30, r24
    1d7c:	f1 1d       	adc	r31, r1
    1d7e:	20 8d       	ldd	r18, Z+24	; 0x18
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	2f 5f       	subi	r18, 0xFF	; 255
    1d84:	3f 4f       	sbci	r19, 0xFF	; 255
    1d86:	42 e0       	ldi	r20, 0x02	; 2
    1d88:	6a e0       	ldi	r22, 0x0A	; 10
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	87 54       	subi	r24, 0x47	; 71
    1d8e:	9e 4f       	sbci	r25, 0xFE	; 254
    1d90:	d6 d3       	rcall	.+1964   	; 0x253e <numPrinter>
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	f7 01       	movw	r30, r14
    1d96:	e8 0f       	add	r30, r24
			switch(currentPattern->envelopeType[currentGlobals->currentTrack])
    1d98:	f1 1d       	adc	r31, r1
    1d9a:	e5 51       	subi	r30, 0x15	; 21
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	80 81       	ld	r24, Z
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	a9 f0       	breq	.+42     	; 0x1dce <updateScreen+0x6d8>
    1da4:	28 f0       	brcs	.+10     	; 0x1db0 <updateScreen+0x6ba>
    1da6:	82 30       	cpi	r24, 0x02	; 2
    1da8:	f9 f0       	breq	.+62     	; 0x1de8 <updateScreen+0x6f2>
    1daa:	83 30       	cpi	r24, 0x03	; 3
    1dac:	51 f1       	breq	.+84     	; 0x1e02 <updateScreen+0x70c>
    1dae:	37 c0       	rjmp	.+110    	; 0x1e1e <updateScreen+0x728>
    1db0:	81 e4       	ldi	r24, 0x41	; 65
    1db2:	f8 01       	movw	r30, r16
    1db4:	e4 52       	subi	r30, 0x24	; 36
			{
				case 0: //A/R
				menuScreen->screen2[4][14] = 'A';
    1db6:	fe 4f       	sbci	r31, 0xFE	; 254
    1db8:	80 83       	st	Z, r24
    1dba:	8d e2       	ldi	r24, 0x2D	; 45
    1dbc:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = '-';
    1dbe:	80 83       	st	Z, r24
    1dc0:	82 e5       	ldi	r24, 0x52	; 82
    1dc2:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][16] = 'R';
    1dc4:	80 83       	st	Z, r24
    1dc6:	80 e2       	ldi	r24, 0x20	; 32
    1dc8:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][17] = ' ';
    1dca:	80 83       	st	Z, r24
    1dcc:	28 c0       	rjmp	.+80     	; 0x1e1e <updateScreen+0x728>
    1dce:	82 e5       	ldi	r24, 0x52	; 82
				break;
    1dd0:	f8 01       	movw	r30, r16
				
				case 1: //only release
				menuScreen->screen2[4][14] = 'R';
    1dd2:	e4 52       	subi	r30, 0x24	; 36
    1dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd6:	80 83       	st	Z, r24
    1dd8:	80 e2       	ldi	r24, 0x20	; 32
    1dda:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1ddc:	80 83       	st	Z, r24
    1dde:	31 96       	adiw	r30, 0x01	; 1
    1de0:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1de2:	31 96       	adiw	r30, 0x01	; 1
    1de4:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1de6:	1b c0       	rjmp	.+54     	; 0x1e1e <updateScreen+0x728>
    1de8:	81 e4       	ldi	r24, 0x41	; 65
				break;
    1dea:	f8 01       	movw	r30, r16
				
				case 2: //only attack
				menuScreen->screen2[4][14] = 'A';
    1dec:	e4 52       	subi	r30, 0x24	; 36
    1dee:	fe 4f       	sbci	r31, 0xFE	; 254
    1df0:	80 83       	st	Z, r24
    1df2:	80 e2       	ldi	r24, 0x20	; 32
    1df4:	31 96       	adiw	r30, 0x01	; 1
				menuScreen->screen2[4][15] = ' ';
    1df6:	80 83       	st	Z, r24
    1df8:	31 96       	adiw	r30, 0x01	; 1
    1dfa:	80 83       	st	Z, r24
				menuScreen->screen2[4][16] = ' ';
    1dfc:	31 96       	adiw	r30, 0x01	; 1
    1dfe:	80 83       	st	Z, r24
				menuScreen->screen2[4][17] = ' ';
    1e00:	0e c0       	rjmp	.+28     	; 0x1e1e <updateScreen+0x728>
    1e02:	8e e4       	ldi	r24, 0x4E	; 78
				break;
    1e04:	f8 01       	movw	r30, r16
				
				case 3: //No envelope
				menuScreen->screen2[4][14] = 'N';
    1e06:	e4 52       	subi	r30, 0x24	; 36
    1e08:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0a:	80 83       	st	Z, r24
    1e0c:	8f e6       	ldi	r24, 0x6F	; 111
				menuScreen->screen2[4][15] = 'o';
    1e0e:	31 96       	adiw	r30, 0x01	; 1
    1e10:	80 83       	st	Z, r24
    1e12:	8e e6       	ldi	r24, 0x6E	; 110
				menuScreen->screen2[4][16] = 'n';
    1e14:	31 96       	adiw	r30, 0x01	; 1
    1e16:	80 83       	st	Z, r24
    1e18:	85 e6       	ldi	r24, 0x65	; 101
				menuScreen->screen2[4][17] = 'e';
    1e1a:	31 96       	adiw	r30, 0x01	; 1
    1e1c:	80 83       	st	Z, r24
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1e20:	f7 01       	movw	r30, r14
    1e22:	e8 0f       	add	r30, r24
    1e24:	f1 1d       	adc	r31, r1
    1e26:	e5 53       	subi	r30, 0x35	; 53
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1e2a:	20 81       	ld	r18, Z
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	32 2f       	mov	r19, r18
    1e30:	22 27       	eor	r18, r18
				menuScreen->screen2[4][15] = 'o';
				menuScreen->screen2[4][16] = 'n';
				menuScreen->screen2[4][17] = 'e';
				break;
			}
		uint16_t totalSustainTime = currentPattern->trackSustainTimeLSB[currentGlobals->currentTrack]|((currentPattern->trackSustainTimeMSB[currentGlobals->currentTrack])<<8);
    1e32:	70 96       	adiw	r30, 0x10	; 16
		numPrinter(menuScreen->screen2[5],13, 5, totalSustainTime);
    1e34:	80 81       	ld	r24, Z
    1e36:	28 2b       	or	r18, r24
    1e38:	45 e0       	ldi	r20, 0x05	; 5
    1e3a:	6d e0       	ldi	r22, 0x0D	; 13
    1e3c:	c8 01       	movw	r24, r16
    1e3e:	8d 51       	subi	r24, 0x1D	; 29
    1e40:	9e 4f       	sbci	r25, 0xFE	; 254
    1e42:	7d d3       	rcall	.+1786   	; 0x253e <numPrinter>
		menuScreen->screen2[5][12] = menuScreen->screen2[5][13];
    1e44:	d8 01       	movw	r26, r16
    1e46:	a0 51       	subi	r26, 0x10	; 16
    1e48:	be 4f       	sbci	r27, 0xFE	; 254
    1e4a:	8c 91       	ld	r24, X
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	e1 51       	subi	r30, 0x11	; 17
    1e50:	fe 4f       	sbci	r31, 0xFE	; 254
    1e52:	80 83       	st	Z, r24
		menuScreen->screen2[5][13] = menuScreen->screen2[5][14];
    1e54:	32 96       	adiw	r30, 0x02	; 2
    1e56:	80 81       	ld	r24, Z
    1e58:	8c 93       	st	X, r24
		menuScreen->screen2[5][14] = '.';
    1e5a:	8e e2       	ldi	r24, 0x2E	; 46
    1e5c:	80 83       	st	Z, r24
    1e5e:	8e 81       	ldd	r24, Y+6	; 0x06
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
			
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
    1e60:	87 7f       	andi	r24, 0xF7	; 247
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	24 32       	cpi	r18, 0x24	; 36
    1e68:	31 05       	cpc	r19, r1
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
    1e6a:	14 f0       	brlt	.+4      	; 0x1e70 <updateScreen+0x77a>
		menuScreen->screen2[5][14] = '.';
			//the track settings screens should now be populated
			
			
			//this is a bit messy, but seems to fix bugs on this portion of the menu for now. 
			uint8_t triggerChangeScreen = 1;
    1e6c:	82 52       	subi	r24, 0x22	; 34
			if(((currentGlobals->menuState)&selectBit)>35) //this accounts for menu stats 36,37,44, and 45
			{
				triggerChangeScreen = ((currentGlobals->menuState)&selectBit) - 34; //mask to get rid of encoder B pushed state. 
			}
			
			outputS(menuScreen->screen2[triggerChangeScreen], 1); 
    1e6e:	01 c0       	rjmp	.+2      	; 0x1e72 <updateScreen+0x77c>
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	c8 2e       	mov	r12, r24
    1e74:	d1 2c       	mov	r13, r1
    1e76:	0f 2e       	mov	r0, r31
    1e78:	f5 e1       	ldi	r31, 0x15	; 21
    1e7a:	bf 2e       	mov	r11, r31
    1e7c:	f0 2d       	mov	r31, r0
    1e7e:	bc 9c       	mul	r11, r12
    1e80:	c0 01       	movw	r24, r0
    1e82:	bd 9c       	mul	r11, r13
    1e84:	90 0d       	add	r25, r0
    1e86:	11 24       	eor	r1, r1
    1e88:	86 58       	subi	r24, 0x86	; 134
    1e8a:	9e 4f       	sbci	r25, 0xFE	; 254
    1e8c:	61 e0       	ldi	r22, 0x01	; 1
    1e8e:	70 e0       	ldi	r23, 0x00	; 0
    1e90:	80 0f       	add	r24, r16
			outputS(menuScreen->screen2[triggerChangeScreen+1], 2); 
    1e92:	91 1f       	adc	r25, r17
    1e94:	3c d3       	rcall	.+1656   	; 0x250e <outputS>
    1e96:	96 01       	movw	r18, r12
    1e98:	2f 5f       	subi	r18, 0xFF	; 255
    1e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9c:	b2 9e       	mul	r11, r18
    1e9e:	c0 01       	movw	r24, r0
    1ea0:	b3 9e       	mul	r11, r19
    1ea2:	90 0d       	add	r25, r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	86 58       	subi	r24, 0x86	; 134
    1ea8:	9e 4f       	sbci	r25, 0xFE	; 254
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	80 0f       	add	r24, r16
    1eb0:	91 1f       	adc	r25, r17
			outputS(menuScreen->screen2[triggerChangeScreen+2], 3);
    1eb2:	2d d3       	rcall	.+1626   	; 0x250e <outputS>
    1eb4:	f2 e0       	ldi	r31, 0x02	; 2
    1eb6:	cf 0e       	add	r12, r31
    1eb8:	d1 1c       	adc	r13, r1
    1eba:	bc 9c       	mul	r11, r12
    1ebc:	c0 01       	movw	r24, r0
    1ebe:	bd 9c       	mul	r11, r13
    1ec0:	90 0d       	add	r25, r0
    1ec2:	11 24       	eor	r1, r1
    1ec4:	86 58       	subi	r24, 0x86	; 134
    1ec6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ec8:	63 e0       	ldi	r22, 0x03	; 3
    1eca:	70 e0       	ldi	r23, 0x00	; 0
    1ecc:	80 0f       	add	r24, r16
    1ece:	91 1f       	adc	r25, r17
    1ed0:	1e d3       	rcall	.+1596   	; 0x250e <outputS>
			
			break;
    1ed2:	19 c0       	rjmp	.+50     	; 0x1f06 <updateScreen+0x810>
			
			case 3:;
			//do we need this variable?
			numPrinter(menuScreen->screen3[2],10,2,(currentGlobals->currentTrack)+1);
    1ed4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	2f 5f       	subi	r18, 0xFF	; 255
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	42 e0       	ldi	r20, 0x02	; 2
    1ede:	6a e0       	ldi	r22, 0x0A	; 10
    1ee0:	68 01       	movw	r12, r16
    1ee2:	8f e9       	ldi	r24, 0x9F	; 159
    1ee4:	c8 1a       	sub	r12, r24
    1ee6:	8d ef       	ldi	r24, 0xFD	; 253
    1ee8:	d8 0a       	sbc	r13, r24
    1eea:	c6 01       	movw	r24, r12
    1eec:	28 d3       	rcall	.+1616   	; 0x253e <numPrinter>
			midiNotePrinter(menuScreen->screen3[2],14,currentGlobals->midiTrackNote[currentGlobals->currentTrack]); 
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e8 0f       	add	r30, r24
    1ef4:	f1 1d       	adc	r31, r1
    1ef6:	45 85       	ldd	r20, Z+13	; 0x0d
    1ef8:	6e e0       	ldi	r22, 0x0E	; 14
    1efa:	c6 01       	movw	r24, r12
    1efc:	e6 d4       	rcall	.+2508   	; 0x28ca <midiNotePrinter>
    1efe:	62 e0       	ldi	r22, 0x02	; 2
			outputS(menuScreen->screen3[2],2);
    1f00:	70 e0       	ldi	r23, 0x00	; 0
    1f02:	c6 01       	movw	r24, r12
    1f04:	04 d3       	rcall	.+1544   	; 0x250e <outputS>
    1f06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f08:	82 ff       	sbrs	r24, 2
			break;
			
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
    1f0a:	65 c1       	rjmp	.+714    	; 0x21d6 <updateScreen+0xae0>
    1f0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f0e:	98 2f       	mov	r25, r24
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
    1f10:	9f 70       	andi	r25, 0x0F	; 15
    1f12:	89 2e       	mov	r8, r25
    1f14:	99 85       	ldd	r25, Y+9	; 0x09
    1f16:	90 ff       	sbrs	r25, 0
		uint8_t positionSelectUpper = 0;
		if((currentGlobals->buttonSwitchFlag)&0x01)
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <updateScreen+0x828>
    1f1a:	28 e0       	ldi	r18, 0x08	; 8
    1f1c:	01 c0       	rjmp	.+2      	; 0x1f20 <updateScreen+0x82a>
		{
			positionSelectUpper = 8;
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	82 95       	swap	r24
		}
	}
	if(currentGlobals->valueChangeFlag&(1<<knobChange))
	{
		uint8_t positionSelect = currentGlobals->knobStatus&0x0F; //this is the bottom 4 bits, for the track location
		uint8_t positionSelectUpper = 0;
    1f22:	8f 70       	andi	r24, 0x0F	; 15
		{
			positionSelectUpper = 8;
		}
		

		switch((currentGlobals->knobStatus)>>4)
    1f24:	82 30       	cpi	r24, 0x02	; 2
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <updateScreen+0x834>
    1f28:	8e c0       	rjmp	.+284    	; 0x2046 <updateScreen+0x950>
    1f2a:	30 f4       	brcc	.+12     	; 0x1f38 <updateScreen+0x842>
    1f2c:	88 23       	and	r24, r24
    1f2e:	69 f0       	breq	.+26     	; 0x1f4a <updateScreen+0x854>
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <updateScreen+0x840>
    1f34:	52 c0       	rjmp	.+164    	; 0x1fda <updateScreen+0x8e4>
    1f36:	4e c1       	rjmp	.+668    	; 0x21d4 <updateScreen+0xade>
    1f38:	84 30       	cpi	r24, 0x04	; 4
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <updateScreen+0x848>
    1f3c:	f0 c0       	rjmp	.+480    	; 0x211e <updateScreen+0xa28>
    1f3e:	08 f4       	brcc	.+2      	; 0x1f42 <updateScreen+0x84c>
    1f40:	b8 c0       	rjmp	.+368    	; 0x20b2 <updateScreen+0x9bc>
    1f42:	85 30       	cpi	r24, 0x05	; 5
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <updateScreen+0x852>
    1f46:	34 c1       	rjmp	.+616    	; 0x21b0 <updateScreen+0xaba>
    1f48:	45 c1       	rjmp	.+650    	; 0x21d4 <updateScreen+0xade>
    1f4a:	e8 2d       	mov	r30, r8
		{
			case 0: //output volume
			if((currentPattern->outputLevelMSB[positionSelect])==0)
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	d7 01       	movw	r26, r14
    1f50:	ae 0f       	add	r26, r30
    1f52:	bf 1f       	adc	r27, r31
    1f54:	8c 91       	ld	r24, X
    1f56:	81 11       	cpse	r24, r1
    1f58:	0a c0       	rjmp	.+20     	; 0x1f6e <updateScreen+0x878>
    1f5a:	fd 01       	movw	r30, r26
			{ //value is positive
				numPrinter(menuScreen->knobScreen[0],14,3,currentPattern->outputLevelLSB[positionSelect]); //should be a value between 0 and 8
    1f5c:	20 85       	ldd	r18, Z+8	; 0x08
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	43 e0       	ldi	r20, 0x03	; 3
    1f62:	6e e0       	ldi	r22, 0x0E	; 14
    1f64:	c8 01       	movw	r24, r16
    1f66:	8c 50       	subi	r24, 0x0C	; 12
    1f68:	9d 4f       	sbci	r25, 0xFD	; 253
    1f6a:	e9 d2       	rcall	.+1490   	; 0x253e <numPrinter>
    1f6c:	29 c0       	rjmp	.+82     	; 0x1fc0 <updateScreen+0x8ca>
    1f6e:	8d e2       	ldi	r24, 0x2D	; 45
    1f70:	d8 01       	movw	r26, r16
			}else
			{
				menuScreen->knobScreen[0][14] = '-';
    1f72:	ae 5f       	subi	r26, 0xFE	; 254
    1f74:	bc 4f       	sbci	r27, 0xFC	; 252
    1f76:	8c 93       	st	X, r24
    1f78:	68 01       	movw	r12, r16
				menuScreen->knobScreen[0][15] = ((((currentPattern->outputLevelLSB[positionSelect]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    1f7a:	a3 e0       	ldi	r26, 0x03	; 3
    1f7c:	ca 0e       	add	r12, r26
    1f7e:	da 1e       	adc	r13, r26
    1f80:	ee 0d       	add	r30, r14
    1f82:	ff 1d       	adc	r31, r15
    1f84:	80 85       	ldd	r24, Z+8	; 0x08
    1f86:	80 95       	com	r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	64 e6       	ldi	r22, 0x64	; 100
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__divmodhi4>
    1f94:	2a e0       	ldi	r18, 0x0A	; 10
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	b9 01       	movw	r22, r18
    1f9a:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__divmodhi4>
    1f9e:	60 5d       	subi	r22, 0xD0	; 208
    1fa0:	d6 01       	movw	r26, r12
    1fa2:	6c 93       	st	X, r22
				menuScreen->knobScreen[0][16] = (((currentPattern->outputLevelLSB[positionSelect]^255)+1)%10)+48;
    1fa4:	78 01       	movw	r14, r16
    1fa6:	bc ef       	ldi	r27, 0xFC	; 252
    1fa8:	eb 1a       	sub	r14, r27
    1faa:	fb 0a       	sbc	r15, r27
    1fac:	80 85       	ldd	r24, Z+8	; 0x08
    1fae:	80 95       	com	r24
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	b9 01       	movw	r22, r18
    1fb6:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__divmodhi4>
    1fba:	80 5d       	subi	r24, 0xD0	; 208
    1fbc:	f7 01       	movw	r30, r14
			}
				
			menuScreen->knobScreen[0][10] = positionSelect + 49;
    1fbe:	80 83       	st	Z, r24
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	e2 50       	subi	r30, 0x02	; 2
    1fc4:	fd 4f       	sbci	r31, 0xFD	; 253
    1fc6:	81 e3       	ldi	r24, 0x31	; 49
    1fc8:	88 0d       	add	r24, r8
			outputS(menuScreen->knobScreen[0], 3);
    1fca:	80 83       	st	Z, r24
    1fcc:	63 e0       	ldi	r22, 0x03	; 3
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	c8 01       	movw	r24, r16
    1fd2:	8c 50       	subi	r24, 0x0C	; 12
    1fd4:	9d 4f       	sbci	r25, 0xFD	; 253
    1fd6:	9b d2       	rcall	.+1334   	; 0x250e <outputS>
			break;
    1fd8:	fd c0       	rjmp	.+506    	; 0x21d4 <updateScreen+0xade>
				
			case 1: //pitch
			menuScreen->knobScreen[1][5] = positionSelect+49; 
    1fda:	f8 01       	movw	r30, r16
    1fdc:	e2 5f       	subi	r30, 0xF2	; 242
    1fde:	fc 4f       	sbci	r31, 0xFC	; 252
    1fe0:	81 e3       	ldi	r24, 0x31	; 49
    1fe2:	88 0d       	add	r24, r8
			if(currentPattern->outputPitch[positionSelect]>>7)
    1fe4:	80 83       	st	Z, r24
    1fe6:	91 2c       	mov	r9, r1
    1fe8:	f7 01       	movw	r30, r14
    1fea:	e8 0d       	add	r30, r8
    1fec:	f9 1d       	adc	r31, r9
    1fee:	80 89       	ldd	r24, Z+16	; 0x10
    1ff0:	88 23       	and	r24, r24
			{
				menuScreen->knobScreen[1][7] = '-';
    1ff2:	94 f4       	brge	.+36     	; 0x2018 <updateScreen+0x922>
    1ff4:	8d e2       	ldi	r24, 0x2D	; 45
    1ff6:	f8 01       	movw	r30, r16
    1ff8:	e0 5f       	subi	r30, 0xF0	; 240
    1ffa:	fc 4f       	sbci	r31, 0xFC	; 252
				numPrinter(menuScreen->knobScreen[1], 8, 3, (currentPattern->outputPitch[positionSelect])^255);
    1ffc:	80 83       	st	Z, r24
    1ffe:	f7 01       	movw	r30, r14
    2000:	e8 0d       	add	r30, r8
    2002:	f9 1d       	adc	r31, r9
    2004:	20 89       	ldd	r18, Z+16	; 0x10
    2006:	20 95       	com	r18
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	43 e0       	ldi	r20, 0x03	; 3
    200c:	68 e0       	ldi	r22, 0x08	; 8
    200e:	c8 01       	movw	r24, r16
    2010:	87 5f       	subi	r24, 0xF7	; 247
    2012:	9c 4f       	sbci	r25, 0xFC	; 252
			}else
			{
				menuScreen->knobScreen[1][7] = '+';
    2014:	94 d2       	rcall	.+1320   	; 0x253e <numPrinter>
    2016:	10 c0       	rjmp	.+32     	; 0x2038 <updateScreen+0x942>
    2018:	8b e2       	ldi	r24, 0x2B	; 43
    201a:	f8 01       	movw	r30, r16
    201c:	e0 5f       	subi	r30, 0xF0	; 240
				numPrinter(menuScreen->knobScreen[1],8,3,currentPattern->outputPitch[positionSelect]);
    201e:	fc 4f       	sbci	r31, 0xFC	; 252
    2020:	80 83       	st	Z, r24
    2022:	f7 01       	movw	r30, r14
    2024:	e8 0d       	add	r30, r8
    2026:	f9 1d       	adc	r31, r9
    2028:	20 89       	ldd	r18, Z+16	; 0x10
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	43 e0       	ldi	r20, 0x03	; 3
    202e:	68 e0       	ldi	r22, 0x08	; 8
    2030:	c8 01       	movw	r24, r16
    2032:	87 5f       	subi	r24, 0xF7	; 247
    2034:	9c 4f       	sbci	r25, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
    2036:	83 d2       	rcall	.+1286   	; 0x253e <numPrinter>
    2038:	63 e0       	ldi	r22, 0x03	; 3
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	c8 01       	movw	r24, r16
    203e:	87 5f       	subi	r24, 0xF7	; 247
    2040:	9c 4f       	sbci	r25, 0xFC	; 252
			break;
    2042:	65 d2       	rcall	.+1226   	; 0x250e <outputS>
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    2044:	c7 c0       	rjmp	.+398    	; 0x21d4 <updateScreen+0xade>
    2046:	91 2c       	mov	r9, r1
    2048:	c2 2e       	mov	r12, r18
    204a:	d1 2c       	mov	r13, r1
    204c:	c4 01       	movw	r24, r8
    204e:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    2050:	9d 1d       	adc	r25, r13
    2052:	58 01       	movw	r10, r16
    2054:	f2 ee       	ldi	r31, 0xE2	; 226
    2056:	af 1a       	sub	r10, r31
    2058:	fc ef       	ldi	r31, 0xFC	; 252
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    205a:	bf 0a       	sbc	r11, r31
    205c:	e8 0e       	add	r14, r24
    205e:	f9 1e       	adc	r15, r25
    2060:	f7 01       	movw	r30, r14
    2062:	e8 5b       	subi	r30, 0xB8	; 184
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	20 81       	ld	r18, Z
    2068:	30 e0       	ldi	r19, 0x00	; 0
			}
			outputS(menuScreen->knobScreen[1],3);
			break;
				
			case 2:; //attack envelope 
			uint16_t totalAttackTime = currentPattern->trackAttackTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackAttackTimeMSB[positionSelect+positionSelectUpper])<<8);				
    206a:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],14, 5, totalAttackTime);
    206c:	22 27       	eor	r18, r18
    206e:	70 96       	adiw	r30, 0x10	; 16
    2070:	80 81       	ld	r24, Z
    2072:	28 2b       	or	r18, r24
    2074:	45 e0       	ldi	r20, 0x05	; 5
    2076:	6e e0       	ldi	r22, 0x0E	; 14
			menuScreen->knobScreen[2][13] = menuScreen->knobScreen[2][14];
    2078:	c5 01       	movw	r24, r10
    207a:	61 d2       	rcall	.+1218   	; 0x253e <numPrinter>
    207c:	f8 01       	movw	r30, r16
    207e:	e5 5d       	subi	r30, 0xD5	; 213
    2080:	fc 4f       	sbci	r31, 0xFC	; 252
    2082:	d8 01       	movw	r26, r16
    2084:	a4 5d       	subi	r26, 0xD4	; 212
    2086:	bc 4f       	sbci	r27, 0xFC	; 252
			menuScreen->knobScreen[2][14] = menuScreen->knobScreen[2][15];
    2088:	8c 91       	ld	r24, X
    208a:	80 83       	st	Z, r24
    208c:	32 96       	adiw	r30, 0x02	; 2
			menuScreen->knobScreen[2][15] = '.';	
    208e:	80 81       	ld	r24, Z
    2090:	8c 93       	st	X, r24
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
    2092:	8e e2       	ldi	r24, 0x2E	; 46
    2094:	80 83       	st	Z, r24
    2096:	94 01       	movw	r18, r8
    2098:	2f 5f       	subi	r18, 0xFF	; 255
    209a:	3f 4f       	sbci	r19, 0xFF	; 255
    209c:	2c 0d       	add	r18, r12
    209e:	3d 1d       	adc	r19, r13
    20a0:	42 e0       	ldi	r20, 0x02	; 2
    20a2:	6a e0       	ldi	r22, 0x0A	; 10
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
    20a4:	c5 01       	movw	r24, r10
    20a6:	4b d2       	rcall	.+1174   	; 0x253e <numPrinter>
    20a8:	63 e0       	ldi	r22, 0x03	; 3
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	c5 01       	movw	r24, r10
			break;
    20ae:	2f d2       	rcall	.+1118   	; 0x250e <outputS>
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    20b0:	91 c0       	rjmp	.+290    	; 0x21d4 <updateScreen+0xade>
    20b2:	91 2c       	mov	r9, r1
    20b4:	c2 2e       	mov	r12, r18
    20b6:	d1 2c       	mov	r13, r1
    20b8:	c4 01       	movw	r24, r8
    20ba:	8c 0d       	add	r24, r12
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    20bc:	9d 1d       	adc	r25, r13
    20be:	58 01       	movw	r10, r16
    20c0:	2d ec       	ldi	r18, 0xCD	; 205
    20c2:	a2 1a       	sub	r10, r18
    20c4:	2c ef       	ldi	r18, 0xFC	; 252
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    20c6:	b2 0a       	sbc	r11, r18
    20c8:	e8 0e       	add	r14, r24
    20ca:	f9 1e       	adc	r15, r25
    20cc:	f7 01       	movw	r30, r14
    20ce:	e8 59       	subi	r30, 0x98	; 152
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	20 81       	ld	r18, Z
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	32 2f       	mov	r19, r18
			numPrinter(menuScreen->knobScreen[2],10,2,(positionSelect+1+positionSelectUpper));
			outputS(menuScreen->knobScreen[2], 3); //This is not MS, but ideal for testing it Attack really works. 
			break;
				
			case 3:; //release envelope
			uint16_t totalReleaseTime = currentPattern->trackReleaseTimeLSB[positionSelect+positionSelectUpper]|((currentPattern->trackReleaseTimeMSB[positionSelect+positionSelectUpper])<<8);
    20d8:	22 27       	eor	r18, r18
			numPrinter(menuScreen->knobScreen[3],15, 5, totalReleaseTime);
    20da:	70 96       	adiw	r30, 0x10	; 16
    20dc:	80 81       	ld	r24, Z
    20de:	28 2b       	or	r18, r24
    20e0:	45 e0       	ldi	r20, 0x05	; 5
    20e2:	6f e0       	ldi	r22, 0x0F	; 15
    20e4:	c5 01       	movw	r24, r10
    20e6:	2b d2       	rcall	.+1110   	; 0x253e <numPrinter>
			menuScreen->knobScreen[3][14] = menuScreen->knobScreen[3][15];
    20e8:	f8 01       	movw	r30, r16
    20ea:	ef 5b       	subi	r30, 0xBF	; 191
    20ec:	fc 4f       	sbci	r31, 0xFC	; 252
    20ee:	d8 01       	movw	r26, r16
    20f0:	ae 5b       	subi	r26, 0xBE	; 190
    20f2:	bc 4f       	sbci	r27, 0xFC	; 252
    20f4:	8c 91       	ld	r24, X
			menuScreen->knobScreen[3][15] = menuScreen->knobScreen[3][16];
    20f6:	80 83       	st	Z, r24
    20f8:	32 96       	adiw	r30, 0x02	; 2
    20fa:	80 81       	ld	r24, Z
			menuScreen->knobScreen[3][16] = '.';
    20fc:	8c 93       	st	X, r24
			numPrinter(menuScreen->knobScreen[3],11,2,(positionSelect+1+positionSelectUpper));
    20fe:	8e e2       	ldi	r24, 0x2E	; 46
    2100:	80 83       	st	Z, r24
    2102:	94 01       	movw	r18, r8
    2104:	2f 5f       	subi	r18, 0xFF	; 255
    2106:	3f 4f       	sbci	r19, 0xFF	; 255
    2108:	2c 0d       	add	r18, r12
    210a:	3d 1d       	adc	r19, r13
    210c:	42 e0       	ldi	r20, 0x02	; 2
    210e:	6b e0       	ldi	r22, 0x0B	; 11
    2110:	c5 01       	movw	r24, r10
			outputS(menuScreen->knobScreen[3], 3);
    2112:	15 d2       	rcall	.+1066   	; 0x253e <numPrinter>
    2114:	63 e0       	ldi	r22, 0x03	; 3
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	c5 01       	movw	r24, r10
			break;
    211a:	f9 d1       	rcall	.+1010   	; 0x250e <outputS>
				
			case 4: //track volume
			if(currentPattern->trackMainVolumeMSB[(positionSelect+positionSelectUpper)]==0)
    211c:	5b c0       	rjmp	.+182    	; 0x21d4 <updateScreen+0xade>
    211e:	c2 2e       	mov	r12, r18
    2120:	d1 2c       	mov	r13, r1
    2122:	c8 0c       	add	r12, r8
    2124:	d1 1c       	adc	r13, r1
    2126:	f7 01       	movw	r30, r14
    2128:	ec 0d       	add	r30, r12
    212a:	fd 1d       	adc	r31, r13
    212c:	80 a5       	ldd	r24, Z+40	; 0x28
			{
				numPrinter(menuScreen->knobScreen[4],15, 2, currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]);
    212e:	81 11       	cpse	r24, r1
    2130:	0c c0       	rjmp	.+24     	; 0x214a <updateScreen+0xa54>
    2132:	f7 01       	movw	r30, r14
    2134:	ec 0d       	add	r30, r12
    2136:	fd 1d       	adc	r31, r13
    2138:	20 ad       	ldd	r18, Z+56	; 0x38
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	42 e0       	ldi	r20, 0x02	; 2
    213e:	6f e0       	ldi	r22, 0x0F	; 15
    2140:	c8 01       	movw	r24, r16
    2142:	88 5b       	subi	r24, 0xB8	; 184
    2144:	9c 4f       	sbci	r25, 0xFC	; 252
    2146:	fb d1       	rcall	.+1014   	; 0x253e <numPrinter>
			}else
			{
				menuScreen->knobScreen[4][15] = '-';
    2148:	25 c0       	rjmp	.+74     	; 0x2194 <updateScreen+0xa9e>
    214a:	8d e2       	ldi	r24, 0x2D	; 45
    214c:	f8 01       	movw	r30, r16
    214e:	e9 5a       	subi	r30, 0xA9	; 169
    2150:	fc 4f       	sbci	r31, 0xFC	; 252
				menuScreen->knobScreen[4][16] = ((((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%100)/10)+48; //negative 8 bit numbers: flip every bit and add 1.
    2152:	80 83       	st	Z, r24
    2154:	31 96       	adiw	r30, 0x01	; 1
    2156:	ec 0c       	add	r14, r12
    2158:	fd 1c       	adc	r15, r13
    215a:	d7 01       	movw	r26, r14
    215c:	d8 96       	adiw	r26, 0x38	; 56
    215e:	8c 91       	ld	r24, X
    2160:	80 95       	com	r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	01 96       	adiw	r24, 0x01	; 1
    2166:	64 e6       	ldi	r22, 0x64	; 100
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__divmodhi4>
    216e:	2a e0       	ldi	r18, 0x0A	; 10
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	b9 01       	movw	r22, r18
    2174:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__divmodhi4>
    2178:	60 5d       	subi	r22, 0xD0	; 208
				menuScreen->knobScreen[4][17] = (((currentPattern->trackMainVolumeLSB[(positionSelect+positionSelectUpper)]^255)+1)%10)+48;
    217a:	60 83       	st	Z, r22
    217c:	31 96       	adiw	r30, 0x01	; 1
    217e:	d7 01       	movw	r26, r14
    2180:	d8 96       	adiw	r26, 0x38	; 56
    2182:	8c 91       	ld	r24, X
    2184:	80 95       	com	r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	01 96       	adiw	r24, 0x01	; 1
    218a:	b9 01       	movw	r22, r18
    218c:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__divmodhi4>
    2190:	80 5d       	subi	r24, 0xD0	; 208
			}
				 numPrinter(menuScreen->knobScreen[4],12,2,(positionSelect+positionSelectUpper+1));
    2192:	80 83       	st	Z, r24
    2194:	08 5b       	subi	r16, 0xB8	; 184
    2196:	1c 4f       	sbci	r17, 0xFC	; 252
    2198:	96 01       	movw	r18, r12
    219a:	2f 5f       	subi	r18, 0xFF	; 255
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	42 e0       	ldi	r20, 0x02	; 2
    21a0:	6c e0       	ldi	r22, 0x0C	; 12
    21a2:	c8 01       	movw	r24, r16
    21a4:	cc d1       	rcall	.+920    	; 0x253e <numPrinter>
				 outputS(menuScreen->knobScreen[4], 3);
    21a6:	63 e0       	ldi	r22, 0x03	; 3
    21a8:	70 e0       	ldi	r23, 0x00	; 0
    21aa:	c8 01       	movw	r24, r16
    21ac:	b0 d1       	rcall	.+864    	; 0x250e <outputS>
    21ae:	12 c0       	rjmp	.+36     	; 0x21d4 <updateScreen+0xade>
			break;
    21b0:	06 5d       	subi	r16, 0xD6	; 214
			
			case 5:
			numPrinter(menuScreen->screen0[2],5,3,currentPattern->patternBPM);
    21b2:	1f 4f       	sbci	r17, 0xFF	; 255
    21b4:	f7 01       	movw	r30, r14
    21b6:	e8 53       	subi	r30, 0x38	; 56
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	20 81       	ld	r18, Z
    21bc:	31 81       	ldd	r19, Z+1	; 0x01
    21be:	43 e0       	ldi	r20, 0x03	; 3
    21c0:	65 e0       	ldi	r22, 0x05	; 5
    21c2:	c8 01       	movw	r24, r16
    21c4:	bc d1       	rcall	.+888    	; 0x253e <numPrinter>
    21c6:	8e 81       	ldd	r24, Y+6	; 0x06
    21c8:	81 11       	cpse	r24, r1
			if(currentGlobals->menuState==PreformanceModeInit)
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <updateScreen+0xade>
    21cc:	62 e0       	ldi	r22, 0x02	; 2
    21ce:	70 e0       	ldi	r23, 0x00	; 0
			{
				outputS(menuScreen->screen0[2],2);
    21d0:	c8 01       	movw	r24, r16
    21d2:	9d d1       	rcall	.+826    	; 0x250e <outputS>
    21d4:	1a 86       	std	Y+10, r1	; 0x0a
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
			}
			break;
		}
		currentGlobals->valueChangeFlag = currentGlobals->valueChangeFlag&(0xFF&(0<<knobChange));			
    21da:	1f 91       	pop	r17
	}
    21dc:	0f 91       	pop	r16
    21de:	ff 90       	pop	r15
    21e0:	ef 90       	pop	r14
    21e2:	df 90       	pop	r13
    21e4:	cf 90       	pop	r12
    21e6:	bf 90       	pop	r11
    21e8:	af 90       	pop	r10
    21ea:	9f 90       	pop	r9
    21ec:	8f 90       	pop	r8
    21ee:	08 95       	ret

000021f0 <__vector_54>:
    21f0:	1f 92       	push	r1
    21f2:	0f 92       	push	r0
    21f4:	0f b6       	in	r0, 0x3f	; 63
}

void midiTransmit(uint8_t data)
{
  while (!(UCSR3A & (1 << UDRE3)));
  UDR3 = data;
    21f6:	0f 92       	push	r0
    21f8:	11 24       	eor	r1, r1
    21fa:	0b b6       	in	r0, 0x3b	; 59
    21fc:	0f 92       	push	r0
    21fe:	2f 93       	push	r18
    2200:	3f 93       	push	r19
    2202:	5f 93       	push	r21
    2204:	6f 93       	push	r22
    2206:	7f 93       	push	r23
    2208:	8f 93       	push	r24
    220a:	9f 93       	push	r25
    220c:	af 93       	push	r26
    220e:	bf 93       	push	r27
    2210:	ef 93       	push	r30
    2212:	ff 93       	push	r31
    2214:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2218:	82 2f       	mov	r24, r18
    221a:	82 95       	swap	r24
    221c:	8f 70       	andi	r24, 0x0F	; 15
    221e:	88 50       	subi	r24, 0x08	; 8
    2220:	82 30       	cpi	r24, 0x02	; 2
    2222:	78 f4       	brcc	.+30     	; 0x2242 <__stack+0x43>
    2224:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <midiWriteIndex>
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	fc 01       	movw	r30, r24
    222c:	ee 0f       	add	r30, r30
    222e:	ff 1f       	adc	r31, r31
    2230:	8e 0f       	add	r24, r30
    2232:	9f 1f       	adc	r25, r31
    2234:	fc 01       	movw	r30, r24
    2236:	ec 5c       	subi	r30, 0xCC	; 204
    2238:	f9 4f       	sbci	r31, 0xF9	; 249
    223a:	20 83       	st	Z, r18
    223c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    2240:	50 c0       	rjmp	.+160    	; 0x22e2 <__stack+0xe3>
    2242:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    2246:	81 11       	cpse	r24, r1
    2248:	15 c0       	rjmp	.+42     	; 0x2274 <__stack+0x75>
    224a:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <midiWriteIndex>
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    2254:	fc 01       	movw	r30, r24
    2256:	ee 0f       	add	r30, r30
    2258:	ff 1f       	adc	r31, r31
    225a:	e8 0f       	add	r30, r24
    225c:	f9 1f       	adc	r31, r25
    225e:	ec 5c       	subi	r30, 0xCC	; 204
    2260:	f9 4f       	sbci	r31, 0xF9	; 249
    2262:	e3 0f       	add	r30, r19
    2264:	f1 1d       	adc	r31, r1
    2266:	21 83       	std	Z+1, r18	; 0x01
    2268:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <midiWriteFlag>
    2272:	37 c0       	rjmp	.+110    	; 0x22e2 <__stack+0xe3>
    2274:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <midiWriteFlag>
    2278:	8f 3f       	cpi	r24, 0xFF	; 255
    227a:	99 f1       	breq	.+102    	; 0x22e2 <__stack+0xe3>
    227c:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <midiWriteIndex>
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <midiWriteFlag>
    2286:	fc 01       	movw	r30, r24
    2288:	ee 0f       	add	r30, r30
    228a:	ff 1f       	adc	r31, r31
    228c:	e8 0f       	add	r30, r24
    228e:	f9 1f       	adc	r31, r25
    2290:	ec 5c       	subi	r30, 0xCC	; 204
    2292:	f9 4f       	sbci	r31, 0xF9	; 249
    2294:	e3 0f       	add	r30, r19
    2296:	f1 1d       	adc	r31, r1
    2298:	21 83       	std	Z+1, r18	; 0x01
    229a:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <midiWriteIndex>
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	fc 01       	movw	r30, r24
    22a2:	ee 0f       	add	r30, r30
    22a4:	ff 1f       	adc	r31, r31
    22a6:	8e 0f       	add	r24, r30
    22a8:	9f 1f       	adc	r25, r31
    22aa:	fc 01       	movw	r30, r24
    22ac:	ec 5c       	subi	r30, 0xCC	; 204
    22ae:	f9 4f       	sbci	r31, 0xF9	; 249
    22b0:	20 81       	ld	r18, Z
    22b2:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <midiWriteIndex>
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	01 96       	adiw	r24, 0x01	; 1
    22ba:	6a e0       	ldi	r22, 0x0A	; 10
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__divmodhi4>
    22c2:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <midiWriteIndex>
    22c6:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <midiWriteIndex>
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	fc 01       	movw	r30, r24
    22ce:	ee 0f       	add	r30, r30
    22d0:	ff 1f       	adc	r31, r31
    22d2:	8e 0f       	add	r24, r30
    22d4:	9f 1f       	adc	r25, r31
    22d6:	fc 01       	movw	r30, r24
    22d8:	ec 5c       	subi	r30, 0xCC	; 204
    22da:	f9 4f       	sbci	r31, 0xF9	; 249
    22dc:	20 83       	st	Z, r18
    22de:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <midiWriteFlag>
    22e2:	ff 91       	pop	r31
    22e4:	ef 91       	pop	r30
    22e6:	bf 91       	pop	r27
    22e8:	af 91       	pop	r26
    22ea:	9f 91       	pop	r25
    22ec:	8f 91       	pop	r24
    22ee:	7f 91       	pop	r23
    22f0:	6f 91       	pop	r22
    22f2:	5f 91       	pop	r21
    22f4:	3f 91       	pop	r19
    22f6:	2f 91       	pop	r18
    22f8:	0f 90       	pop	r0
    22fa:	0b be       	out	0x3b, r0	; 59
    22fc:	0f 90       	pop	r0
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	0f 90       	pop	r0
    2302:	1f 90       	pop	r1
    2304:	18 95       	reti

00002306 <initMidi>:
    2306:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    230a:	8f e1       	ldi	r24, 0x1F	; 31
    230c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    2310:	e1 e3       	ldi	r30, 0x31	; 49
    2312:	f1 e0       	ldi	r31, 0x01	; 1
    2314:	80 81       	ld	r24, Z
    2316:	88 69       	ori	r24, 0x98	; 152
    2318:	80 83       	st	Z, r24
    231a:	e2 e3       	ldi	r30, 0x32	; 50
    231c:	f1 e0       	ldi	r31, 0x01	; 1
    231e:	80 81       	ld	r24, Z
    2320:	86 60       	ori	r24, 0x06	; 6
    2322:	80 83       	st	Z, r24
    2324:	08 95       	ret

00002326 <midiRead>:
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
    2326:	af 92       	push	r10
    2328:	bf 92       	push	r11
    232a:	cf 92       	push	r12
    232c:	df 92       	push	r13
    232e:	ef 92       	push	r14
    2330:	ff 92       	push	r15
    2332:	0f 93       	push	r16
    2334:	1f 93       	push	r17
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
  while (midiReadIndex != midiWriteIndex)
    233e:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <midiReadIndex>
    2342:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <midiWriteIndex>
    2346:	e8 17       	cp	r30, r24
    2348:	09 f4       	brne	.+2      	; 0x234c <midiRead+0x26>
    234a:	5c c0       	rjmp	.+184    	; 0x2404 <midiRead+0xde>
    234c:	7e 01       	movw	r14, r28
    234e:	86 ea       	ldi	r24, 0xA6	; 166
    2350:	e8 0e       	add	r14, r24
    2352:	f1 1c       	adc	r15, r1
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    2354:	0a e0       	ldi	r16, 0x0A	; 10
    2356:	10 e0       	ldi	r17, 0x00	; 0

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
  {
    uint8_t midiMessageType = ((midiEventBuffer[midiReadIndex].statusByte)>>4);
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	cf 01       	movw	r24, r30
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	e8 0f       	add	r30, r24
    2362:	f9 1f       	adc	r31, r25
    2364:	ec 5c       	subi	r30, 0xCC	; 204
    2366:	f9 4f       	sbci	r31, 0xF9	; 249
    2368:	80 81       	ld	r24, Z
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    236a:	22 81       	ldd	r18, Z+2	; 0x02
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    236c:	90 81       	ld	r25, Z
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    236e:	82 95       	swap	r24
    2370:	8f 70       	andi	r24, 0x0F	; 15
    2372:	89 30       	cpi	r24, 0x09	; 9
    2374:	c9 f5       	brne	.+114    	; 0x23e8 <midiRead+0xc2>
    2376:	22 23       	and	r18, r18
    2378:	b9 f1       	breq	.+110    	; 0x23e8 <midiRead+0xc2>
    237a:	9f 70       	andi	r25, 0x0F	; 15
    237c:	cb 56       	subi	r28, 0x6B	; 107
    237e:	de 4f       	sbci	r29, 0xFE	; 254
    2380:	88 81       	ld	r24, Y
    2382:	c5 59       	subi	r28, 0x95	; 149
    2384:	d1 40       	sbci	r29, 0x01	; 1
    2386:	98 13       	cpse	r25, r24
    2388:	2f c0       	rjmp	.+94     	; 0x23e8 <midiRead+0xc2>
    238a:	0f 2e       	mov	r0, r31
    238c:	f9 e8       	ldi	r31, 0x89	; 137
    238e:	af 2e       	mov	r10, r31
    2390:	bb 24       	eor	r11, r11
    2392:	b3 94       	inc	r11
    2394:	f0 2d       	mov	r31, r0
    2396:	ac 0e       	add	r10, r28
    2398:	bd 1e       	adc	r11, r29
    239a:	ed e0       	ldi	r30, 0x0D	; 13
    239c:	ae 0e       	add	r10, r30
    239e:	b1 1c       	adc	r11, r1
    23a0:	6e 01       	movw	r12, r28
    23a2:	f6 e9       	ldi	r31, 0x96	; 150
    23a4:	cf 0e       	add	r12, r31
    23a6:	d1 1c       	adc	r13, r1
    {
        for (int i=0; i<16; i++)
        {
          if(midiEventBuffer[midiReadIndex].dataByte[0]==currentGlobals.midiTrackNote[i])
    23a8:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <midiReadIndex>
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	fc 01       	movw	r30, r24
    23b0:	ee 0f       	add	r30, r30
    23b2:	ff 1f       	adc	r31, r31
    23b4:	8e 0f       	add	r24, r30
    23b6:	9f 1f       	adc	r25, r31
    23b8:	fc 01       	movw	r30, r24
    23ba:	ec 5c       	subi	r30, 0xCC	; 204
    23bc:	f9 4f       	sbci	r31, 0xF9	; 249
    23be:	91 81       	ldd	r25, Z+1	; 0x01
    23c0:	f5 01       	movw	r30, r10
    23c2:	81 91       	ld	r24, Z+
    23c4:	5f 01       	movw	r10, r30
    23c6:	98 13       	cpse	r25, r24
    23c8:	09 c0       	rjmp	.+18     	; 0x23dc <midiRead+0xb6>
          { //we don't care about velocity, at least not yet.
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
    23ca:	f6 01       	movw	r30, r12
    23cc:	20 81       	ld	r18, Z
    23ce:	e0 57       	subi	r30, 0x70	; 112
    23d0:	f1 09       	sbc	r31, r1
    23d2:	40 81       	ld	r20, Z
    23d4:	f6 01       	movw	r30, r12
    23d6:	60 89       	ldd	r22, Z+16	; 0x10
    23d8:	80 a1       	ldd	r24, Z+32	; 0x20
    23da:	d3 d3       	rcall	.+1958   	; 0x2b82 <trackControl>
    23dc:	ff ef       	ldi	r31, 0xFF	; 255
    23de:	cf 1a       	sub	r12, r31
    23e0:	df 0a       	sbc	r13, r31
    uint8_t midiVelocity = (midiEventBuffer[midiReadIndex].dataByte[1]);
    uint8_t midiChannelIn = ((midiEventBuffer[midiReadIndex].statusByte)&0b00001111);
    //uint8_t midiChannelRead = ((midiEventBuffer[midiReadIndex].statusByte)&00001111);
    if ((midiMessageType==MIDI_NOTE_ON)&&(midiVelocity!=0)&&currentGlobals.midiChannel==midiChannelIn)
    {
        for (int i=0; i<16; i++)
    23e2:	ce 14       	cp	r12, r14
    23e4:	df 04       	cpc	r13, r15
    23e6:	01 f7       	brne	.-64     	; 0x23a8 <midiRead+0x82>
            //trackControl(char trackNumberLSB, char trackNumberMSB, char outputNumber, char trackCommand)
            trackControl(currentPattern.trackSampleLSB[i], currentPattern.trackSampleMSB[i], currentPattern.trackOutputRoute[i], currentPattern.trackPlayMode[i]);
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
    23e8:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <midiReadIndex>
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	b8 01       	movw	r22, r16
    23f2:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__divmodhi4>
    23f6:	e8 2f       	mov	r30, r24
    23f8:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <midiReadIndex>
  UDR3 = data;
}

void midiRead(Pattern currentPattern, Globals currentGlobals)
{
  while (midiReadIndex != midiWriteIndex)
    23fc:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <midiWriteIndex>
    2400:	8e 13       	cpse	r24, r30
    2402:	aa cf       	rjmp	.-172    	; 0x2358 <midiRead+0x32>
          }
        }
    }
    midiReadIndex=(midiReadIndex+1)%MIDI_EVENT_BUFFER_SIZE; //we always want to increase the read index, even if our channel or message is not being used.
  }
}
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	df 90       	pop	r13
    2412:	cf 90       	pop	r12
    2414:	bf 90       	pop	r11
    2416:	af 90       	pop	r10
    2418:	08 95       	ret

0000241a <enableCycle>:
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    241a:	e2 e0       	ldi	r30, 0x02	; 2
    241c:	f1 e0       	ldi	r31, 0x01	; 1
    241e:	80 81       	ld	r24, Z
    2420:	80 62       	ori	r24, 0x20	; 32
    2422:	80 83       	st	Z, r24
    2424:	85 e0       	ldi	r24, 0x05	; 5
    2426:	8a 95       	dec	r24
    2428:	f1 f7       	brne	.-4      	; 0x2426 <enableCycle+0xc>
    242a:	00 00       	nop
    242c:	80 81       	ld	r24, Z
    242e:	8f 7d       	andi	r24, 0xDF	; 223
    2430:	80 83       	st	Z, r24
    2432:	08 95       	ret

00002434 <command>:
}

void command(uint8_t c)
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
    2434:	e2 e0       	ldi	r30, 0x02	; 2
    2436:	f1 e0       	ldi	r31, 0x01	; 1
    2438:	90 81       	ld	r25, Z
    243a:	9f 7b       	andi	r25, 0xBF	; 191
    243c:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    243e:	88 b9       	out	0x08, r24	; 8
{
	//digitalWrite(DC, 0);
	PORTH &= 0B10111111; //set our DC pin low, to get ready to write data.
	//we need to figure out where our DC pin is.
	send8bit(c);
	enableCycle();
    2440:	ec cf       	rjmp	.-40     	; 0x241a <enableCycle>
    2442:	08 95       	ret

00002444 <data>:
}

void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
    2444:	e2 e0       	ldi	r30, 0x02	; 2
    2446:	f1 e0       	ldi	r31, 0x01	; 1
    2448:	90 81       	ld	r25, Z
    244a:	90 64       	ori	r25, 0x40	; 64
    244c:	90 83       	st	Z, r25
	//using unsigned int 8 bit values should protect this
	//function from overflow.

	//also,this should just work.
	//since we want to send an 8 bit value over an entire port.
	PORTC = value;
    244e:	88 b9       	out	0x08, r24	; 8
void data(uint8_t d)
{
	//digitalWrite(DC, 1);
	PORTH |=0B01000000; //set out DC Pin high, so it's ready to write data.
	send8bit(d);
	enableCycle();
    2450:	e4 cf       	rjmp	.-56     	; 0x241a <enableCycle>
    2452:	08 95       	ret

00002454 <initScreen>:

void initScreen()
{
	//this is where we will do all of the screen
	//initialization.
	DDRH = 0x60; //pins 14 and 15, 14 is Enable (PortJ1), 15 is data/command (PortJ0)
    2454:	80 e6       	ldi	r24, 0x60	; 96
    2456:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRC =0xFF; //all pins on the LCD Data Bus.
    245a:	8f ef       	ldi	r24, 0xFF	; 255
    245c:	87 b9       	out	0x07, r24	; 7


	PORTH &= 0B10011111;		//set both the DC line and E line of the display to 0. leave all other bits on the ports alone
    245e:	e2 e0       	ldi	r30, 0x02	; 2
    2460:	f1 e0       	ldi	r31, 0x01	; 1
    2462:	80 81       	ld	r24, Z
    2464:	8f 79       	andi	r24, 0x9F	; 159
    2466:	80 83       	st	Z, r24

	PORTC = 0x00;				// Initializes all Arduino pins for the data bus
    2468:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    246a:	8f e1       	ldi	r24, 0x1F	; 31
    246c:	93 e0       	ldi	r25, 0x03	; 3
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <initScreen+0x1a>
    2472:	00 c0       	rjmp	.+0      	; 0x2474 <initScreen+0x20>
    2474:	00 00       	nop
	_delay_us(200);				// Waits 200 us for stabilization purpose


	uint8_t rows = 0x08;                    // Display mode: 2/4 lines

	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    2476:	8a e2       	ldi	r24, 0x2A	; 42
    2478:	dd df       	rcall	.-70     	; 0x2434 <command>
	command(0x71);        // Function selection A:
    247a:	81 e7       	ldi	r24, 0x71	; 113
    247c:	db df       	rcall	.-74     	; 0x2434 <command>
	data(0x5C);           //  enable internal Vdd regulator at 5V I/O mode (def. value) (0x00 for disable, 2.8V I/O)
    247e:	8c e5       	ldi	r24, 0x5C	; 92
    2480:	e1 df       	rcall	.-62     	; 0x2444 <data>
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    2482:	88 e2       	ldi	r24, 0x28	; 40
    2484:	d7 df       	rcall	.-82     	; 0x2434 <command>
	command(0x08);        // Display ON/OFF control: display off, cursor off, blink off (default values)
    2486:	88 e0       	ldi	r24, 0x08	; 8
    2488:	d5 df       	rcall	.-86     	; 0x2434 <command>
	command(0x22 | rows); // Function set: extended command set (RE=1), lines #
    248a:	8a e2       	ldi	r24, 0x2A	; 42
    248c:	d3 df       	rcall	.-90     	; 0x2434 <command>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    248e:	89 e7       	ldi	r24, 0x79	; 121
    2490:	d1 df       	rcall	.-94     	; 0x2434 <command>
	command(0xD5);        // Set display clock divide ratio/oscillator frequency:
    2492:	85 ed       	ldi	r24, 0xD5	; 213
    2494:	cf df       	rcall	.-98     	; 0x2434 <command>
	command(0x70);        //  divide ratio=1, frequency=7 (default values)
    2496:	80 e7       	ldi	r24, 0x70	; 112
    2498:	cd df       	rcall	.-102    	; 0x2434 <command>
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    249a:	88 e7       	ldi	r24, 0x78	; 120
    249c:	cb df       	rcall	.-106    	; 0x2434 <command>


	command(0x09);     // Extended function set (RE=1): 5-dot font, B/W inverting disabled (def. val.), 3/4 lines
    249e:	89 e0       	ldi	r24, 0x09	; 9
    24a0:	c9 df       	rcall	.-110    	; 0x2434 <command>

	command(0x06);        // Entry Mode set - COM/SEG direction: COM0->COM31, SEG99->SEG0 (BDC=1, BDS=0)
    24a2:	86 e0       	ldi	r24, 0x06	; 6
    24a4:	c7 df       	rcall	.-114    	; 0x2434 <command>
	command(0x72);        // Function selection B:
    24a6:	82 e7       	ldi	r24, 0x72	; 114
    24a8:	c5 df       	rcall	.-118    	; 0x2434 <command>
	data(0x0A);           //  ROM/CGRAM selection: ROM C, CGROM=250, CGRAM=6 (ROM=10, OPR=10)
    24aa:	8a e0       	ldi	r24, 0x0A	; 10
    24ac:	cb df       	rcall	.-106    	; 0x2444 <data>
	command(0x79);        // OLED characterization: OLED command set enabled (SD=1)
    24ae:	89 e7       	ldi	r24, 0x79	; 121
    24b0:	c1 df       	rcall	.-126    	; 0x2434 <command>
	command(0xDA);        // Set SEG pins hardware configuration:
    24b2:	8a ed       	ldi	r24, 0xDA	; 218
    24b4:	bf df       	rcall	.-130    	; 0x2434 <command>
	command(0x10);        //  alternative odd/even SEG pin, disable SEG left/right remap (default values)
    24b6:	80 e1       	ldi	r24, 0x10	; 16
    24b8:	bd df       	rcall	.-134    	; 0x2434 <command>
	command(0xDC);        // Function selection C:
    24ba:	8c ed       	ldi	r24, 0xDC	; 220
    24bc:	bb df       	rcall	.-138    	; 0x2434 <command>
	command(0x00);        //  internal VSL, GPIO input disable
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	b9 df       	rcall	.-142    	; 0x2434 <command>
	command(0x81);        // Set contrast control:
    24c2:	81 e8       	ldi	r24, 0x81	; 129
    24c4:	b7 df       	rcall	.-146    	; 0x2434 <command>
    24c6:	8f e7       	ldi	r24, 0x7F	; 127
	command(0x7F);        //  contrast=127 (default value)
    24c8:	b5 df       	rcall	.-150    	; 0x2434 <command>
    24ca:	89 ed       	ldi	r24, 0xD9	; 217
    24cc:	b3 df       	rcall	.-154    	; 0x2434 <command>
	command(0xD9);        // Set phase length:
    24ce:	81 ef       	ldi	r24, 0xF1	; 241
    24d0:	b1 df       	rcall	.-158    	; 0x2434 <command>
	command(0xF1);        //  phase2=15, phase1=1 (default: 0x78)
    24d2:	8b ed       	ldi	r24, 0xDB	; 219
    24d4:	af df       	rcall	.-162    	; 0x2434 <command>
    24d6:	80 e4       	ldi	r24, 0x40	; 64
	command(0xDB);        // Set VCOMH deselect level:
    24d8:	ad df       	rcall	.-166    	; 0x2434 <command>
    24da:	88 e7       	ldi	r24, 0x78	; 120
    24dc:	ab df       	rcall	.-170    	; 0x2434 <command>
	command(0x40);        //  VCOMH deselect level=1 x Vcc (default: 0x20=0,77 x Vcc)
    24de:	88 e2       	ldi	r24, 0x28	; 40
    24e0:	a9 df       	rcall	.-174    	; 0x2434 <command>
    24e2:	81 e0       	ldi	r24, 0x01	; 1
	command(0x78);        // OLED characterization: OLED command set disabled (SD=0) (exit from OLED command set)
    24e4:	a7 df       	rcall	.-178    	; 0x2434 <command>
    24e6:	8f e3       	ldi	r24, 0x3F	; 63
    24e8:	9f e1       	ldi	r25, 0x1F	; 31
	command(0x20 | rows); // Function set: fundamental command set (RE=0) (exit from extended command set), lines #
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <initScreen+0x96>
    24ee:	00 c0       	rjmp	.+0      	; 0x24f0 <initScreen+0x9c>
	command(0x01);        // Clear display
    24f0:	00 00       	nop
    24f2:	80 e8       	ldi	r24, 0x80	; 128
    24f4:	9f df       	rcall	.-194    	; 0x2434 <command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24f6:	8c e0       	ldi	r24, 0x0C	; 12
    24f8:	9d df       	rcall	.-198    	; 0x2434 <command>
    24fa:	9f ef       	ldi	r25, 0xFF	; 255
    24fc:	24 e3       	ldi	r18, 0x34	; 52
    24fe:	8c e0       	ldi	r24, 0x0C	; 12
    2500:	91 50       	subi	r25, 0x01	; 1
	_delay_ms(2);             // After a clear display, a minimum pause of 1-2 ms is required

	command(0x80);        // Set DDRAM address 0x00 in address counter (cursor home) (default value)
    2502:	20 40       	sbci	r18, 0x00	; 0
    2504:	80 40       	sbci	r24, 0x00	; 0
    2506:	e1 f7       	brne	.-8      	; 0x2500 <initScreen+0xac>
	command(0x0C);        // Display ON/OFF control: display ON, cursor off, blink off
    2508:	00 c0       	rjmp	.+0      	; 0x250a <initScreen+0xb6>
    250a:	00 00       	nop
    250c:	08 95       	ret

0000250e <outputS>:
    250e:	0f 93       	push	r16
    2510:	1f 93       	push	r17
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	8c 01       	movw	r16, r24
    2518:	fb 01       	movw	r30, r22
    251a:	ff 27       	eor	r31, r31
    251c:	e8 5f       	subi	r30, 0xF8	; 248
    251e:	fd 4f       	sbci	r31, 0xFD	; 253
    2520:	80 81       	ld	r24, Z
void outputS(char* lineIn, int row)
{
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
    2522:	88 df       	rcall	.-240    	; 0x2434 <command>
    2524:	e8 01       	movw	r28, r16
    2526:	0c 5e       	subi	r16, 0xEC	; 236
    2528:	1f 4f       	sbci	r17, 0xFF	; 255
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
	{
		data(lineIn[c]);
    252a:	89 91       	ld	r24, Y+
    252c:	8b df       	rcall	.-234    	; 0x2444 <data>
	uint8_t r = row;
	uint8_t c = 0;

	command(new_line[r]);
	//20, because our display is 20x4.
	for(c=0; c<20; c++)
    252e:	c0 17       	cp	r28, r16
    2530:	d1 07       	cpc	r29, r17
    2532:	d9 f7       	brne	.-10     	; 0x252a <outputS+0x1c>
	{
		data(lineIn[c]);
	}
}
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	1f 91       	pop	r17
    253a:	0f 91       	pop	r16
    253c:	08 95       	ret

0000253e <numPrinter>:

void numPrinter(char* charArray,uint8_t startingPos, uint8_t numCharacters, uint16_t inputNumber)
{
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	f9 01       	movw	r30, r18
	uint8_t tensPlace = 0;
	uint8_t hunderedsPlace = 0;
	uint8_t thousandsPlace = 0;
	uint8_t tenThousandsPlace = 0;

	switch(numCharacters)
    2544:	43 30       	cpi	r20, 0x03	; 3
    2546:	09 f4       	brne	.+2      	; 0x254a <numPrinter+0xc>
    2548:	54 c0       	rjmp	.+168    	; 0x25f2 <numPrinter+0xb4>
    254a:	28 f4       	brcc	.+10     	; 0x2556 <numPrinter+0x18>
    254c:	41 30       	cpi	r20, 0x01	; 1
    254e:	51 f0       	breq	.+20     	; 0x2564 <numPrinter+0x26>
    2550:	42 30       	cpi	r20, 0x02	; 2
    2552:	29 f1       	breq	.+74     	; 0x259e <numPrinter+0x60>
    2554:	b7 c1       	rjmp	.+878    	; 0x28c4 <numPrinter+0x386>
    2556:	44 30       	cpi	r20, 0x04	; 4
    2558:	09 f4       	brne	.+2      	; 0x255c <numPrinter+0x1e>
    255a:	95 c0       	rjmp	.+298    	; 0x2686 <numPrinter+0x148>
    255c:	45 30       	cpi	r20, 0x05	; 5
    255e:	09 f4       	brne	.+2      	; 0x2562 <numPrinter+0x24>
    2560:	0a c1       	rjmp	.+532    	; 0x2776 <numPrinter+0x238>
    2562:	b0 c1       	rjmp	.+864    	; 0x28c4 <numPrinter+0x386>
		case 0:
		break;

		case 1:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		charArray[startingPos] = onesPlace;
    2564:	ec 01       	movw	r28, r24
    2566:	c6 0f       	add	r28, r22
    2568:	d1 1d       	adc	r29, r1
    256a:	ad ec       	ldi	r26, 0xCD	; 205
    256c:	bc ec       	ldi	r27, 0xCC	; 204
    256e:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    2572:	96 95       	lsr	r25
    2574:	87 95       	ror	r24
    2576:	96 95       	lsr	r25
    2578:	87 95       	ror	r24
    257a:	96 95       	lsr	r25
    257c:	87 95       	ror	r24
    257e:	9c 01       	movw	r18, r24
    2580:	22 0f       	add	r18, r18
    2582:	33 1f       	adc	r19, r19
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	82 0f       	add	r24, r18
    2592:	93 1f       	adc	r25, r19
    2594:	e8 1b       	sub	r30, r24
    2596:	f9 0b       	sbc	r31, r25
    2598:	e0 5d       	subi	r30, 0xD0	; 208
    259a:	e8 83       	st	Y, r30
		break;
    259c:	93 c1       	rjmp	.+806    	; 0x28c4 <numPrinter+0x386>

		case 2:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = (inputNumber/10)+48;
		charArray[(startingPos+1)] = onesPlace;
    259e:	ec 01       	movw	r28, r24
    25a0:	c6 0f       	add	r28, r22
    25a2:	d1 1d       	adc	r29, r1
    25a4:	ad ec       	ldi	r26, 0xCD	; 205
    25a6:	bc ec       	ldi	r27, 0xCC	; 204
    25a8:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    25ac:	96 95       	lsr	r25
    25ae:	87 95       	ror	r24
    25b0:	96 95       	lsr	r25
    25b2:	87 95       	ror	r24
    25b4:	96 95       	lsr	r25
    25b6:	87 95       	ror	r24
    25b8:	9c 01       	movw	r18, r24
    25ba:	22 0f       	add	r18, r18
    25bc:	33 1f       	adc	r19, r19
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	82 0f       	add	r24, r18
    25cc:	93 1f       	adc	r25, r19
    25ce:	9f 01       	movw	r18, r30
    25d0:	28 1b       	sub	r18, r24
    25d2:	39 0b       	sbc	r19, r25
    25d4:	c9 01       	movw	r24, r18
    25d6:	80 5d       	subi	r24, 0xD0	; 208
    25d8:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tensPlace;
    25da:	9f 01       	movw	r18, r30
    25dc:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    25e0:	96 95       	lsr	r25
    25e2:	87 95       	ror	r24
    25e4:	96 95       	lsr	r25
    25e6:	87 95       	ror	r24
    25e8:	96 95       	lsr	r25
    25ea:	87 95       	ror	r24
    25ec:	80 5d       	subi	r24, 0xD0	; 208
    25ee:	88 83       	st	Y, r24
		break;
    25f0:	69 c1       	rjmp	.+722    	; 0x28c4 <numPrinter+0x386>

		case 3:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = (inputNumber/100)+48;
		charArray[(startingPos+2)] = onesPlace;
    25f2:	ec 01       	movw	r28, r24
    25f4:	c6 0f       	add	r28, r22
    25f6:	d1 1d       	adc	r29, r1
    25f8:	ad ec       	ldi	r26, 0xCD	; 205
    25fa:	bc ec       	ldi	r27, 0xCC	; 204
    25fc:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    2600:	96 95       	lsr	r25
    2602:	87 95       	ror	r24
    2604:	96 95       	lsr	r25
    2606:	87 95       	ror	r24
    2608:	96 95       	lsr	r25
    260a:	87 95       	ror	r24
    260c:	9c 01       	movw	r18, r24
    260e:	22 0f       	add	r18, r18
    2610:	33 1f       	adc	r19, r19
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	82 0f       	add	r24, r18
    2620:	93 1f       	adc	r25, r19
    2622:	9f 01       	movw	r18, r30
    2624:	28 1b       	sub	r18, r24
    2626:	39 0b       	sbc	r19, r25
    2628:	c9 01       	movw	r24, r18
    262a:	80 5d       	subi	r24, 0xD0	; 208
    262c:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = tensPlace;
    262e:	af 01       	movw	r20, r30
    2630:	56 95       	lsr	r21
    2632:	47 95       	ror	r20
    2634:	56 95       	lsr	r21
    2636:	47 95       	ror	r20
    2638:	9a 01       	movw	r18, r20
    263a:	ab e7       	ldi	r26, 0x7B	; 123
    263c:	b4 e1       	ldi	r27, 0x14	; 20
    263e:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    2642:	96 95       	lsr	r25
    2644:	87 95       	ror	r24
    2646:	64 e6       	ldi	r22, 0x64	; 100
    2648:	68 9f       	mul	r22, r24
    264a:	90 01       	movw	r18, r0
    264c:	69 9f       	mul	r22, r25
    264e:	30 0d       	add	r19, r0
    2650:	11 24       	eor	r1, r1
    2652:	cf 01       	movw	r24, r30
    2654:	82 1b       	sub	r24, r18
    2656:	93 0b       	sbc	r25, r19
    2658:	9c 01       	movw	r18, r24
    265a:	ad ec       	ldi	r26, 0xCD	; 205
    265c:	bc ec       	ldi	r27, 0xCC	; 204
    265e:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    2662:	96 95       	lsr	r25
    2664:	87 95       	ror	r24
    2666:	96 95       	lsr	r25
    2668:	87 95       	ror	r24
    266a:	96 95       	lsr	r25
    266c:	87 95       	ror	r24
    266e:	80 5d       	subi	r24, 0xD0	; 208
    2670:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = hunderedsPlace;
    2672:	9a 01       	movw	r18, r20
    2674:	ab e7       	ldi	r26, 0x7B	; 123
    2676:	b4 e1       	ldi	r27, 0x14	; 20
    2678:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    267c:	96 95       	lsr	r25
    267e:	87 95       	ror	r24
    2680:	80 5d       	subi	r24, 0xD0	; 208
    2682:	88 83       	st	Y, r24
		break;
    2684:	1f c1       	rjmp	.+574    	; 0x28c4 <numPrinter+0x386>
		case 4:
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = (inputNumber/1000)+48;
		charArray[(startingPos+3)] = onesPlace;
    2686:	ec 01       	movw	r28, r24
    2688:	c6 0f       	add	r28, r22
    268a:	d1 1d       	adc	r29, r1
    268c:	ad ec       	ldi	r26, 0xCD	; 205
    268e:	bc ec       	ldi	r27, 0xCC	; 204
    2690:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    2694:	96 95       	lsr	r25
    2696:	87 95       	ror	r24
    2698:	96 95       	lsr	r25
    269a:	87 95       	ror	r24
    269c:	96 95       	lsr	r25
    269e:	87 95       	ror	r24
    26a0:	9c 01       	movw	r18, r24
    26a2:	22 0f       	add	r18, r18
    26a4:	33 1f       	adc	r19, r19
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	82 0f       	add	r24, r18
    26b4:	93 1f       	adc	r25, r19
    26b6:	9f 01       	movw	r18, r30
    26b8:	28 1b       	sub	r18, r24
    26ba:	39 0b       	sbc	r19, r25
    26bc:	c9 01       	movw	r24, r18
    26be:	80 5d       	subi	r24, 0xD0	; 208
    26c0:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = tensPlace;
    26c2:	9f 01       	movw	r18, r30
    26c4:	36 95       	lsr	r19
    26c6:	27 95       	ror	r18
    26c8:	36 95       	lsr	r19
    26ca:	27 95       	ror	r18
    26cc:	ab e7       	ldi	r26, 0x7B	; 123
    26ce:	b4 e1       	ldi	r27, 0x14	; 20
    26d0:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    26d4:	96 95       	lsr	r25
    26d6:	87 95       	ror	r24
    26d8:	44 e6       	ldi	r20, 0x64	; 100
    26da:	48 9f       	mul	r20, r24
    26dc:	90 01       	movw	r18, r0
    26de:	49 9f       	mul	r20, r25
    26e0:	30 0d       	add	r19, r0
    26e2:	11 24       	eor	r1, r1
    26e4:	cf 01       	movw	r24, r30
    26e6:	82 1b       	sub	r24, r18
    26e8:	93 0b       	sbc	r25, r19
    26ea:	9c 01       	movw	r18, r24
    26ec:	ad ec       	ldi	r26, 0xCD	; 205
    26ee:	bc ec       	ldi	r27, 0xCC	; 204
    26f0:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    26f4:	96 95       	lsr	r25
    26f6:	87 95       	ror	r24
    26f8:	96 95       	lsr	r25
    26fa:	87 95       	ror	r24
    26fc:	96 95       	lsr	r25
    26fe:	87 95       	ror	r24
    2700:	80 5d       	subi	r24, 0xD0	; 208
    2702:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = hunderedsPlace;
    2704:	af 01       	movw	r20, r30
    2706:	56 95       	lsr	r21
    2708:	47 95       	ror	r20
    270a:	56 95       	lsr	r21
    270c:	47 95       	ror	r20
    270e:	56 95       	lsr	r21
    2710:	47 95       	ror	r20
    2712:	9a 01       	movw	r18, r20
    2714:	a5 ec       	ldi	r26, 0xC5	; 197
    2716:	b0 e2       	ldi	r27, 0x20	; 32
    2718:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    271c:	92 95       	swap	r25
    271e:	82 95       	swap	r24
    2720:	8f 70       	andi	r24, 0x0F	; 15
    2722:	89 27       	eor	r24, r25
    2724:	9f 70       	andi	r25, 0x0F	; 15
    2726:	89 27       	eor	r24, r25
    2728:	68 ee       	ldi	r22, 0xE8	; 232
    272a:	73 e0       	ldi	r23, 0x03	; 3
    272c:	86 9f       	mul	r24, r22
    272e:	90 01       	movw	r18, r0
    2730:	87 9f       	mul	r24, r23
    2732:	30 0d       	add	r19, r0
    2734:	96 9f       	mul	r25, r22
    2736:	30 0d       	add	r19, r0
    2738:	11 24       	eor	r1, r1
    273a:	cf 01       	movw	r24, r30
    273c:	82 1b       	sub	r24, r18
    273e:	93 0b       	sbc	r25, r19
    2740:	9c 01       	movw	r18, r24
    2742:	36 95       	lsr	r19
    2744:	27 95       	ror	r18
    2746:	36 95       	lsr	r19
    2748:	27 95       	ror	r18
    274a:	ab e7       	ldi	r26, 0x7B	; 123
    274c:	b4 e1       	ldi	r27, 0x14	; 20
    274e:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    2752:	96 95       	lsr	r25
    2754:	87 95       	ror	r24
    2756:	80 5d       	subi	r24, 0xD0	; 208
    2758:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = thousandsPlace;
    275a:	9a 01       	movw	r18, r20
    275c:	a5 ec       	ldi	r26, 0xC5	; 197
    275e:	b0 e2       	ldi	r27, 0x20	; 32
    2760:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    2764:	92 95       	swap	r25
    2766:	82 95       	swap	r24
    2768:	8f 70       	andi	r24, 0x0F	; 15
    276a:	89 27       	eor	r24, r25
    276c:	9f 70       	andi	r25, 0x0F	; 15
    276e:	89 27       	eor	r24, r25
    2770:	80 5d       	subi	r24, 0xD0	; 208
    2772:	88 83       	st	Y, r24
		break;
    2774:	a7 c0       	rjmp	.+334    	; 0x28c4 <numPrinter+0x386>
		onesPlace = (inputNumber%10)+48; //this should be a value between 1 and 10.
		tensPlace = ((inputNumber%100)/10)+48;
		hunderedsPlace = ((inputNumber%1000)/100)+48;
		thousandsPlace = ((inputNumber%10000)/1000)+48;
		tenThousandsPlace = (inputNumber/10000)+48;
		charArray[(startingPos+4)] = onesPlace;
    2776:	ec 01       	movw	r28, r24
    2778:	c6 0f       	add	r28, r22
    277a:	d1 1d       	adc	r29, r1
    277c:	ad ec       	ldi	r26, 0xCD	; 205
    277e:	bc ec       	ldi	r27, 0xCC	; 204
    2780:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    2784:	96 95       	lsr	r25
    2786:	87 95       	ror	r24
    2788:	96 95       	lsr	r25
    278a:	87 95       	ror	r24
    278c:	96 95       	lsr	r25
    278e:	87 95       	ror	r24
    2790:	9c 01       	movw	r18, r24
    2792:	22 0f       	add	r18, r18
    2794:	33 1f       	adc	r19, r19
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	82 0f       	add	r24, r18
    27a4:	93 1f       	adc	r25, r19
    27a6:	9f 01       	movw	r18, r30
    27a8:	28 1b       	sub	r18, r24
    27aa:	39 0b       	sbc	r19, r25
    27ac:	c9 01       	movw	r24, r18
    27ae:	80 5d       	subi	r24, 0xD0	; 208
    27b0:	8c 83       	std	Y+4, r24	; 0x04
		charArray[(startingPos+3)] = tensPlace;
    27b2:	9f 01       	movw	r18, r30
    27b4:	36 95       	lsr	r19
    27b6:	27 95       	ror	r18
    27b8:	36 95       	lsr	r19
    27ba:	27 95       	ror	r18
    27bc:	ab e7       	ldi	r26, 0x7B	; 123
    27be:	b4 e1       	ldi	r27, 0x14	; 20
    27c0:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    27c4:	96 95       	lsr	r25
    27c6:	87 95       	ror	r24
    27c8:	44 e6       	ldi	r20, 0x64	; 100
    27ca:	48 9f       	mul	r20, r24
    27cc:	90 01       	movw	r18, r0
    27ce:	49 9f       	mul	r20, r25
    27d0:	30 0d       	add	r19, r0
    27d2:	11 24       	eor	r1, r1
    27d4:	cf 01       	movw	r24, r30
    27d6:	82 1b       	sub	r24, r18
    27d8:	93 0b       	sbc	r25, r19
    27da:	9c 01       	movw	r18, r24
    27dc:	ad ec       	ldi	r26, 0xCD	; 205
    27de:	bc ec       	ldi	r27, 0xCC	; 204
    27e0:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    27e4:	96 95       	lsr	r25
    27e6:	87 95       	ror	r24
    27e8:	96 95       	lsr	r25
    27ea:	87 95       	ror	r24
    27ec:	96 95       	lsr	r25
    27ee:	87 95       	ror	r24
    27f0:	80 5d       	subi	r24, 0xD0	; 208
    27f2:	8b 83       	std	Y+3, r24	; 0x03
		charArray[(startingPos+2)] = hunderedsPlace;
    27f4:	9f 01       	movw	r18, r30
    27f6:	36 95       	lsr	r19
    27f8:	27 95       	ror	r18
    27fa:	36 95       	lsr	r19
    27fc:	27 95       	ror	r18
    27fe:	36 95       	lsr	r19
    2800:	27 95       	ror	r18
    2802:	a5 ec       	ldi	r26, 0xC5	; 197
    2804:	b0 e2       	ldi	r27, 0x20	; 32
    2806:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    280a:	92 95       	swap	r25
    280c:	82 95       	swap	r24
    280e:	8f 70       	andi	r24, 0x0F	; 15
    2810:	89 27       	eor	r24, r25
    2812:	9f 70       	andi	r25, 0x0F	; 15
    2814:	89 27       	eor	r24, r25
    2816:	48 ee       	ldi	r20, 0xE8	; 232
    2818:	53 e0       	ldi	r21, 0x03	; 3
    281a:	84 9f       	mul	r24, r20
    281c:	90 01       	movw	r18, r0
    281e:	85 9f       	mul	r24, r21
    2820:	30 0d       	add	r19, r0
    2822:	94 9f       	mul	r25, r20
    2824:	30 0d       	add	r19, r0
    2826:	11 24       	eor	r1, r1
    2828:	cf 01       	movw	r24, r30
    282a:	82 1b       	sub	r24, r18
    282c:	93 0b       	sbc	r25, r19
    282e:	9c 01       	movw	r18, r24
    2830:	36 95       	lsr	r19
    2832:	27 95       	ror	r18
    2834:	36 95       	lsr	r19
    2836:	27 95       	ror	r18
    2838:	ab e7       	ldi	r26, 0x7B	; 123
    283a:	b4 e1       	ldi	r27, 0x14	; 20
    283c:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    2840:	96 95       	lsr	r25
    2842:	87 95       	ror	r24
    2844:	80 5d       	subi	r24, 0xD0	; 208
    2846:	8a 83       	std	Y+2, r24	; 0x02
		charArray[(startingPos+1)] = thousandsPlace;
    2848:	af 01       	movw	r20, r30
    284a:	52 95       	swap	r21
    284c:	42 95       	swap	r20
    284e:	4f 70       	andi	r20, 0x0F	; 15
    2850:	45 27       	eor	r20, r21
    2852:	5f 70       	andi	r21, 0x0F	; 15
    2854:	45 27       	eor	r20, r21
    2856:	9a 01       	movw	r18, r20
    2858:	a7 e4       	ldi	r26, 0x47	; 71
    285a:	b3 e0       	ldi	r27, 0x03	; 3
    285c:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    2860:	96 95       	lsr	r25
    2862:	87 95       	ror	r24
    2864:	96 95       	lsr	r25
    2866:	87 95       	ror	r24
    2868:	96 95       	lsr	r25
    286a:	87 95       	ror	r24
    286c:	60 e1       	ldi	r22, 0x10	; 16
    286e:	77 e2       	ldi	r23, 0x27	; 39
    2870:	86 9f       	mul	r24, r22
    2872:	90 01       	movw	r18, r0
    2874:	87 9f       	mul	r24, r23
    2876:	30 0d       	add	r19, r0
    2878:	96 9f       	mul	r25, r22
    287a:	30 0d       	add	r19, r0
    287c:	11 24       	eor	r1, r1
    287e:	cf 01       	movw	r24, r30
    2880:	82 1b       	sub	r24, r18
    2882:	93 0b       	sbc	r25, r19
    2884:	9c 01       	movw	r18, r24
    2886:	36 95       	lsr	r19
    2888:	27 95       	ror	r18
    288a:	36 95       	lsr	r19
    288c:	27 95       	ror	r18
    288e:	36 95       	lsr	r19
    2890:	27 95       	ror	r18
    2892:	a5 ec       	ldi	r26, 0xC5	; 197
    2894:	b0 e2       	ldi	r27, 0x20	; 32
    2896:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    289a:	92 95       	swap	r25
    289c:	82 95       	swap	r24
    289e:	8f 70       	andi	r24, 0x0F	; 15
    28a0:	89 27       	eor	r24, r25
    28a2:	9f 70       	andi	r25, 0x0F	; 15
    28a4:	89 27       	eor	r24, r25
    28a6:	80 5d       	subi	r24, 0xD0	; 208
    28a8:	89 83       	std	Y+1, r24	; 0x01
		charArray[startingPos] = tenThousandsPlace;
    28aa:	9a 01       	movw	r18, r20
    28ac:	a7 e4       	ldi	r26, 0x47	; 71
    28ae:	b3 e0       	ldi	r27, 0x03	; 3
    28b0:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__umulhisi3>
    28b4:	96 95       	lsr	r25
    28b6:	87 95       	ror	r24
    28b8:	96 95       	lsr	r25
    28ba:	87 95       	ror	r24
    28bc:	96 95       	lsr	r25
    28be:	87 95       	ror	r24
    28c0:	80 5d       	subi	r24, 0xD0	; 208
    28c2:	88 83       	st	Y, r24
		break;

	}


}
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	08 95       	ret

000028ca <midiNotePrinter>:

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
    28ca:	9c 01       	movw	r18, r24
    28cc:	a6 2f       	mov	r26, r22
	char printSharp = 0;
	uint8_t valueSwitch = 0;
	//numbers will always go from B to C, and have 12 distinct values. 
	//we can get our number from this with division. 
	//midi note C0 starts at 12. So, we'll need to do some math there. 
	printNumber = (noteNumber/12)+47; 
    28ce:	eb ea       	ldi	r30, 0xAB	; 171
    28d0:	4e 9f       	mul	r20, r30
    28d2:	e1 2d       	mov	r30, r1
    28d4:	11 24       	eor	r1, r1
    28d6:	e6 95       	lsr	r30
    28d8:	e6 95       	lsr	r30
    28da:	e6 95       	lsr	r30
    28dc:	9f e2       	ldi	r25, 0x2F	; 47
    28de:	9e 0f       	add	r25, r30
	
	//theres a weird wrap around with note numbers here. Since there isn't really an easy math patern we can take advantage of. 
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
    28e0:	8e 2f       	mov	r24, r30
    28e2:	88 0f       	add	r24, r24
    28e4:	e8 0f       	add	r30, r24
    28e6:	ee 0f       	add	r30, r30
    28e8:	ee 0f       	add	r30, r30
    28ea:	4e 1b       	sub	r20, r30
    28ec:	50 e0       	ldi	r21, 0x00	; 0
    28ee:	4c 30       	cpi	r20, 0x0C	; 12
    28f0:	51 05       	cpc	r21, r1
    28f2:	58 f5       	brcc	.+86     	; 0x294a <midiNotePrinter+0x80>
    28f4:	fa 01       	movw	r30, r20
    28f6:	88 27       	eor	r24, r24
    28f8:	e8 51       	subi	r30, 0x18	; 24
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	8f 4f       	sbci	r24, 0xFF	; 255
    28fe:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__tablejump2__>
	{
		
		case 0:
		printLetter = 'C';
		printSharp = ' ';
    2902:	80 e2       	ldi	r24, 0x20	; 32
	valueSwitch = noteNumber%12; //this should give us a value between 0 and 11. 
	switch(valueSwitch)
	{
		
		case 0:
		printLetter = 'C';
    2904:	43 e4       	ldi	r20, 0x43	; 67
    2906:	23 c0       	rjmp	.+70     	; 0x294e <midiNotePrinter+0x84>
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
		printSharp = '#';
    2908:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'C';
		printSharp = ' ';
		break;
				
		case 1:
		printLetter = 'C';
    290a:	43 e4       	ldi	r20, 0x43	; 67
		printSharp = '#';
		break;
    290c:	20 c0       	rjmp	.+64     	; 0x294e <midiNotePrinter+0x84>
		
		case 2:
		printLetter = 'D';
		printSharp = ' ';
    290e:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'C';
		printSharp = '#';
		break;
		
		case 2:
		printLetter = 'D';
    2910:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = ' ';
		break;
    2912:	1d c0       	rjmp	.+58     	; 0x294e <midiNotePrinter+0x84>
		
		case 3:
		printLetter = 'D';
		printSharp = '#';
    2914:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'D';
		printSharp = ' ';
		break;
		
		case 3:
		printLetter = 'D';
    2916:	44 e4       	ldi	r20, 0x44	; 68
		printSharp = '#';
		break;
    2918:	1a c0       	rjmp	.+52     	; 0x294e <midiNotePrinter+0x84>
		
		case 4:
		printLetter = 'E';
		printSharp = ' ';
    291a:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'D';
		printSharp = '#';
		break;
		
		case 4:
		printLetter = 'E';
    291c:	45 e4       	ldi	r20, 0x45	; 69
		printSharp = ' ';
		break;
    291e:	17 c0       	rjmp	.+46     	; 0x294e <midiNotePrinter+0x84>
		
		case 5:
		printLetter = 'F';
		printSharp = ' ';
    2920:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'E';
		printSharp = ' ';
		break;
		
		case 5:
		printLetter = 'F';
    2922:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = ' ';
		break;
    2924:	14 c0       	rjmp	.+40     	; 0x294e <midiNotePrinter+0x84>
		
		case 6:
		printLetter = 'F';
		printSharp = '#';
    2926:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'F';
		printSharp = ' ';
		break;
		
		case 6:
		printLetter = 'F';
    2928:	46 e4       	ldi	r20, 0x46	; 70
		printSharp = '#';
		break;
    292a:	11 c0       	rjmp	.+34     	; 0x294e <midiNotePrinter+0x84>
		
		case 7:
		printLetter = 'G';
		printSharp = ' ';
    292c:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'F';
		printSharp = '#';
		break;
		
		case 7:
		printLetter = 'G';
    292e:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = ' ';
		break;
    2930:	0e c0       	rjmp	.+28     	; 0x294e <midiNotePrinter+0x84>
		
		case 8:
		printLetter = 'G';
		printSharp = '#';
    2932:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'G';
		printSharp = ' ';
		break;
		
		case 8:
		printLetter = 'G';
    2934:	47 e4       	ldi	r20, 0x47	; 71
		printSharp = '#';
		break;
    2936:	0b c0       	rjmp	.+22     	; 0x294e <midiNotePrinter+0x84>
		
		case 9:
		printLetter = 'A';
		printSharp = ' ';
    2938:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'G';
		printSharp = '#';
		break;
		
		case 9:
		printLetter = 'A';
    293a:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = ' ';
		break;
    293c:	08 c0       	rjmp	.+16     	; 0x294e <midiNotePrinter+0x84>
		
		case 10:
		printLetter = 'A';
		printSharp = '#';
    293e:	83 e2       	ldi	r24, 0x23	; 35
		printLetter = 'A';
		printSharp = ' ';
		break;
		
		case 10:
		printLetter = 'A';
    2940:	41 e4       	ldi	r20, 0x41	; 65
		printSharp = '#';
		break;
    2942:	05 c0       	rjmp	.+10     	; 0x294e <midiNotePrinter+0x84>
		
		case 11:
		printLetter = 'B';
		printSharp = ' ';
    2944:	80 e2       	ldi	r24, 0x20	; 32
		printLetter = 'A';
		printSharp = '#';
		break;
		
		case 11:
		printLetter = 'B';
    2946:	42 e4       	ldi	r20, 0x42	; 66
		printSharp = ' ';
		break;
    2948:	02 c0       	rjmp	.+4      	; 0x294e <midiNotePrinter+0x84>
void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
	char printNumber = 0;
	char printSharp = 0;
    294a:	80 e0       	ldi	r24, 0x00	; 0
}

void midiNotePrinter(char* charArray, uint8_t startingPosition, uint8_t noteNumber)
{
	//will take up 3 character spaces. 
	char printLetter = 0;
    294c:	40 e0       	ldi	r20, 0x00	; 0
		printLetter = 'B';
		printSharp = ' ';
		break;
		
	}
	charArray[startingPosition] = printLetter;
    294e:	f9 01       	movw	r30, r18
    2950:	ea 0f       	add	r30, r26
    2952:	f1 1d       	adc	r31, r1
    2954:	40 83       	st	Z, r20
	charArray[startingPosition+1]= printSharp;
    2956:	81 83       	std	Z+1, r24	; 0x01
	charArray[startingPosition+2]= printNumber;
    2958:	92 83       	std	Z+2, r25	; 0x02
    295a:	08 95       	ret

0000295c <initSequencer>:
//if a real-time sequencer is implemented, they will end up being the same thing.

void initSequencer()
{
	//here we need to setup our timer interrupt
	TCCR0A = (1 << WGM01); //set to clear on correct compare
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // set pre-scaler to 64
    2960:	93 e0       	ldi	r25, 0x03	; 3
    2962:	95 bd       	out	0x25, r25	; 37
	OCR0A = 25; // every 25 ticks will be 0.0001 seconds at this prescale.
    2964:	99 e1       	ldi	r25, 0x19	; 25
    2966:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A); // Enable OCR0A compare interrupt
    2968:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    296c:	08 95       	ret

0000296e <__vector_21>:
	//interrupts should now be good to go.
}

ISR(TIMER0_COMPA_vect)
{
    296e:	1f 92       	push	r1
    2970:	0f 92       	push	r0
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	0f 92       	push	r0
    2976:	11 24       	eor	r1, r1
    2978:	8f 93       	push	r24
    297a:	9f 93       	push	r25
	clockCounter++;
    297c:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <clockCounter>
    2980:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <clockCounter+0x1>
    2984:	01 96       	adiw	r24, 0x01	; 1
    2986:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <clockCounter+0x1>
    298a:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <clockCounter>
	//we don't want to do anything else here.
}
    298e:	9f 91       	pop	r25
    2990:	8f 91       	pop	r24
    2992:	0f 90       	pop	r0
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	0f 90       	pop	r0
    2998:	1f 90       	pop	r1
    299a:	18 95       	reti

0000299c <updateSequencer>:

void updateSequencer(Pattern sequencerPattern, Globals currentGlobals)
{
    299c:	ef 92       	push	r14
    299e:	ff 92       	push	r15
    29a0:	1f 93       	push	r17
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
	uint16_t BPMvar = 150000/(sequencerPattern.patternBPM);

	if(clockCounter>=BPMvar && currentGlobals.playState) //if playstate is on, play next note in sequence.
    29aa:	cf 52       	subi	r28, 0x2F	; 47
    29ac:	df 4f       	sbci	r29, 0xFF	; 255
    29ae:	28 81       	ld	r18, Y
    29b0:	39 81       	ldd	r19, Y+1	; 0x01
    29b2:	c1 5d       	subi	r28, 0xD1	; 209
    29b4:	d0 40       	sbci	r29, 0x00	; 0
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	50 e0       	ldi	r21, 0x00	; 0
    29ba:	60 ef       	ldi	r22, 0xF0	; 240
    29bc:	79 e4       	ldi	r23, 0x49	; 73
    29be:	82 e0       	ldi	r24, 0x02	; 2
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__divmodsi4>
    29c6:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <clockCounter>
    29ca:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <clockCounter+0x1>
    29ce:	82 17       	cp	r24, r18
    29d0:	93 07       	cpc	r25, r19
    29d2:	08 f4       	brcc	.+2      	; 0x29d6 <updateSequencer+0x3a>
    29d4:	43 c0       	rjmp	.+134    	; 0x2a5c <updateSequencer+0xc0>
    29d6:	c5 57       	subi	r28, 0x75	; 117
    29d8:	de 4f       	sbci	r29, 0xFE	; 254
    29da:	88 81       	ld	r24, Y
    29dc:	cb 58       	subi	r28, 0x8B	; 139
    29de:	d1 40       	sbci	r29, 0x01	; 1
    29e0:	88 23       	and	r24, r24
    29e2:	b1 f1       	breq	.+108    	; 0x2a50 <updateSequencer+0xb4>
	{
		//this will be where we play samples
		clockCounter=0; //clear before the loop, so we can continue counting while the sequencer plays notes.
    29e4:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <clockCounter+0x1>
    29e8:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <clockCounter>
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
    29ec:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <currentPlayStep>
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	ee 0f       	add	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	89 e0       	ldi	r24, 0x09	; 9
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	8c 0f       	add	r24, r28
    29fc:	9d 1f       	adc	r25, r29
    29fe:	e8 0f       	add	r30, r24
    2a00:	f9 1f       	adc	r31, r25
    2a02:	e5 50       	subi	r30, 0x05	; 5
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	e0 80       	ld	r14, Z
    2a08:	f1 80       	ldd	r15, Z+1	; 0x01
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    2a0a:	10 e0       	ldi	r17, 0x00	; 0
		{//we're going to loop through all of the possible tracks, and trigger them
			if((parseStep&1)==1)
    2a0c:	e0 fe       	sbrs	r14, 0
    2a0e:	07 c0       	rjmp	.+14     	; 0x2a1e <updateSequencer+0x82>
			{
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, &currentGlobals, sc);
    2a10:	41 2f       	mov	r20, r17
    2a12:	be 01       	movw	r22, r28
    2a14:	6c 57       	subi	r22, 0x7C	; 124
    2a16:	7e 4f       	sbci	r23, 0xFE	; 254
    2a18:	ce 01       	movw	r24, r28
    2a1a:	09 96       	adiw	r24, 0x09	; 9
    2a1c:	73 d1       	rcall	.+742    	; 0x2d04 <playTrack>
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
    2a1e:	f6 94       	lsr	r15
    2a20:	e7 94       	ror	r14
	if(clockCounter>=BPMvar && currentGlobals.playState) //if playstate is on, play next note in sequence.
	{
		//this will be where we play samples
		clockCounter=0; //clear before the loop, so we can continue counting while the sequencer plays notes.
		uint16_t parseStep = sequencerPattern.trackSequence[currentPlayStep];
		for (uint8_t sc=0; sc<16; sc++) //sequencer counter
    2a22:	1f 5f       	subi	r17, 0xFF	; 255
    2a24:	10 31       	cpi	r17, 0x10	; 16
    2a26:	91 f7       	brne	.-28     	; 0x2a0c <updateSequencer+0x70>
				//trackControl(sequencerPattern.trackSampleLSB[sc], sequencerPattern.trackSampleMSB[sc], sequencerPattern.trackOutputRoute[sc], sequencerPattern.trackPlayMode[sc]);
				playTrack(&sequencerPattern, &currentGlobals, sc);
			}
			parseStep = parseStep>>1; //shift bits down one to check the next slot in the sequence.
		}
		currentPlayStep = currentPlayStep+1;
    2a28:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <currentPlayStep>
    2a2c:	8f 5f       	subi	r24, 0xFF	; 255
    2a2e:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <currentPlayStep>
		if(currentPlayStep>(sequencerPattern.numSteps-1))
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	cd 52       	subi	r28, 0x2D	; 45
    2a36:	df 4f       	sbci	r29, 0xFF	; 255
    2a38:	28 81       	ld	r18, Y
    2a3a:	c3 5d       	subi	r28, 0xD3	; 211
    2a3c:	d0 40       	sbci	r29, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	21 50       	subi	r18, 0x01	; 1
    2a42:	31 09       	sbc	r19, r1
    2a44:	28 17       	cp	r18, r24
    2a46:	39 07       	cpc	r19, r25
    2a48:	4c f4       	brge	.+18     	; 0x2a5c <updateSequencer+0xc0>
		{
			currentPlayStep=0; // don't play more steps than are in the sequence.
    2a4a:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <currentPlayStep>
    2a4e:	06 c0       	rjmp	.+12     	; 0x2a5c <updateSequencer+0xc0>
		}
		
	}else if(clockCounter>=BPMvar && !currentGlobals.playState)
	{ currentPlayStep=0;
    2a50:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <currentPlayStep>
		clockCounter = 0;
    2a54:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <clockCounter+0x1>
    2a58:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <clockCounter>
	}
}
    2a5c:	df 91       	pop	r29
    2a5e:	cf 91       	pop	r28
    2a60:	1f 91       	pop	r17
    2a62:	ff 90       	pop	r15
    2a64:	ef 90       	pop	r14
    2a66:	08 95       	ret

00002a68 <__vector_27>:
char serial0Buffer[TX_BUFFER_SIZE];
int serialReadPos = 0;
int serialWritePos = 0;

ISR (USART0_TX_vect)
{
    2a68:	1f 92       	push	r1
    2a6a:	0f 92       	push	r0
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	0f 92       	push	r0
    2a70:	11 24       	eor	r1, r1
    2a72:	0b b6       	in	r0, 0x3b	; 59
    2a74:	0f 92       	push	r0
    2a76:	2f 93       	push	r18
    2a78:	3f 93       	push	r19
    2a7a:	8f 93       	push	r24
    2a7c:	9f 93       	push	r25
    2a7e:	ef 93       	push	r30
    2a80:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
    2a82:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <serialReadPos>
    2a86:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <serialReadPos+0x1>
    2a8a:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <serialWritePos>
    2a8e:	30 91 ca 03 	lds	r19, 0x03CA	; 0x8003ca <serialWritePos+0x1>
    2a92:	82 17       	cp	r24, r18
    2a94:	93 07       	cpc	r25, r19
    2a96:	c1 f0       	breq	.+48     	; 0x2ac8 <__vector_27+0x60>
	{
		UDR0 = serial0Buffer[serialReadPos];
    2a98:	fc 01       	movw	r30, r24
    2a9a:	ee 5a       	subi	r30, 0xAE	; 174
    2a9c:	f9 4f       	sbci	r31, 0xF9	; 249
    2a9e:	80 81       	ld	r24, Z
    2aa0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serialReadPos++;
    2aa4:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <serialReadPos>
    2aa8:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <serialReadPos+0x1>
    2aac:	01 96       	adiw	r24, 0x01	; 1

		if(serialReadPos >= TX_BUFFER_SIZE)
    2aae:	80 38       	cpi	r24, 0x80	; 128
    2ab0:	21 e0       	ldi	r18, 0x01	; 1
    2ab2:	92 07       	cpc	r25, r18
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <__vector_27+0x58>
ISR (USART0_TX_vect)
{
	if(serialReadPos != serialWritePos)
	{
		UDR0 = serial0Buffer[serialReadPos];
		serialReadPos++;
    2ab6:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <serialReadPos+0x1>
    2aba:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <serialReadPos>
    2abe:	04 c0       	rjmp	.+8      	; 0x2ac8 <__vector_27+0x60>

		if(serialReadPos >= TX_BUFFER_SIZE)
		{
			serialReadPos=0; //this seems wrong, I think we should be setting this to 0.
    2ac0:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <serialReadPos+0x1>
    2ac4:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <serialReadPos>
		}
	}
}
    2ac8:	ff 91       	pop	r31
    2aca:	ef 91       	pop	r30
    2acc:	9f 91       	pop	r25
    2ace:	8f 91       	pop	r24
    2ad0:	3f 91       	pop	r19
    2ad2:	2f 91       	pop	r18
    2ad4:	0f 90       	pop	r0
    2ad6:	0b be       	out	0x3b, r0	; 59
    2ad8:	0f 90       	pop	r0
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	0f 90       	pop	r0
    2ade:	1f 90       	pop	r1
    2ae0:	18 95       	reti

00002ae2 <appendSerial0>:

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
    2ae2:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <serialWritePos>
    2ae6:	30 91 ca 03 	lds	r19, 0x03CA	; 0x8003ca <serialWritePos+0x1>
    2aea:	f9 01       	movw	r30, r18
    2aec:	ee 5a       	subi	r30, 0xAE	; 174
    2aee:	f9 4f       	sbci	r31, 0xF9	; 249
    2af0:	80 83       	st	Z, r24
	serialWritePos++;
    2af2:	2f 5f       	subi	r18, 0xFF	; 255
    2af4:	3f 4f       	sbci	r19, 0xFF	; 255
	if(serialWritePos >= TX_BUFFER_SIZE)
    2af6:	20 38       	cpi	r18, 0x80	; 128
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	38 07       	cpc	r19, r24
    2afc:	2c f4       	brge	.+10     	; 0x2b08 <appendSerial0+0x26>
}

void appendSerial0(unsigned char c)
{
	serial0Buffer[serialWritePos] = c;
	serialWritePos++;
    2afe:	30 93 ca 03 	sts	0x03CA, r19	; 0x8003ca <serialWritePos+0x1>
    2b02:	20 93 c9 03 	sts	0x03C9, r18	; 0x8003c9 <serialWritePos>
    2b06:	08 95       	ret
	if(serialWritePos >= TX_BUFFER_SIZE)
	{
		serialWritePos = 0;
    2b08:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <serialWritePos+0x1>
    2b0c:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <serialWritePos>
    2b10:	08 95       	ret

00002b12 <serialWrite0>:
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2b1a:	66 23       	and	r22, r22
    2b1c:	69 f0       	breq	.+26     	; 0x2b38 <serialWrite0+0x26>
    2b1e:	ec 01       	movw	r28, r24
    2b20:	61 50       	subi	r22, 0x01	; 1
    2b22:	06 2f       	mov	r16, r22
    2b24:	10 e0       	ldi	r17, 0x00	; 0
    2b26:	0f 5f       	subi	r16, 0xFF	; 255
    2b28:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2a:	08 0f       	add	r16, r24
    2b2c:	19 1f       	adc	r17, r25
	{
		appendSerial0(c[i]);
    2b2e:	89 91       	ld	r24, Y+
    2b30:	d8 df       	rcall	.-80     	; 0x2ae2 <appendSerial0>
	}
}

void serialWrite0(unsigned char c[], uint8_t messageLength)
{
	for (uint8_t i = 0; i<messageLength; i++) //this may need to be 11
    2b32:	c0 17       	cp	r28, r16
    2b34:	d1 07       	cpc	r29, r17
    2b36:	d9 f7       	brne	.-10     	; 0x2b2e <serialWrite0+0x1c>
	{
		appendSerial0(c[i]);

	}

	if(UCSR0A & (1 << UDRE0))
    2b38:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2b3c:	85 fd       	sbrc	r24, 5
	{
		UDR0 = 0;
    2b3e:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
    2b42:	df 91       	pop	r29
    2b44:	cf 91       	pop	r28
    2b46:	1f 91       	pop	r17
    2b48:	0f 91       	pop	r16
    2b4a:	08 95       	ret

00002b4c <serialInit0>:

void serialInit0()
{
UBRR0H = (BRCTsunami >> 8);
    2b4c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
UBRR0L = BRCTsunami;
    2b50:	80 e1       	ldi	r24, 0x10	; 16
    2b52:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>


UCSR0B = (1 << TXEN0)  | (1 << TXCIE0);
    2b56:	88 e4       	ldi	r24, 0x48	; 72
    2b58:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 bit chars will be sent
    2b5c:	86 e0       	ldi	r24, 0x06	; 6
    2b5e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2b62:	08 95       	ret

00002b64 <initEnvelopes>:
		//this should be fine for now though. 
			//set track volume
			setTrackVolume(currentPattern->trackSampleLSB[i], currentPattern->trackSampleMSB[i], currentPattern->trackMainVolumeLSB[i], currentPattern->trackMainVolumeMSB[i]);
	}
	
}
    2b64:	88 e0       	ldi	r24, 0x08	; 8
    2b66:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    2b6a:	83 e0       	ldi	r24, 0x03	; 3
    2b6c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2b70:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2b74:	8a ef       	ldi	r24, 0xFA	; 250
    2b76:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    2b7a:	82 e0       	ldi	r24, 0x02	; 2
    2b7c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2b80:	08 95       	ret

00002b82 <trackControl>:
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	2a 97       	sbiw	r28, 0x0a	; 10
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	90 ef       	ldi	r25, 0xF0	; 240
    2b98:	99 83       	std	Y+1, r25	; 0x01
    2b9a:	9a ea       	ldi	r25, 0xAA	; 170
    2b9c:	9a 83       	std	Y+2, r25	; 0x02
    2b9e:	9a e0       	ldi	r25, 0x0A	; 10
    2ba0:	9b 83       	std	Y+3, r25	; 0x03
    2ba2:	93 e0       	ldi	r25, 0x03	; 3
    2ba4:	9c 83       	std	Y+4, r25	; 0x04
    2ba6:	2d 83       	std	Y+5, r18	; 0x05
    2ba8:	8e 83       	std	Y+6, r24	; 0x06
    2baa:	6f 83       	std	Y+7, r22	; 0x07
    2bac:	48 87       	std	Y+8, r20	; 0x08
    2bae:	19 86       	std	Y+9, r1	; 0x09
    2bb0:	85 e5       	ldi	r24, 0x55	; 85
    2bb2:	8a 87       	std	Y+10, r24	; 0x0a
    2bb4:	6a e0       	ldi	r22, 0x0A	; 10
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	ab df       	rcall	.-170    	; 0x2b12 <serialWrite0>
    2bbc:	2a 96       	adiw	r28, 0x0a	; 10
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	cd bf       	out	0x3d, r28	; 61
    2bc8:	df 91       	pop	r29
    2bca:	cf 91       	pop	r28
    2bcc:	08 95       	ret

00002bce <setOutputVolume>:
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	28 97       	sbiw	r28, 0x08	; 8
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	90 ef       	ldi	r25, 0xF0	; 240
    2be4:	99 83       	std	Y+1, r25	; 0x01
    2be6:	9a ea       	ldi	r25, 0xAA	; 170
    2be8:	9a 83       	std	Y+2, r25	; 0x02
    2bea:	98 e0       	ldi	r25, 0x08	; 8
    2bec:	9b 83       	std	Y+3, r25	; 0x03
    2bee:	95 e0       	ldi	r25, 0x05	; 5
    2bf0:	9c 83       	std	Y+4, r25	; 0x04
    2bf2:	4d 83       	std	Y+5, r20	; 0x05
    2bf4:	8e 83       	std	Y+6, r24	; 0x06
    2bf6:	6f 83       	std	Y+7, r22	; 0x07
    2bf8:	85 e5       	ldi	r24, 0x55	; 85
    2bfa:	88 87       	std	Y+8, r24	; 0x08
    2bfc:	68 e0       	ldi	r22, 0x08	; 8
    2bfe:	ce 01       	movw	r24, r28
    2c00:	01 96       	adiw	r24, 0x01	; 1
    2c02:	87 df       	rcall	.-242    	; 0x2b12 <serialWrite0>
    2c04:	28 96       	adiw	r28, 0x08	; 8
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	08 95       	ret

00002c16 <setTrackVolume>:
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	29 97       	sbiw	r28, 0x09	; 9
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	90 ef       	ldi	r25, 0xF0	; 240
    2c2c:	99 83       	std	Y+1, r25	; 0x01
    2c2e:	9a ea       	ldi	r25, 0xAA	; 170
    2c30:	9a 83       	std	Y+2, r25	; 0x02
    2c32:	99 e0       	ldi	r25, 0x09	; 9
    2c34:	9b 83       	std	Y+3, r25	; 0x03
    2c36:	98 e0       	ldi	r25, 0x08	; 8
    2c38:	9c 83       	std	Y+4, r25	; 0x04
    2c3a:	8d 83       	std	Y+5, r24	; 0x05
    2c3c:	6e 83       	std	Y+6, r22	; 0x06
    2c3e:	4f 83       	std	Y+7, r20	; 0x07
    2c40:	28 87       	std	Y+8, r18	; 0x08
    2c42:	85 e5       	ldi	r24, 0x55	; 85
    2c44:	89 87       	std	Y+9, r24	; 0x09
    2c46:	69 e0       	ldi	r22, 0x09	; 9
    2c48:	ce 01       	movw	r24, r28
    2c4a:	01 96       	adiw	r24, 0x01	; 1
    2c4c:	62 df       	rcall	.-316    	; 0x2b12 <serialWrite0>
    2c4e:	29 96       	adiw	r28, 0x09	; 9
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	08 95       	ret

00002c60 <setTrackFade>:
    2c60:	cf 92       	push	r12
    2c62:	ef 92       	push	r14
    2c64:	0f 93       	push	r16
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	2c 97       	sbiw	r28, 0x0c	; 12
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	de bf       	out	0x3e, r29	; 62
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	cd bf       	out	0x3d, r28	; 61
    2c7a:	90 ef       	ldi	r25, 0xF0	; 240
    2c7c:	99 83       	std	Y+1, r25	; 0x01
    2c7e:	9a ea       	ldi	r25, 0xAA	; 170
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	9c e0       	ldi	r25, 0x0C	; 12
    2c84:	9b 83       	std	Y+3, r25	; 0x03
    2c86:	9a e0       	ldi	r25, 0x0A	; 10
    2c88:	9c 83       	std	Y+4, r25	; 0x04
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
    2c8c:	6e 83       	std	Y+6, r22	; 0x06
    2c8e:	4f 83       	std	Y+7, r20	; 0x07
    2c90:	28 87       	std	Y+8, r18	; 0x08
    2c92:	09 87       	std	Y+9, r16	; 0x09
    2c94:	ea 86       	std	Y+10, r14	; 0x0a
    2c96:	cb 86       	std	Y+11, r12	; 0x0b
    2c98:	85 e5       	ldi	r24, 0x55	; 85
    2c9a:	8c 87       	std	Y+12, r24	; 0x0c
    2c9c:	6c e0       	ldi	r22, 0x0C	; 12
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	01 96       	adiw	r24, 0x01	; 1
    2ca2:	37 df       	rcall	.-402    	; 0x2b12 <serialWrite0>
    2ca4:	2c 96       	adiw	r28, 0x0c	; 12
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	0f 91       	pop	r16
    2cb6:	ef 90       	pop	r14
    2cb8:	cf 90       	pop	r12
    2cba:	08 95       	ret

00002cbc <outputSampleRate>:
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	28 97       	sbiw	r28, 0x08	; 8
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	90 ef       	ldi	r25, 0xF0	; 240
    2cd2:	99 83       	std	Y+1, r25	; 0x01
    2cd4:	9a ea       	ldi	r25, 0xAA	; 170
    2cd6:	9a 83       	std	Y+2, r25	; 0x02
    2cd8:	98 e0       	ldi	r25, 0x08	; 8
    2cda:	9b 83       	std	Y+3, r25	; 0x03
    2cdc:	9c e0       	ldi	r25, 0x0C	; 12
    2cde:	9c 83       	std	Y+4, r25	; 0x04
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
    2ce2:	6e 83       	std	Y+6, r22	; 0x06
    2ce4:	4f 83       	std	Y+7, r20	; 0x07
    2ce6:	85 e5       	ldi	r24, 0x55	; 85
    2ce8:	88 87       	std	Y+8, r24	; 0x08
    2cea:	68 e0       	ldi	r22, 0x08	; 8
    2cec:	ce 01       	movw	r24, r28
    2cee:	01 96       	adiw	r24, 0x01	; 1
    2cf0:	10 df       	rcall	.-480    	; 0x2b12 <serialWrite0>
    2cf2:	28 96       	adiw	r28, 0x08	; 8
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	08 95       	ret

00002d04 <playTrack>:
    2d04:	2f 92       	push	r2
    2d06:	3f 92       	push	r3
    2d08:	4f 92       	push	r4
    2d0a:	5f 92       	push	r5
    2d0c:	6f 92       	push	r6
    2d0e:	7f 92       	push	r7
    2d10:	8f 92       	push	r8
    2d12:	9f 92       	push	r9
    2d14:	af 92       	push	r10
    2d16:	bf 92       	push	r11
    2d18:	cf 92       	push	r12
    2d1a:	df 92       	push	r13
    2d1c:	ef 92       	push	r14
    2d1e:	ff 92       	push	r15
    2d20:	0f 93       	push	r16
    2d22:	1f 93       	push	r17
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	00 d0       	rcall	.+0      	; 0x2d2a <playTrack+0x26>
    2d2a:	1f 92       	push	r1
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	2b 01       	movw	r4, r22
    2d32:	d4 2e       	mov	r13, r20
    2d34:	a4 2e       	mov	r10, r20
    2d36:	b1 2c       	mov	r11, r1
    2d38:	9c 01       	movw	r18, r24
    2d3a:	2a 0d       	add	r18, r10
    2d3c:	3b 1d       	adc	r19, r11
    2d3e:	f9 01       	movw	r30, r18
    2d40:	e5 53       	subi	r30, 0x35	; 53
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	20 80       	ld	r2, Z
    2d46:	31 2c       	mov	r3, r1
    2d48:	32 2c       	mov	r3, r2
    2d4a:	22 24       	eor	r2, r2
    2d4c:	70 96       	adiw	r30, 0x10	; 16
    2d4e:	40 81       	ld	r20, Z
    2d50:	24 2a       	or	r2, r20
    2d52:	70 96       	adiw	r30, 0x10	; 16
    2d54:	20 81       	ld	r18, Z
    2d56:	21 30       	cpi	r18, 0x01	; 1
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <playTrack+0x58>
    2d5a:	78 c0       	rjmp	.+240    	; 0x2e4c <playTrack+0x148>
    2d5c:	38 f0       	brcs	.+14     	; 0x2d6c <playTrack+0x68>
    2d5e:	22 30       	cpi	r18, 0x02	; 2
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <playTrack+0x60>
    2d62:	b0 c0       	rjmp	.+352    	; 0x2ec4 <playTrack+0x1c0>
    2d64:	23 30       	cpi	r18, 0x03	; 3
    2d66:	09 f4       	brne	.+2      	; 0x2d6a <playTrack+0x66>
    2d68:	dc c0       	rjmp	.+440    	; 0x2f22 <playTrack+0x21e>
    2d6a:	ee c0       	rjmp	.+476    	; 0x2f48 <playTrack+0x244>
    2d6c:	9c 01       	movw	r18, r24
    2d6e:	2a 0d       	add	r18, r10
    2d70:	3b 1d       	adc	r19, r11
    2d72:	3c 83       	std	Y+4, r19	; 0x04
    2d74:	2b 83       	std	Y+3, r18	; 0x03
    2d76:	89 01       	movw	r16, r18
    2d78:	08 5a       	subi	r16, 0xA8	; 168
    2d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7c:	f8 01       	movw	r30, r16
    2d7e:	f0 81       	ld	r31, Z
    2d80:	f9 83       	std	Y+1, r31	; 0x01
    2d82:	79 01       	movw	r14, r18
    2d84:	28 e4       	ldi	r18, 0x48	; 72
    2d86:	e2 0e       	add	r14, r18
    2d88:	f1 1c       	adc	r15, r1
    2d8a:	f7 01       	movw	r30, r14
    2d8c:	f0 81       	ld	r31, Z
    2d8e:	fa 83       	std	Y+2, r31	; 0x02
    2d90:	eb 81       	ldd	r30, Y+3	; 0x03
    2d92:	fc 81       	ldd	r31, Y+4	; 0x04
    2d94:	e8 57       	subi	r30, 0x78	; 120
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	6b 80       	ldd	r6, Y+3	; 0x03
    2d9a:	7c 80       	ldd	r7, Y+4	; 0x04
    2d9c:	28 e9       	ldi	r18, 0x98	; 152
    2d9e:	62 0e       	add	r6, r18
    2da0:	71 1c       	adc	r7, r1
    2da2:	8b 80       	ldd	r8, Y+3	; 0x03
    2da4:	9c 80       	ldd	r9, Y+4	; 0x04
    2da6:	38 ea       	ldi	r19, 0xA8	; 168
    2da8:	83 0e       	add	r8, r19
    2daa:	91 1c       	adc	r9, r1
    2dac:	20 81       	ld	r18, Z
    2dae:	eb 81       	ldd	r30, Y+3	; 0x03
    2db0:	fc 81       	ldd	r31, Y+4	; 0x04
    2db2:	40 8d       	ldd	r20, Z+24	; 0x18
    2db4:	f3 01       	movw	r30, r6
    2db6:	60 81       	ld	r22, Z
    2db8:	f4 01       	movw	r30, r8
    2dba:	80 81       	ld	r24, Z
    2dbc:	e2 de       	rcall	.-572    	; 0x2b82 <trackControl>
    2dbe:	c1 2c       	mov	r12, r1
    2dc0:	f7 01       	movw	r30, r14
    2dc2:	e0 80       	ld	r14, Z
    2dc4:	f8 01       	movw	r30, r16
    2dc6:	00 81       	ld	r16, Z
    2dc8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dca:	fc 81       	ldd	r31, Y+4	; 0x04
    2dcc:	20 a5       	ldd	r18, Z+40	; 0x28
    2dce:	40 ad       	ldd	r20, Z+56	; 0x38
    2dd0:	f3 01       	movw	r30, r6
    2dd2:	60 81       	ld	r22, Z
    2dd4:	f4 01       	movw	r30, r8
    2dd6:	80 81       	ld	r24, Z
    2dd8:	43 df       	rcall	.-378    	; 0x2c60 <setTrackFade>
    2dda:	f2 01       	movw	r30, r4
    2ddc:	eb 55       	subi	r30, 0x5B	; 91
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <playTrack+0xe6>
    2de6:	88 0f       	add	r24, r24
    2de8:	99 1f       	adc	r25, r25
    2dea:	da 94       	dec	r13
    2dec:	e2 f7       	brpl	.-8      	; 0x2de6 <playTrack+0xe2>
    2dee:	20 81       	ld	r18, Z
    2df0:	31 81       	ldd	r19, Z+1	; 0x01
    2df2:	82 2b       	or	r24, r18
    2df4:	93 2b       	or	r25, r19
    2df6:	91 83       	std	Z+1, r25	; 0x01
    2df8:	80 83       	st	Z, r24
    2dfa:	95 01       	movw	r18, r10
    2dfc:	22 0f       	add	r18, r18
    2dfe:	33 1f       	adc	r19, r19
    2e00:	22 0f       	add	r18, r18
    2e02:	33 1f       	adc	r19, r19
    2e04:	24 0d       	add	r18, r4
    2e06:	35 1d       	adc	r19, r5
    2e08:	29 55       	subi	r18, 0x59	; 89
    2e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0c:	3c 83       	std	Y+4, r19	; 0x04
    2e0e:	2b 83       	std	Y+3, r18	; 0x03
    2e10:	39 81       	ldd	r19, Y+1	; 0x01
    2e12:	83 2f       	mov	r24, r19
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	ea 81       	ldd	r30, Y+2	; 0x02
    2e18:	9e 2b       	or	r25, r30
    2e1a:	a1 01       	movw	r20, r2
    2e1c:	60 e0       	ldi	r22, 0x00	; 0
    2e1e:	70 e0       	ldi	r23, 0x00	; 0
    2e20:	48 0f       	add	r20, r24
    2e22:	59 1f       	adc	r21, r25
    2e24:	61 1d       	adc	r22, r1
    2e26:	71 1d       	adc	r23, r1
    2e28:	f2 01       	movw	r30, r4
    2e2a:	ef 55       	subi	r30, 0x5F	; 95
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	80 81       	ld	r24, Z
    2e30:	91 81       	ldd	r25, Z+1	; 0x01
    2e32:	a2 81       	ldd	r26, Z+2	; 0x02
    2e34:	b3 81       	ldd	r27, Z+3	; 0x03
    2e36:	84 0f       	add	r24, r20
    2e38:	95 1f       	adc	r25, r21
    2e3a:	a6 1f       	adc	r26, r22
    2e3c:	b7 1f       	adc	r27, r23
    2e3e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e40:	fc 81       	ldd	r31, Y+4	; 0x04
    2e42:	80 83       	st	Z, r24
    2e44:	91 83       	std	Z+1, r25	; 0x01
    2e46:	a2 83       	std	Z+2, r26	; 0x02
    2e48:	b3 83       	std	Z+3, r27	; 0x03
    2e4a:	7e c0       	rjmp	.+252    	; 0x2f48 <playTrack+0x244>
    2e4c:	ac 01       	movw	r20, r24
    2e4e:	4a 0d       	add	r20, r10
    2e50:	5b 1d       	adc	r21, r11
    2e52:	ca 01       	movw	r24, r20
    2e54:	88 57       	subi	r24, 0x78	; 120
    2e56:	9f 4f       	sbci	r25, 0xFF	; 255
    2e58:	da 01       	movw	r26, r20
    2e5a:	a8 56       	subi	r26, 0x68	; 104
    2e5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5e:	8a 01       	movw	r16, r20
    2e60:	08 55       	subi	r16, 0x58	; 88
    2e62:	1f 4f       	sbci	r17, 0xFF	; 255
    2e64:	fc 01       	movw	r30, r24
    2e66:	20 81       	ld	r18, Z
    2e68:	fa 01       	movw	r30, r20
    2e6a:	40 8d       	ldd	r20, Z+24	; 0x18
    2e6c:	6c 91       	ld	r22, X
    2e6e:	f8 01       	movw	r30, r16
    2e70:	80 81       	ld	r24, Z
    2e72:	87 de       	rcall	.-754    	; 0x2b82 <trackControl>
    2e74:	f2 01       	movw	r30, r4
    2e76:	eb 55       	subi	r30, 0x5B	; 91
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <playTrack+0x180>
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	da 94       	dec	r13
    2e86:	e2 f7       	brpl	.-8      	; 0x2e80 <playTrack+0x17c>
    2e88:	20 81       	ld	r18, Z
    2e8a:	31 81       	ldd	r19, Z+1	; 0x01
    2e8c:	82 2b       	or	r24, r18
    2e8e:	93 2b       	or	r25, r19
    2e90:	91 83       	std	Z+1, r25	; 0x01
    2e92:	80 83       	st	Z, r24
    2e94:	95 01       	movw	r18, r10
    2e96:	22 0f       	add	r18, r18
    2e98:	33 1f       	adc	r19, r19
    2e9a:	22 0f       	add	r18, r18
    2e9c:	33 1f       	adc	r19, r19
    2e9e:	24 0d       	add	r18, r4
    2ea0:	35 1d       	adc	r19, r5
    2ea2:	29 55       	subi	r18, 0x59	; 89
    2ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea6:	34 97       	sbiw	r30, 0x04	; 4
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	a2 81       	ldd	r26, Z+2	; 0x02
    2eae:	b3 81       	ldd	r27, Z+3	; 0x03
    2eb0:	82 0d       	add	r24, r2
    2eb2:	93 1d       	adc	r25, r3
    2eb4:	a1 1d       	adc	r26, r1
    2eb6:	b1 1d       	adc	r27, r1
    2eb8:	f9 01       	movw	r30, r18
    2eba:	80 83       	st	Z, r24
    2ebc:	91 83       	std	Z+1, r25	; 0x01
    2ebe:	a2 83       	std	Z+2, r26	; 0x02
    2ec0:	b3 83       	std	Z+3, r27	; 0x03
    2ec2:	42 c0       	rjmp	.+132    	; 0x2f48 <playTrack+0x244>
    2ec4:	9c 01       	movw	r18, r24
    2ec6:	2a 0d       	add	r18, r10
    2ec8:	3b 1d       	adc	r19, r11
    2eca:	3c 83       	std	Y+4, r19	; 0x04
    2ecc:	2b 83       	std	Y+3, r18	; 0x03
    2ece:	f9 01       	movw	r30, r18
    2ed0:	e8 57       	subi	r30, 0x78	; 120
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	49 01       	movw	r8, r18
    2ed6:	38 e9       	ldi	r19, 0x98	; 152
    2ed8:	83 0e       	add	r8, r19
    2eda:	91 1c       	adc	r9, r1
    2edc:	ab 80       	ldd	r10, Y+3	; 0x03
    2ede:	bc 80       	ldd	r11, Y+4	; 0x04
    2ee0:	88 ea       	ldi	r24, 0xA8	; 168
    2ee2:	a8 0e       	add	r10, r24
    2ee4:	b1 1c       	adc	r11, r1
    2ee6:	20 81       	ld	r18, Z
    2ee8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eea:	fc 81       	ldd	r31, Y+4	; 0x04
    2eec:	40 8d       	ldd	r20, Z+24	; 0x18
    2eee:	f4 01       	movw	r30, r8
    2ef0:	60 81       	ld	r22, Z
    2ef2:	f5 01       	movw	r30, r10
    2ef4:	80 81       	ld	r24, Z
    2ef6:	45 de       	rcall	.-886    	; 0x2b82 <trackControl>
    2ef8:	ab 81       	ldd	r26, Y+3	; 0x03
    2efa:	bc 81       	ldd	r27, Y+4	; 0x04
    2efc:	a8 5b       	subi	r26, 0xB8	; 184
    2efe:	bf 4f       	sbci	r27, 0xFF	; 255
    2f00:	eb 81       	ldd	r30, Y+3	; 0x03
    2f02:	fc 81       	ldd	r31, Y+4	; 0x04
    2f04:	e8 5a       	subi	r30, 0xA8	; 168
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	c1 2c       	mov	r12, r1
    2f0a:	ec 90       	ld	r14, X
    2f0c:	00 81       	ld	r16, Z
    2f0e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f10:	fc 81       	ldd	r31, Y+4	; 0x04
    2f12:	20 a5       	ldd	r18, Z+40	; 0x28
    2f14:	40 ad       	ldd	r20, Z+56	; 0x38
    2f16:	f4 01       	movw	r30, r8
    2f18:	60 81       	ld	r22, Z
    2f1a:	f5 01       	movw	r30, r10
    2f1c:	80 81       	ld	r24, Z
    2f1e:	a0 de       	rcall	.-704    	; 0x2c60 <setTrackFade>
    2f20:	13 c0       	rjmp	.+38     	; 0x2f48 <playTrack+0x244>
    2f22:	a8 0e       	add	r10, r24
    2f24:	b9 1e       	adc	r11, r25
    2f26:	c5 01       	movw	r24, r10
    2f28:	88 57       	subi	r24, 0x78	; 120
    2f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2c:	d5 01       	movw	r26, r10
    2f2e:	a8 56       	subi	r26, 0x68	; 104
    2f30:	bf 4f       	sbci	r27, 0xFF	; 255
    2f32:	85 01       	movw	r16, r10
    2f34:	08 55       	subi	r16, 0x58	; 88
    2f36:	1f 4f       	sbci	r17, 0xFF	; 255
    2f38:	fc 01       	movw	r30, r24
    2f3a:	20 81       	ld	r18, Z
    2f3c:	f5 01       	movw	r30, r10
    2f3e:	40 8d       	ldd	r20, Z+24	; 0x18
    2f40:	6c 91       	ld	r22, X
    2f42:	f8 01       	movw	r30, r16
    2f44:	80 81       	ld	r24, Z
    2f46:	1d de       	rcall	.-966    	; 0x2b82 <trackControl>
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	1f 91       	pop	r17
    2f56:	0f 91       	pop	r16
    2f58:	ff 90       	pop	r15
    2f5a:	ef 90       	pop	r14
    2f5c:	df 90       	pop	r13
    2f5e:	cf 90       	pop	r12
    2f60:	bf 90       	pop	r11
    2f62:	af 90       	pop	r10
    2f64:	9f 90       	pop	r9
    2f66:	8f 90       	pop	r8
    2f68:	7f 90       	pop	r7
    2f6a:	6f 90       	pop	r6
    2f6c:	5f 90       	pop	r5
    2f6e:	4f 90       	pop	r4
    2f70:	3f 90       	pop	r3
    2f72:	2f 90       	pop	r2
    2f74:	08 95       	ret

00002f76 <releaseUpdate>:

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
    2f76:	4f 92       	push	r4
    2f78:	5f 92       	push	r5
    2f7a:	6f 92       	push	r6
    2f7c:	7f 92       	push	r7
    2f7e:	8f 92       	push	r8
    2f80:	9f 92       	push	r9
    2f82:	af 92       	push	r10
    2f84:	bf 92       	push	r11
    2f86:	cf 92       	push	r12
    2f88:	ef 92       	push	r14
    2f8a:	0f 93       	push	r16
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
    2f90:	fb 01       	movw	r30, r22
    2f92:	eb 55       	subi	r30, 0x5B	; 91
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	80 80       	ld	r8, Z
    2f98:	91 80       	ldd	r9, Z+1	; 0x01
    2f9a:	eb 01       	movw	r28, r22
    2f9c:	c9 55       	subi	r28, 0x59	; 89
    2f9e:	df 4f       	sbci	r29, 0xFF	; 255
    2fa0:	88 58       	subi	r24, 0x88	; 136
    2fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa4:	5c 01       	movw	r10, r24
    2fa6:	3b 01       	movw	r6, r22
    2fa8:	87 ee       	ldi	r24, 0xE7	; 231
    2faa:	68 0e       	add	r6, r24
    2fac:	71 1c       	adc	r7, r1
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    2fae:	e1 e0       	ldi	r30, 0x01	; 1
    2fb0:	8e 22       	and	r8, r30
    2fb2:	99 24       	eor	r9, r9
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])>=(currentGlobals->releaseCounter))
    2fb4:	2b 01       	movw	r4, r22
    2fb6:	f1 ea       	ldi	r31, 0xA1	; 161
    2fb8:	4f 0e       	add	r4, r31
    2fba:	51 1c       	adc	r5, r1
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
	{//check every track, if there is a 1 in release counter, we check math. 
		if(releaseTrackerParse&1) //if the first bit in the counter is a 1, we check for release times. 
    2fbc:	81 14       	cp	r8, r1
    2fbe:	91 04       	cpc	r9, r1
    2fc0:	d1 f0       	breq	.+52     	; 0x2ff6 <releaseUpdate+0x80>
		//we could role this into one if statement, but I'm not sure that would be more efficient. Here we're using the release tracker as sort of an initial buffer. 
		{
			if((currentGlobals->sustainCounterArray[i])>=(currentGlobals->releaseCounter))
    2fc2:	48 81       	ld	r20, Y
    2fc4:	59 81       	ldd	r21, Y+1	; 0x01
    2fc6:	6a 81       	ldd	r22, Y+2	; 0x02
    2fc8:	7b 81       	ldd	r23, Y+3	; 0x03
    2fca:	f2 01       	movw	r30, r4
    2fcc:	80 81       	ld	r24, Z
    2fce:	91 81       	ldd	r25, Z+1	; 0x01
    2fd0:	a2 81       	ldd	r26, Z+2	; 0x02
    2fd2:	b3 81       	ldd	r27, Z+3	; 0x03
    2fd4:	48 17       	cp	r20, r24
    2fd6:	59 07       	cpc	r21, r25
    2fd8:	6a 07       	cpc	r22, r26
    2fda:	7b 07       	cpc	r23, r27
    2fdc:	60 f0       	brcs	.+24     	; 0x2ff6 <releaseUpdate+0x80>
			{
				//we need to do the release state here.
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],255,186,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
    2fde:	cc 24       	eor	r12, r12
    2fe0:	c3 94       	inc	r12
    2fe2:	f5 01       	movw	r30, r10
    2fe4:	70 97       	sbiw	r30, 0x10	; 16
    2fe6:	e0 80       	ld	r14, Z
    2fe8:	f5 01       	movw	r30, r10
    2fea:	00 81       	ld	r16, Z
    2fec:	2a eb       	ldi	r18, 0xBA	; 186
    2fee:	4f ef       	ldi	r20, 0xFF	; 255
    2ff0:	60 a1       	ldd	r22, Z+32	; 0x20
    2ff2:	80 a9       	ldd	r24, Z+48	; 0x30
    2ff4:	35 de       	rcall	.-918    	; 0x2c60 <setTrackFade>
    2ff6:	24 96       	adiw	r28, 0x04	; 4
    2ff8:	ff ef       	ldi	r31, 0xFF	; 255
    2ffa:	af 1a       	sub	r10, r31
    2ffc:	bf 0a       	sbc	r11, r31

void releaseUpdate(Pattern *currentPattern, Globals *currentGlobals)
{
	uint16_t releaseTrackerParse = currentGlobals->releaseTracker;	
	
	for(int i = 0; i<16; i++)
    2ffe:	c6 15       	cp	r28, r6
    3000:	d7 05       	cpc	r29, r7
    3002:	e1 f6       	brne	.-72     	; 0x2fbc <releaseUpdate+0x46>
				setTrackFade(currentPattern->trackSampleLSB[i],currentPattern->trackSampleMSB[i],255,186,currentPattern->trackReleaseTimeLSB[i],currentPattern->trackReleaseTimeMSB[i],1);
			} //1 makes the stop flag active, so sample will end after the release envelope is done triggering. 
		}
	}
	
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	0f 91       	pop	r16
    300a:	ef 90       	pop	r14
    300c:	cf 90       	pop	r12
    300e:	bf 90       	pop	r11
    3010:	af 90       	pop	r10
    3012:	9f 90       	pop	r9
    3014:	8f 90       	pop	r8
    3016:	7f 90       	pop	r7
    3018:	6f 90       	pop	r6
    301a:	5f 90       	pop	r5
    301c:	4f 90       	pop	r4
    301e:	08 95       	ret

00003020 <twi_init>:
		}

		returnNum=twi_readNak();

	return returnNum;
}
    3020:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3024:	88 e4       	ldi	r24, 0x48	; 72
    3026:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    302a:	08 95       	ret

0000302c <twi_start>:
    302c:	94 ea       	ldi	r25, 0xA4	; 164
    302e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3032:	ec eb       	ldi	r30, 0xBC	; 188
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	90 81       	ld	r25, Z
    3038:	99 23       	and	r25, r25
    303a:	ec f7       	brge	.-6      	; 0x3036 <twi_start+0xa>
    303c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3040:	98 7f       	andi	r25, 0xF8	; 248
    3042:	98 30       	cpi	r25, 0x08	; 8
    3044:	11 f0       	breq	.+4      	; 0x304a <twi_start+0x1e>
    3046:	90 31       	cpi	r25, 0x10	; 16
    3048:	a1 f4       	brne	.+40     	; 0x3072 <twi_start+0x46>
    304a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    304e:	84 e8       	ldi	r24, 0x84	; 132
    3050:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3054:	ec eb       	ldi	r30, 0xBC	; 188
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	88 23       	and	r24, r24
    305c:	ec f7       	brge	.-6      	; 0x3058 <twi_start+0x2c>
    305e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3062:	98 7f       	andi	r25, 0xF8	; 248
    3064:	98 31       	cpi	r25, 0x18	; 24
    3066:	39 f0       	breq	.+14     	; 0x3076 <twi_start+0x4a>
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 34       	cpi	r25, 0x40	; 64
    306c:	29 f4       	brne	.+10     	; 0x3078 <twi_start+0x4c>
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	08 95       	ret
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	08 95       	ret
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	08 95       	ret

0000307a <twi_stop>:
    307a:	84 e9       	ldi	r24, 0x94	; 148
    307c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3080:	ec eb       	ldi	r30, 0xBC	; 188
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
    3086:	84 fd       	sbrc	r24, 4
    3088:	fd cf       	rjmp	.-6      	; 0x3084 <twi_stop+0xa>
    308a:	08 95       	ret

0000308c <twi_write>:
    308c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3090:	84 e8       	ldi	r24, 0x84	; 132
    3092:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3096:	ec eb       	ldi	r30, 0xBC	; 188
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	88 23       	and	r24, r24
    309e:	ec f7       	brge	.-6      	; 0x309a <twi_write+0xe>
    30a0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    30a4:	98 7f       	andi	r25, 0xF8	; 248
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	98 32       	cpi	r25, 0x28	; 40
    30aa:	09 f4       	brne	.+2      	; 0x30ae <twi_write+0x22>
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	08 95       	ret

000030b0 <twi_readAck>:
    30b0:	84 ec       	ldi	r24, 0xC4	; 196
    30b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    30b6:	ec eb       	ldi	r30, 0xBC	; 188
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
    30bc:	88 23       	and	r24, r24
    30be:	ec f7       	brge	.-6      	; 0x30ba <twi_readAck+0xa>
    30c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    30c4:	08 95       	ret

000030c6 <twi_readNak>:
    30c6:	84 e8       	ldi	r24, 0x84	; 132
    30c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    30cc:	ec eb       	ldi	r30, 0xBC	; 188
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	88 23       	and	r24, r24
    30d4:	ec f7       	brge	.-6      	; 0x30d0 <twi_readNak+0xa>
    30d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    30da:	08 95       	ret

000030dc <eepromSavePattern>:
    30dc:	4f 92       	push	r4
    30de:	5f 92       	push	r5
    30e0:	6f 92       	push	r6
    30e2:	7f 92       	push	r7
    30e4:	8f 92       	push	r8
    30e6:	9f 92       	push	r9
    30e8:	af 92       	push	r10
    30ea:	bf 92       	push	r11
    30ec:	cf 92       	push	r12
    30ee:	df 92       	push	r13
    30f0:	ef 92       	push	r14
    30f2:	ff 92       	push	r15
    30f4:	0f 93       	push	r16
    30f6:	1f 93       	push	r17
    30f8:	cf 93       	push	r28
    30fa:	df 93       	push	r29
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	c4 59       	subi	r28, 0x94	; 148
    3102:	d1 09       	sbc	r29, r1
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	cd 5d       	subi	r28, 0xDD	; 221
    3110:	dd 4f       	sbci	r29, 0xFD	; 253
    3112:	48 81       	ld	r20, Y
    3114:	c3 52       	subi	r28, 0x23	; 35
    3116:	d2 40       	sbci	r29, 0x02	; 2
    3118:	c0 59       	subi	r28, 0x90	; 144
    311a:	de 4f       	sbci	r29, 0xFE	; 254
    311c:	88 81       	ld	r24, Y
    311e:	c0 57       	subi	r28, 0x70	; 112
    3120:	d1 40       	sbci	r29, 0x01	; 1
    3122:	cf 58       	subi	r28, 0x8F	; 143
    3124:	de 4f       	sbci	r29, 0xFE	; 254
    3126:	98 81       	ld	r25, Y
    3128:	c1 57       	subi	r28, 0x71	; 113
    312a:	d1 40       	sbci	r29, 0x01	; 1
    312c:	24 2f       	mov	r18, r20
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	44 23       	and	r20, r20
    3132:	8c f0       	brlt	.+34     	; 0x3156 <eepromSavePattern+0x7a>
    3134:	21 50       	subi	r18, 0x01	; 1
    3136:	31 09       	sbc	r19, r1
    3138:	39 01       	movw	r6, r18
    313a:	66 0c       	add	r6, r6
    313c:	77 1c       	adc	r7, r7
    313e:	62 0e       	add	r6, r18
    3140:	73 1e       	adc	r7, r19
    3142:	76 94       	lsr	r7
    3144:	76 2c       	mov	r7, r6
    3146:	66 24       	eor	r6, r6
    3148:	77 94       	ror	r7
    314a:	67 94       	ror	r6
    314c:	0f 2e       	mov	r0, r31
    314e:	f0 ea       	ldi	r31, 0xA0	; 160
    3150:	5f 2e       	mov	r5, r31
    3152:	f0 2d       	mov	r31, r0
    3154:	11 c0       	rjmp	.+34     	; 0x3178 <eepromSavePattern+0x9c>
    3156:	20 58       	subi	r18, 0x80	; 128
    3158:	31 09       	sbc	r19, r1
    315a:	39 01       	movw	r6, r18
    315c:	66 0c       	add	r6, r6
    315e:	77 1c       	adc	r7, r7
    3160:	26 0d       	add	r18, r6
    3162:	37 1d       	adc	r19, r7
    3164:	39 01       	movw	r6, r18
    3166:	76 94       	lsr	r7
    3168:	76 2c       	mov	r7, r6
    316a:	66 24       	eor	r6, r6
    316c:	77 94       	ror	r7
    316e:	67 94       	ror	r6
    3170:	0f 2e       	mov	r0, r31
    3172:	f8 ea       	ldi	r31, 0xA8	; 168
    3174:	5f 2e       	mov	r5, r31
    3176:	f0 2d       	mov	r31, r0
    3178:	be 01       	movw	r22, r28
    317a:	68 55       	subi	r22, 0x58	; 88
    317c:	7f 4f       	sbci	r23, 0xFF	; 255
    317e:	8e 01       	movw	r16, r28
    3180:	0f 5f       	subi	r16, 0xFF	; 255
    3182:	1f 4f       	sbci	r17, 0xFF	; 255
    3184:	fe 01       	movw	r30, r28
    3186:	e0 55       	subi	r30, 0x50	; 80
    3188:	ff 4f       	sbci	r31, 0xFF	; 255
    318a:	98 01       	movw	r18, r16
    318c:	db 01       	movw	r26, r22
    318e:	4d 91       	ld	r20, X+
    3190:	bd 01       	movw	r22, r26
    3192:	d9 01       	movw	r26, r18
    3194:	4d 93       	st	X+, r20
    3196:	9d 01       	movw	r18, r26
    3198:	6e 17       	cp	r22, r30
    319a:	7f 07       	cpc	r23, r31
    319c:	b9 f7       	brne	.-18     	; 0x318c <eepromSavePattern+0xb0>
    319e:	de 01       	movw	r26, r28
    31a0:	19 96       	adiw	r26, 0x09	; 9
    31a2:	9e 01       	movw	r18, r28
    31a4:	28 54       	subi	r18, 0x48	; 72
    31a6:	3f 4f       	sbci	r19, 0xFF	; 255
    31a8:	41 91       	ld	r20, Z+
    31aa:	4d 93       	st	X+, r20
    31ac:	e2 17       	cp	r30, r18
    31ae:	f3 07       	cpc	r31, r19
    31b0:	d9 f7       	brne	.-10     	; 0x31a8 <eepromSavePattern+0xcc>
    31b2:	4e 01       	movw	r8, r28
    31b4:	b1 e1       	ldi	r27, 0x11	; 17
    31b6:	8b 0e       	add	r8, r27
    31b8:	91 1c       	adc	r9, r1
    31ba:	7e 01       	movw	r14, r28
    31bc:	e0 ec       	ldi	r30, 0xC0	; 192
    31be:	ee 0e       	add	r14, r30
    31c0:	f1 1c       	adc	r15, r1
    31c2:	d4 01       	movw	r26, r8
    31c4:	f9 01       	movw	r30, r18
    31c6:	41 91       	ld	r20, Z+
    31c8:	9f 01       	movw	r18, r30
    31ca:	4d 93       	st	X+, r20
    31cc:	ee 15       	cp	r30, r14
    31ce:	ff 05       	cpc	r31, r15
    31d0:	c9 f7       	brne	.-14     	; 0x31c4 <eepromSavePattern+0xe8>
    31d2:	9e 01       	movw	r18, r28
    31d4:	27 5e       	subi	r18, 0xE7	; 231
    31d6:	3f 4f       	sbci	r19, 0xFF	; 255
    31d8:	be 01       	movw	r22, r28
    31da:	60 53       	subi	r22, 0x30	; 48
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	d7 01       	movw	r26, r14
    31e0:	4d 91       	ld	r20, X+
    31e2:	7d 01       	movw	r14, r26
    31e4:	f9 01       	movw	r30, r18
    31e6:	41 93       	st	Z+, r20
    31e8:	9f 01       	movw	r18, r30
    31ea:	a6 17       	cp	r26, r22
    31ec:	b7 07       	cpc	r27, r23
    31ee:	b9 f7       	brne	.-18     	; 0x31de <eepromSavePattern+0x102>
    31f0:	9e 01       	movw	r18, r28
    31f2:	27 5d       	subi	r18, 0xD7	; 215
    31f4:	3f 4f       	sbci	r19, 0xFF	; 255
    31f6:	de 01       	movw	r26, r28
    31f8:	a0 52       	subi	r26, 0x20	; 32
    31fa:	bf 4f       	sbci	r27, 0xFF	; 255
    31fc:	fb 01       	movw	r30, r22
    31fe:	41 91       	ld	r20, Z+
    3200:	bf 01       	movw	r22, r30
    3202:	f9 01       	movw	r30, r18
    3204:	41 93       	st	Z+, r20
    3206:	9f 01       	movw	r18, r30
    3208:	6a 17       	cp	r22, r26
    320a:	7b 07       	cpc	r23, r27
    320c:	b9 f7       	brne	.-18     	; 0x31fc <eepromSavePattern+0x120>
    320e:	9e 01       	movw	r18, r28
    3210:	27 5c       	subi	r18, 0xC7	; 199
    3212:	3f 4f       	sbci	r19, 0xFF	; 255
    3214:	be 01       	movw	r22, r28
    3216:	60 51       	subi	r22, 0x10	; 16
    3218:	7f 4f       	sbci	r23, 0xFF	; 255
    321a:	4d 91       	ld	r20, X+
    321c:	f9 01       	movw	r30, r18
    321e:	41 93       	st	Z+, r20
    3220:	9f 01       	movw	r18, r30
    3222:	a6 17       	cp	r26, r22
    3224:	b7 07       	cpc	r27, r23
    3226:	c9 f7       	brne	.-14     	; 0x321a <eepromSavePattern+0x13e>
    3228:	9e 01       	movw	r18, r28
    322a:	27 5b       	subi	r18, 0xB7	; 183
    322c:	3f 4f       	sbci	r19, 0xFF	; 255
    322e:	de 01       	movw	r26, r28
    3230:	b3 95       	inc	r27
    3232:	fb 01       	movw	r30, r22
    3234:	41 91       	ld	r20, Z+
    3236:	bf 01       	movw	r22, r30
    3238:	f9 01       	movw	r30, r18
    323a:	41 93       	st	Z+, r20
    323c:	9f 01       	movw	r18, r30
    323e:	6a 17       	cp	r22, r26
    3240:	7b 07       	cpc	r23, r27
    3242:	b9 f7       	brne	.-18     	; 0x3232 <eepromSavePattern+0x156>
    3244:	9e 01       	movw	r18, r28
    3246:	27 5a       	subi	r18, 0xA7	; 167
    3248:	3f 4f       	sbci	r19, 0xFF	; 255
    324a:	be 01       	movw	r22, r28
    324c:	60 5f       	subi	r22, 0xF0	; 240
    324e:	7e 4f       	sbci	r23, 0xFE	; 254
    3250:	4d 91       	ld	r20, X+
    3252:	f9 01       	movw	r30, r18
    3254:	41 93       	st	Z+, r20
    3256:	9f 01       	movw	r18, r30
    3258:	a6 17       	cp	r26, r22
    325a:	b7 07       	cpc	r27, r23
    325c:	c9 f7       	brne	.-14     	; 0x3250 <eepromSavePattern+0x174>
    325e:	de 01       	movw	r26, r28
    3260:	a7 59       	subi	r26, 0x97	; 151
    3262:	bf 4f       	sbci	r27, 0xFF	; 255
    3264:	5e 01       	movw	r10, r28
    3266:	f0 ee       	ldi	r31, 0xE0	; 224
    3268:	af 1a       	sub	r10, r31
    326a:	fe ef       	ldi	r31, 0xFE	; 254
    326c:	bf 0a       	sbc	r11, r31
    326e:	fb 01       	movw	r30, r22
    3270:	21 91       	ld	r18, Z+
    3272:	bf 01       	movw	r22, r30
    3274:	2d 93       	st	X+, r18
    3276:	ea 15       	cp	r30, r10
    3278:	fb 05       	cpc	r31, r11
    327a:	c9 f7       	brne	.-14     	; 0x326e <eepromSavePattern+0x192>
    327c:	eb 96       	adiw	r28, 0x3b	; 59
    327e:	9f af       	std	Y+63, r25	; 0x3f
    3280:	eb 97       	sbiw	r28, 0x3b	; 59
    3282:	ec 96       	adiw	r28, 0x3c	; 60
    3284:	8f af       	std	Y+63, r24	; 0x3f
    3286:	ec 97       	sbiw	r28, 0x3c	; 60
    3288:	ce 58       	subi	r28, 0x8E	; 142
    328a:	de 4f       	sbci	r29, 0xFE	; 254
    328c:	88 81       	ld	r24, Y
    328e:	c2 57       	subi	r28, 0x72	; 114
    3290:	d1 40       	sbci	r29, 0x01	; 1
    3292:	ed 96       	adiw	r28, 0x3d	; 61
    3294:	8f af       	std	Y+63, r24	; 0x3f
    3296:	ed 97       	sbiw	r28, 0x3d	; 61
    3298:	85 2d       	mov	r24, r5
    329a:	c8 de       	rcall	.-624    	; 0x302c <twi_start>
    329c:	81 30       	cpi	r24, 0x01	; 1
    329e:	81 f4       	brne	.+32     	; 0x32c0 <eepromSavePattern+0x1e4>
    32a0:	84 e1       	ldi	r24, 0x14	; 20
    32a2:	ec e0       	ldi	r30, 0x0C	; 12
    32a4:	f2 e0       	ldi	r31, 0x02	; 2
    32a6:	de 01       	movw	r26, r28
    32a8:	af 57       	subi	r26, 0x7F	; 127
    32aa:	bf 4f       	sbci	r27, 0xFF	; 255
    32ac:	01 90       	ld	r0, Z+
    32ae:	0d 92       	st	X+, r0
    32b0:	8a 95       	dec	r24
    32b2:	e1 f7       	brne	.-8      	; 0x32ac <eepromSavePattern+0x1d0>
    32b4:	63 e0       	ldi	r22, 0x03	; 3
    32b6:	70 e0       	ldi	r23, 0x00	; 0
    32b8:	ce 01       	movw	r24, r28
    32ba:	8f 57       	subi	r24, 0x7F	; 127
    32bc:	9f 4f       	sbci	r25, 0xFF	; 255
    32be:	27 d9       	rcall	.-3506   	; 0x250e <outputS>
    32c0:	87 2d       	mov	r24, r7
    32c2:	e4 de       	rcall	.-568    	; 0x308c <twi_write>
    32c4:	46 2c       	mov	r4, r6
    32c6:	86 2d       	mov	r24, r6
    32c8:	e1 de       	rcall	.-574    	; 0x308c <twi_write>
    32ca:	6e 01       	movw	r12, r28
    32cc:	fd e7       	ldi	r31, 0x7D	; 125
    32ce:	cf 0e       	add	r12, r31
    32d0:	d1 1c       	adc	r13, r1
    32d2:	78 01       	movw	r14, r16
    32d4:	d7 01       	movw	r26, r14
    32d6:	8d 91       	ld	r24, X+
    32d8:	7d 01       	movw	r14, r26
    32da:	d8 de       	rcall	.-592    	; 0x308c <twi_write>
    32dc:	ce 14       	cp	r12, r14
    32de:	df 04       	cpc	r13, r15
    32e0:	c9 f7       	brne	.-14     	; 0x32d4 <eepromSavePattern+0x1f8>
    32e2:	cb de       	rcall	.-618    	; 0x307a <twi_stop>
    32e4:	ef e1       	ldi	r30, 0x1F	; 31
    32e6:	fe e4       	ldi	r31, 0x4E	; 78
    32e8:	31 97       	sbiw	r30, 0x01	; 1
    32ea:	f1 f7       	brne	.-4      	; 0x32e8 <eepromSavePattern+0x20c>
    32ec:	00 c0       	rjmp	.+0      	; 0x32ee <eepromSavePattern+0x212>
    32ee:	00 00       	nop
    32f0:	9e 01       	movw	r18, r28
    32f2:	20 5d       	subi	r18, 0xD0	; 208
    32f4:	3e 4f       	sbci	r19, 0xFE	; 254
    32f6:	f8 01       	movw	r30, r16
    32f8:	d5 01       	movw	r26, r10
    32fa:	8d 91       	ld	r24, X+
    32fc:	5d 01       	movw	r10, r26
    32fe:	81 93       	st	Z+, r24
    3300:	2a 17       	cp	r18, r26
    3302:	3b 07       	cpc	r19, r27
    3304:	c9 f7       	brne	.-14     	; 0x32f8 <eepromSavePattern+0x21c>
    3306:	de 01       	movw	r26, r28
    3308:	91 96       	adiw	r26, 0x21	; 33
    330a:	f9 01       	movw	r30, r18
    330c:	81 91       	ld	r24, Z+
    330e:	9f 01       	movw	r18, r30
    3310:	f4 01       	movw	r30, r8
    3312:	81 93       	st	Z+, r24
    3314:	4f 01       	movw	r8, r30
    3316:	ae 17       	cp	r26, r30
    3318:	bf 07       	cpc	r27, r31
    331a:	b9 f7       	brne	.-18     	; 0x330a <eepromSavePattern+0x22e>
    331c:	ce 01       	movw	r24, r28
    331e:	80 5c       	subi	r24, 0xC0	; 192
    3320:	9e 4f       	sbci	r25, 0xFE	; 254
    3322:	ae 01       	movw	r20, r28
    3324:	4f 5c       	subi	r20, 0xCF	; 207
    3326:	5f 4f       	sbci	r21, 0xFF	; 255
    3328:	fc 01       	movw	r30, r24
    332a:	21 91       	ld	r18, Z+
    332c:	cf 01       	movw	r24, r30
    332e:	2d 93       	st	X+, r18
    3330:	a4 17       	cp	r26, r20
    3332:	b5 07       	cpc	r27, r21
    3334:	c9 f7       	brne	.-14     	; 0x3328 <eepromSavePattern+0x24c>
    3336:	ce 01       	movw	r24, r28
    3338:	80 5b       	subi	r24, 0xB0	; 176
    333a:	9e 4f       	sbci	r25, 0xFE	; 254
    333c:	de 01       	movw	r26, r28
    333e:	af 5b       	subi	r26, 0xBF	; 191
    3340:	bf 4f       	sbci	r27, 0xFF	; 255
    3342:	fc 01       	movw	r30, r24
    3344:	21 91       	ld	r18, Z+
    3346:	cf 01       	movw	r24, r30
    3348:	fa 01       	movw	r30, r20
    334a:	21 93       	st	Z+, r18
    334c:	af 01       	movw	r20, r30
    334e:	ea 17       	cp	r30, r26
    3350:	fb 07       	cpc	r31, r27
    3352:	b9 f7       	brne	.-18     	; 0x3342 <eepromSavePattern+0x266>
    3354:	fe 01       	movw	r30, r28
    3356:	e0 5a       	subi	r30, 0xA0	; 160
    3358:	fe 4f       	sbci	r31, 0xFE	; 254
    335a:	9e 01       	movw	r18, r28
    335c:	20 59       	subi	r18, 0x90	; 144
    335e:	3e 4f       	sbci	r19, 0xFE	; 254
    3360:	81 91       	ld	r24, Z+
    3362:	8d 93       	st	X+, r24
    3364:	2e 17       	cp	r18, r30
    3366:	3f 07       	cpc	r19, r31
    3368:	d9 f7       	brne	.-10     	; 0x3360 <eepromSavePattern+0x284>
    336a:	ae 01       	movw	r20, r28
    336c:	4d 58       	subi	r20, 0x8D	; 141
    336e:	5e 4f       	sbci	r21, 0xFE	; 254
    3370:	ce 01       	movw	r24, r28
    3372:	8f 5a       	subi	r24, 0xAF	; 175
    3374:	9f 4f       	sbci	r25, 0xFF	; 255
    3376:	de 01       	movw	r26, r28
    3378:	ad 57       	subi	r26, 0x7D	; 125
    337a:	be 4f       	sbci	r27, 0xFE	; 254
    337c:	fa 01       	movw	r30, r20
    337e:	21 91       	ld	r18, Z+
    3380:	af 01       	movw	r20, r30
    3382:	fc 01       	movw	r30, r24
    3384:	21 93       	st	Z+, r18
    3386:	cf 01       	movw	r24, r30
    3388:	a4 17       	cp	r26, r20
    338a:	b5 07       	cpc	r27, r21
    338c:	b9 f7       	brne	.-18     	; 0x337c <eepromSavePattern+0x2a0>
    338e:	ce 01       	movw	r24, r28
    3390:	8f 59       	subi	r24, 0x9F	; 159
    3392:	9f 4f       	sbci	r25, 0xFF	; 255
    3394:	ae 01       	movw	r20, r28
    3396:	4d 56       	subi	r20, 0x6D	; 109
    3398:	5e 4f       	sbci	r21, 0xFE	; 254
    339a:	2d 91       	ld	r18, X+
    339c:	fc 01       	movw	r30, r24
    339e:	21 93       	st	Z+, r18
    33a0:	cf 01       	movw	r24, r30
    33a2:	a4 17       	cp	r26, r20
    33a4:	b5 07       	cpc	r27, r21
    33a6:	c9 f7       	brne	.-14     	; 0x339a <eepromSavePattern+0x2be>
    33a8:	de 01       	movw	r26, r28
    33aa:	af 58       	subi	r26, 0x8F	; 143
    33ac:	bf 4f       	sbci	r27, 0xFF	; 255
    33ae:	7e 01       	movw	r14, r28
    33b0:	fd e5       	ldi	r31, 0x5D	; 93
    33b2:	ef 1a       	sub	r14, r31
    33b4:	fe ef       	ldi	r31, 0xFE	; 254
    33b6:	ff 0a       	sbc	r15, r31
    33b8:	fa 01       	movw	r30, r20
    33ba:	81 91       	ld	r24, Z+
    33bc:	af 01       	movw	r20, r30
    33be:	8d 93       	st	X+, r24
    33c0:	ee 16       	cp	r14, r30
    33c2:	ff 06       	cpc	r15, r31
    33c4:	c9 f7       	brne	.-14     	; 0x33b8 <eepromSavePattern+0x2dc>
    33c6:	85 2d       	mov	r24, r5
    33c8:	31 de       	rcall	.-926    	; 0x302c <twi_start>
    33ca:	81 30       	cpi	r24, 0x01	; 1
    33cc:	81 f4       	brne	.+32     	; 0x33ee <eepromSavePattern+0x312>
    33ce:	84 e1       	ldi	r24, 0x14	; 20
    33d0:	e1 e2       	ldi	r30, 0x21	; 33
    33d2:	f2 e0       	ldi	r31, 0x02	; 2
    33d4:	de 01       	movw	r26, r28
    33d6:	af 57       	subi	r26, 0x7F	; 127
    33d8:	bf 4f       	sbci	r27, 0xFF	; 255
    33da:	01 90       	ld	r0, Z+
    33dc:	0d 92       	st	X+, r0
    33de:	8a 95       	dec	r24
    33e0:	e1 f7       	brne	.-8      	; 0x33da <eepromSavePattern+0x2fe>
    33e2:	63 e0       	ldi	r22, 0x03	; 3
    33e4:	70 e0       	ldi	r23, 0x00	; 0
    33e6:	ce 01       	movw	r24, r28
    33e8:	8f 57       	subi	r24, 0x7F	; 127
    33ea:	9f 4f       	sbci	r25, 0xFF	; 255
    33ec:	90 d8       	rcall	.-3808   	; 0x250e <outputS>
    33ee:	c3 01       	movw	r24, r6
    33f0:	80 58       	subi	r24, 0x80	; 128
    33f2:	9f 4f       	sbci	r25, 0xFF	; 255
    33f4:	89 2f       	mov	r24, r25
    33f6:	4a de       	rcall	.-876    	; 0x308c <twi_write>
    33f8:	80 e8       	ldi	r24, 0x80	; 128
    33fa:	84 0d       	add	r24, r4
    33fc:	47 de       	rcall	.-882    	; 0x308c <twi_write>
    33fe:	6e 01       	movw	r12, r28
    3400:	f1 e8       	ldi	r31, 0x81	; 129
    3402:	cf 0e       	add	r12, r31
    3404:	d1 1c       	adc	r13, r1
    3406:	d8 01       	movw	r26, r16
    3408:	8d 91       	ld	r24, X+
    340a:	8d 01       	movw	r16, r26
    340c:	3f de       	rcall	.-898    	; 0x308c <twi_write>
    340e:	c0 16       	cp	r12, r16
    3410:	d1 06       	cpc	r13, r17
    3412:	c9 f7       	brne	.-14     	; 0x3406 <eepromSavePattern+0x32a>
    3414:	32 de       	rcall	.-924    	; 0x307a <twi_stop>
    3416:	ef e1       	ldi	r30, 0x1F	; 31
    3418:	fe e4       	ldi	r31, 0x4E	; 78
    341a:	31 97       	sbiw	r30, 0x01	; 1
    341c:	f1 f7       	brne	.-4      	; 0x341a <eepromSavePattern+0x33e>
    341e:	00 c0       	rjmp	.+0      	; 0x3420 <eepromSavePattern+0x344>
    3420:	00 00       	nop
    3422:	85 2d       	mov	r24, r5
    3424:	03 de       	rcall	.-1018   	; 0x302c <twi_start>
    3426:	81 30       	cpi	r24, 0x01	; 1
    3428:	81 f4       	brne	.+32     	; 0x344a <eepromSavePattern+0x36e>
    342a:	84 e1       	ldi	r24, 0x14	; 20
    342c:	e6 e3       	ldi	r30, 0x36	; 54
    342e:	f2 e0       	ldi	r31, 0x02	; 2
    3430:	de 01       	movw	r26, r28
    3432:	af 57       	subi	r26, 0x7F	; 127
    3434:	bf 4f       	sbci	r27, 0xFF	; 255
    3436:	01 90       	ld	r0, Z+
    3438:	0d 92       	st	X+, r0
    343a:	8a 95       	dec	r24
    343c:	e1 f7       	brne	.-8      	; 0x3436 <eepromSavePattern+0x35a>
    343e:	63 e0       	ldi	r22, 0x03	; 3
    3440:	70 e0       	ldi	r23, 0x00	; 0
    3442:	ce 01       	movw	r24, r28
    3444:	8f 57       	subi	r24, 0x7F	; 127
    3446:	9f 4f       	sbci	r25, 0xFF	; 255
    3448:	62 d8       	rcall	.-3900   	; 0x250e <outputS>
    344a:	73 94       	inc	r7
    344c:	87 2d       	mov	r24, r7
    344e:	1e de       	rcall	.-964    	; 0x308c <twi_write>
    3450:	84 2d       	mov	r24, r4
    3452:	1c de       	rcall	.-968    	; 0x308c <twi_write>
    3454:	6e 01       	movw	r12, r28
    3456:	2d ed       	ldi	r18, 0xDD	; 221
    3458:	c2 1a       	sub	r12, r18
    345a:	2d ef       	ldi	r18, 0xFD	; 253
    345c:	d2 0a       	sbc	r13, r18
    345e:	d7 01       	movw	r26, r14
    3460:	1c 91       	ld	r17, X
    3462:	11 96       	adiw	r26, 0x01	; 1
    3464:	8c 91       	ld	r24, X
    3466:	b2 e0       	ldi	r27, 0x02	; 2
    3468:	eb 0e       	add	r14, r27
    346a:	f1 1c       	adc	r15, r1
    346c:	0f de       	rcall	.-994    	; 0x308c <twi_write>
    346e:	81 2f       	mov	r24, r17
    3470:	0d de       	rcall	.-998    	; 0x308c <twi_write>
    3472:	ce 14       	cp	r12, r14
    3474:	df 04       	cpc	r13, r15
    3476:	99 f7       	brne	.-26     	; 0x345e <eepromSavePattern+0x382>
    3478:	00 de       	rcall	.-1024   	; 0x307a <twi_stop>
    347a:	ef e1       	ldi	r30, 0x1F	; 31
    347c:	fe e4       	ldi	r31, 0x4E	; 78
    347e:	31 97       	sbiw	r30, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <eepromSavePattern+0x3a2>
    3482:	00 c0       	rjmp	.+0      	; 0x3484 <eepromSavePattern+0x3a8>
    3484:	00 00       	nop
    3486:	cc 56       	subi	r28, 0x6C	; 108
    3488:	df 4f       	sbci	r29, 0xFF	; 255
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	f8 94       	cli
    348e:	de bf       	out	0x3e, r29	; 62
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	cd bf       	out	0x3d, r28	; 61
    3494:	df 91       	pop	r29
    3496:	cf 91       	pop	r28
    3498:	1f 91       	pop	r17
    349a:	0f 91       	pop	r16
    349c:	ff 90       	pop	r15
    349e:	ef 90       	pop	r14
    34a0:	df 90       	pop	r13
    34a2:	cf 90       	pop	r12
    34a4:	bf 90       	pop	r11
    34a6:	af 90       	pop	r10
    34a8:	9f 90       	pop	r9
    34aa:	8f 90       	pop	r8
    34ac:	7f 90       	pop	r7
    34ae:	6f 90       	pop	r6
    34b0:	5f 90       	pop	r5
    34b2:	4f 90       	pop	r4
    34b4:	08 95       	ret

000034b6 <eepromLoadPattern>:
    34b6:	8f 92       	push	r8
    34b8:	9f 92       	push	r9
    34ba:	af 92       	push	r10
    34bc:	bf 92       	push	r11
    34be:	cf 92       	push	r12
    34c0:	df 92       	push	r13
    34c2:	ef 92       	push	r14
    34c4:	ff 92       	push	r15
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	c4 59       	subi	r28, 0x94	; 148
    34d4:	d1 40       	sbci	r29, 0x01	; 1
    34d6:	0f b6       	in	r0, 0x3f	; 63
    34d8:	f8 94       	cli
    34da:	de bf       	out	0x3e, r29	; 62
    34dc:	0f be       	out	0x3f, r0	; 63
    34de:	cd bf       	out	0x3d, r28	; 61
    34e0:	7c 01       	movw	r14, r24
    34e2:	86 2f       	mov	r24, r22
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	66 23       	and	r22, r22
    34e8:	84 f0       	brlt	.+32     	; 0x350a <eepromLoadPattern+0x54>
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	9c 01       	movw	r18, r24
    34ee:	22 0f       	add	r18, r18
    34f0:	33 1f       	adc	r19, r19
    34f2:	82 0f       	add	r24, r18
    34f4:	93 1f       	adc	r25, r19
    34f6:	96 95       	lsr	r25
    34f8:	98 2f       	mov	r25, r24
    34fa:	88 27       	eor	r24, r24
    34fc:	97 95       	ror	r25
    34fe:	87 95       	ror	r24
    3500:	08 2f       	mov	r16, r24
    3502:	d9 2e       	mov	r13, r25
    3504:	80 ea       	ldi	r24, 0xA0	; 160
    3506:	11 ea       	ldi	r17, 0xA1	; 161
    3508:	10 c0       	rjmp	.+32     	; 0x352a <eepromLoadPattern+0x74>
    350a:	80 58       	subi	r24, 0x80	; 128
    350c:	91 09       	sbc	r25, r1
    350e:	9c 01       	movw	r18, r24
    3510:	22 0f       	add	r18, r18
    3512:	33 1f       	adc	r19, r19
    3514:	82 0f       	add	r24, r18
    3516:	93 1f       	adc	r25, r19
    3518:	96 95       	lsr	r25
    351a:	98 2f       	mov	r25, r24
    351c:	88 27       	eor	r24, r24
    351e:	97 95       	ror	r25
    3520:	87 95       	ror	r24
    3522:	08 2f       	mov	r16, r24
    3524:	d9 2e       	mov	r13, r25
    3526:	88 ea       	ldi	r24, 0xA8	; 168
    3528:	19 ea       	ldi	r17, 0xA9	; 169
    352a:	80 dd       	rcall	.-1280   	; 0x302c <twi_start>
    352c:	81 30       	cpi	r24, 0x01	; 1
    352e:	31 f4       	brne	.+12     	; 0x353c <eepromLoadPattern+0x86>
    3530:	63 e0       	ldi	r22, 0x03	; 3
    3532:	70 e0       	ldi	r23, 0x00	; 0
    3534:	87 ea       	ldi	r24, 0xA7	; 167
    3536:	93 e0       	ldi	r25, 0x03	; 3
    3538:	0e 94 87 12 	call	0x250e	; 0x250e <outputS>
    353c:	8d 2d       	mov	r24, r13
    353e:	a6 dd       	rcall	.-1204   	; 0x308c <twi_write>
    3540:	80 2f       	mov	r24, r16
    3542:	a4 dd       	rcall	.-1208   	; 0x308c <twi_write>
    3544:	81 2f       	mov	r24, r17
    3546:	72 dd       	rcall	.-1308   	; 0x302c <twi_start>
    3548:	81 30       	cpi	r24, 0x01	; 1
    354a:	09 f0       	breq	.+2      	; 0x354e <eepromLoadPattern+0x98>
    354c:	48 c1       	rjmp	.+656    	; 0x37de <eepromLoadPattern+0x328>
    354e:	84 e1       	ldi	r24, 0x14	; 20
    3550:	eb e4       	ldi	r30, 0x4B	; 75
    3552:	f2 e0       	ldi	r31, 0x02	; 2
    3554:	de 01       	movw	r26, r28
    3556:	af 57       	subi	r26, 0x7F	; 127
    3558:	be 4f       	sbci	r27, 0xFE	; 254
    355a:	01 90       	ld	r0, Z+
    355c:	0d 92       	st	X+, r0
    355e:	8a 95       	dec	r24
    3560:	e1 f7       	brne	.-8      	; 0x355a <eepromLoadPattern+0xa4>
    3562:	63 e0       	ldi	r22, 0x03	; 3
    3564:	70 e0       	ldi	r23, 0x00	; 0
    3566:	ce 01       	movw	r24, r28
    3568:	8f 57       	subi	r24, 0x7F	; 127
    356a:	9e 4f       	sbci	r25, 0xFE	; 254
    356c:	0e 94 87 12 	call	0x250e	; 0x250e <outputS>
    3570:	36 c1       	rjmp	.+620    	; 0x37de <eepromLoadPattern+0x328>
    3572:	9e dd       	rcall	.-1220   	; 0x30b0 <twi_readAck>
    3574:	d8 01       	movw	r26, r16
    3576:	8d 93       	st	X+, r24
    3578:	8d 01       	movw	r16, r26
    357a:	ac 15       	cp	r26, r12
    357c:	bd 05       	cpc	r27, r13
    357e:	c9 f7       	brne	.-14     	; 0x3572 <eepromLoadPattern+0xbc>
    3580:	a2 dd       	rcall	.-1212   	; 0x30c6 <twi_readNak>
    3582:	c0 58       	subi	r28, 0x80	; 128
    3584:	de 4f       	sbci	r29, 0xFE	; 254
    3586:	88 83       	st	Y, r24
    3588:	c0 58       	subi	r28, 0x80	; 128
    358a:	d1 40       	sbci	r29, 0x01	; 1
    358c:	76 dd       	rcall	.-1300   	; 0x307a <twi_stop>
    358e:	87 01       	movw	r16, r14
    3590:	4e 01       	movw	r8, r28
    3592:	b9 e0       	ldi	r27, 0x09	; 9
    3594:	8b 0e       	add	r8, r27
    3596:	91 1c       	adc	r9, r1
    3598:	f7 01       	movw	r30, r14
    359a:	d5 01       	movw	r26, r10
    359c:	8d 91       	ld	r24, X+
    359e:	5d 01       	movw	r10, r26
    35a0:	81 93       	st	Z+, r24
    35a2:	a8 15       	cp	r26, r8
    35a4:	b9 05       	cpc	r27, r9
    35a6:	c9 f7       	brne	.-14     	; 0x359a <eepromLoadPattern+0xe4>
    35a8:	d1 2c       	mov	r13, r1
    35aa:	f4 01       	movw	r30, r8
    35ac:	81 91       	ld	r24, Z+
    35ae:	4f 01       	movw	r8, r30
    35b0:	f8 01       	movw	r30, r16
    35b2:	80 87       	std	Z+8, r24	; 0x08
    35b4:	4d 2d       	mov	r20, r13
    35b6:	60 81       	ld	r22, Z
    35b8:	0f 5f       	subi	r16, 0xFF	; 255
    35ba:	1f 4f       	sbci	r17, 0xFF	; 255
    35bc:	08 db       	rcall	.-2544   	; 0x2bce <setOutputVolume>
    35be:	d3 94       	inc	r13
    35c0:	f8 e0       	ldi	r31, 0x08	; 8
    35c2:	df 12       	cpse	r13, r31
    35c4:	f2 cf       	rjmp	.-28     	; 0x35aa <eepromLoadPattern+0xf4>
    35c6:	5e 01       	movw	r10, r28
    35c8:	81 e1       	ldi	r24, 0x11	; 17
    35ca:	a8 0e       	add	r10, r24
    35cc:	b1 1c       	adc	r11, r1
    35ce:	67 01       	movw	r12, r14
    35d0:	90 e1       	ldi	r25, 0x10	; 16
    35d2:	c9 0e       	add	r12, r25
    35d4:	d1 1c       	adc	r13, r1
    35d6:	10 e0       	ldi	r17, 0x00	; 0
    35d8:	d5 01       	movw	r26, r10
    35da:	4d 91       	ld	r20, X+
    35dc:	5d 01       	movw	r10, r26
    35de:	f6 01       	movw	r30, r12
    35e0:	41 93       	st	Z+, r20
    35e2:	6f 01       	movw	r12, r30
    35e4:	60 e0       	ldi	r22, 0x00	; 0
    35e6:	81 2f       	mov	r24, r17
    35e8:	69 db       	rcall	.-2350   	; 0x2cbc <outputSampleRate>
    35ea:	1f 5f       	subi	r17, 0xFF	; 255
    35ec:	18 30       	cpi	r17, 0x08	; 8
    35ee:	a1 f7       	brne	.-24     	; 0x35d8 <eepromLoadPattern+0x122>
    35f0:	fe 01       	movw	r30, r28
    35f2:	79 96       	adiw	r30, 0x19	; 25
    35f4:	c7 01       	movw	r24, r14
    35f6:	48 96       	adiw	r24, 0x18	; 24
    35f8:	ae 01       	movw	r20, r28
    35fa:	47 5d       	subi	r20, 0xD7	; 215
    35fc:	5f 4f       	sbci	r21, 0xFF	; 255
    35fe:	21 91       	ld	r18, Z+
    3600:	dc 01       	movw	r26, r24
    3602:	2d 93       	st	X+, r18
    3604:	cd 01       	movw	r24, r26
    3606:	e4 17       	cp	r30, r20
    3608:	f5 07       	cpc	r31, r21
    360a:	c9 f7       	brne	.-14     	; 0x35fe <eepromLoadPattern+0x148>
    360c:	57 01       	movw	r10, r14
    360e:	b8 e2       	ldi	r27, 0x28	; 40
    3610:	ab 0e       	add	r10, r27
    3612:	b1 1c       	adc	r11, r1
    3614:	de 01       	movw	r26, r28
    3616:	d9 96       	adiw	r26, 0x39	; 57
    3618:	c5 01       	movw	r24, r10
    361a:	fa 01       	movw	r30, r20
    361c:	21 91       	ld	r18, Z+
    361e:	af 01       	movw	r20, r30
    3620:	fc 01       	movw	r30, r24
    3622:	21 93       	st	Z+, r18
    3624:	cf 01       	movw	r24, r30
    3626:	4a 17       	cp	r20, r26
    3628:	5b 07       	cpc	r21, r27
    362a:	b9 f7       	brne	.-18     	; 0x361a <eepromLoadPattern+0x164>
    362c:	c7 01       	movw	r24, r14
    362e:	c8 96       	adiw	r24, 0x38	; 56
    3630:	ae 01       	movw	r20, r28
    3632:	47 5b       	subi	r20, 0xB7	; 183
    3634:	5f 4f       	sbci	r21, 0xFF	; 255
    3636:	2d 91       	ld	r18, X+
    3638:	fc 01       	movw	r30, r24
    363a:	21 93       	st	Z+, r18
    363c:	cf 01       	movw	r24, r30
    363e:	a4 17       	cp	r26, r20
    3640:	b5 07       	cpc	r27, r21
    3642:	c9 f7       	brne	.-14     	; 0x3636 <eepromLoadPattern+0x180>
    3644:	c7 01       	movw	r24, r14
    3646:	88 5b       	subi	r24, 0xB8	; 184
    3648:	9f 4f       	sbci	r25, 0xFF	; 255
    364a:	de 01       	movw	r26, r28
    364c:	a7 5a       	subi	r26, 0xA7	; 167
    364e:	bf 4f       	sbci	r27, 0xFF	; 255
    3650:	fa 01       	movw	r30, r20
    3652:	21 91       	ld	r18, Z+
    3654:	af 01       	movw	r20, r30
    3656:	fc 01       	movw	r30, r24
    3658:	21 93       	st	Z+, r18
    365a:	cf 01       	movw	r24, r30
    365c:	4a 17       	cp	r20, r26
    365e:	5b 07       	cpc	r21, r27
    3660:	b9 f7       	brne	.-18     	; 0x3650 <eepromLoadPattern+0x19a>
    3662:	c7 01       	movw	r24, r14
    3664:	88 5a       	subi	r24, 0xA8	; 168
    3666:	9f 4f       	sbci	r25, 0xFF	; 255
    3668:	ae 01       	movw	r20, r28
    366a:	47 59       	subi	r20, 0x97	; 151
    366c:	5f 4f       	sbci	r21, 0xFF	; 255
    366e:	2d 91       	ld	r18, X+
    3670:	fc 01       	movw	r30, r24
    3672:	21 93       	st	Z+, r18
    3674:	cf 01       	movw	r24, r30
    3676:	a4 17       	cp	r26, r20
    3678:	b5 07       	cpc	r27, r21
    367a:	c9 f7       	brne	.-14     	; 0x366e <eepromLoadPattern+0x1b8>
    367c:	d7 01       	movw	r26, r14
    367e:	a8 59       	subi	r26, 0x98	; 152
    3680:	bf 4f       	sbci	r27, 0xFF	; 255
    3682:	9e 01       	movw	r18, r28
    3684:	27 58       	subi	r18, 0x87	; 135
    3686:	3f 4f       	sbci	r19, 0xFF	; 255
    3688:	fa 01       	movw	r30, r20
    368a:	81 91       	ld	r24, Z+
    368c:	af 01       	movw	r20, r30
    368e:	8d 93       	st	X+, r24
    3690:	e2 17       	cp	r30, r18
    3692:	f3 07       	cpc	r31, r19
    3694:	c9 f7       	brne	.-14     	; 0x3688 <eepromLoadPattern+0x1d2>
    3696:	f7 01       	movw	r30, r14
    3698:	e8 53       	subi	r30, 0x38	; 56
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	eb 96       	adiw	r28, 0x3b	; 59
    369e:	8f ad       	ldd	r24, Y+63	; 0x3f
    36a0:	eb 97       	sbiw	r28, 0x3b	; 59
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	98 2f       	mov	r25, r24
    36a6:	88 27       	eor	r24, r24
    36a8:	ec 96       	adiw	r28, 0x3c	; 60
    36aa:	2f ad       	ldd	r18, Y+63	; 0x3f
    36ac:	ec 97       	sbiw	r28, 0x3c	; 60
    36ae:	82 2b       	or	r24, r18
    36b0:	91 83       	std	Z+1, r25	; 0x01
    36b2:	80 83       	st	Z, r24
    36b4:	ed 96       	adiw	r28, 0x3d	; 61
    36b6:	8f ad       	ldd	r24, Y+63	; 0x3f
    36b8:	ed 97       	sbiw	r28, 0x3d	; 61
    36ba:	32 96       	adiw	r30, 0x02	; 2
    36bc:	80 83       	st	Z, r24
    36be:	ae 01       	movw	r20, r28
    36c0:	4f 57       	subi	r20, 0x7F	; 127
    36c2:	5f 4f       	sbci	r21, 0xFF	; 255
    36c4:	c7 01       	movw	r24, r14
    36c6:	88 58       	subi	r24, 0x88	; 136
    36c8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ca:	fe 01       	movw	r30, r28
    36cc:	ef 56       	subi	r30, 0x6F	; 111
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	da 01       	movw	r26, r20
    36d2:	2d 91       	ld	r18, X+
    36d4:	ad 01       	movw	r20, r26
    36d6:	dc 01       	movw	r26, r24
    36d8:	2d 93       	st	X+, r18
    36da:	cd 01       	movw	r24, r26
    36dc:	e4 17       	cp	r30, r20
    36de:	f5 07       	cpc	r31, r21
    36e0:	b9 f7       	brne	.-18     	; 0x36d0 <eepromLoadPattern+0x21a>
    36e2:	c7 01       	movw	r24, r14
    36e4:	88 57       	subi	r24, 0x78	; 120
    36e6:	9f 4f       	sbci	r25, 0xFF	; 255
    36e8:	ae 01       	movw	r20, r28
    36ea:	4f 55       	subi	r20, 0x5F	; 95
    36ec:	5f 4f       	sbci	r21, 0xFF	; 255
    36ee:	21 91       	ld	r18, Z+
    36f0:	dc 01       	movw	r26, r24
    36f2:	2d 93       	st	X+, r18
    36f4:	cd 01       	movw	r24, r26
    36f6:	4e 17       	cp	r20, r30
    36f8:	5f 07       	cpc	r21, r31
    36fa:	c9 f7       	brne	.-14     	; 0x36ee <eepromLoadPattern+0x238>
    36fc:	87 01       	movw	r16, r14
    36fe:	08 56       	subi	r16, 0x68	; 104
    3700:	1f 4f       	sbci	r17, 0xFF	; 255
    3702:	4e 01       	movw	r8, r28
    3704:	b1 eb       	ldi	r27, 0xB1	; 177
    3706:	8b 0e       	add	r8, r27
    3708:	91 1c       	adc	r9, r1
    370a:	f8 01       	movw	r30, r16
    370c:	da 01       	movw	r26, r20
    370e:	8d 91       	ld	r24, X+
    3710:	ad 01       	movw	r20, r26
    3712:	81 93       	st	Z+, r24
    3714:	8a 16       	cp	r8, r26
    3716:	9b 06       	cpc	r9, r27
    3718:	c9 f7       	brne	.-14     	; 0x370c <eepromLoadPattern+0x256>
    371a:	6e 01       	movw	r12, r28
    371c:	b1 ec       	ldi	r27, 0xC1	; 193
    371e:	cb 0e       	add	r12, r27
    3720:	d1 1c       	adc	r13, r1
    3722:	f4 01       	movw	r30, r8
    3724:	81 91       	ld	r24, Z+
    3726:	4f 01       	movw	r8, r30
    3728:	f8 01       	movw	r30, r16
    372a:	80 8b       	std	Z+16, r24	; 0x10
    372c:	d5 01       	movw	r26, r10
    372e:	2d 91       	ld	r18, X+
    3730:	5d 01       	movw	r10, r26
    3732:	1f 96       	adiw	r26, 0x0f	; 15
    3734:	4c 91       	ld	r20, X
    3736:	60 81       	ld	r22, Z
    3738:	0f 5f       	subi	r16, 0xFF	; 255
    373a:	1f 4f       	sbci	r17, 0xFF	; 255
    373c:	6c da       	rcall	.-2856   	; 0x2c16 <setTrackVolume>
    373e:	c8 14       	cp	r12, r8
    3740:	d9 04       	cpc	r13, r9
    3742:	79 f7       	brne	.-34     	; 0x3722 <eepromLoadPattern+0x26c>
    3744:	97 01       	movw	r18, r14
    3746:	28 54       	subi	r18, 0x48	; 72
    3748:	3f 4f       	sbci	r19, 0xFF	; 255
    374a:	de 01       	movw	r26, r28
    374c:	af 52       	subi	r26, 0x2F	; 47
    374e:	bf 4f       	sbci	r27, 0xFF	; 255
    3750:	f6 01       	movw	r30, r12
    3752:	81 91       	ld	r24, Z+
    3754:	6f 01       	movw	r12, r30
    3756:	f9 01       	movw	r30, r18
    3758:	81 93       	st	Z+, r24
    375a:	9f 01       	movw	r18, r30
    375c:	ca 16       	cp	r12, r26
    375e:	db 06       	cpc	r13, r27
    3760:	b9 f7       	brne	.-18     	; 0x3750 <eepromLoadPattern+0x29a>
    3762:	c7 01       	movw	r24, r14
    3764:	85 53       	subi	r24, 0x35	; 53
    3766:	9f 4f       	sbci	r25, 0xFF	; 255
    3768:	ae 01       	movw	r20, r28
    376a:	4f 51       	subi	r20, 0x1F	; 31
    376c:	5f 4f       	sbci	r21, 0xFF	; 255
    376e:	2d 91       	ld	r18, X+
    3770:	fc 01       	movw	r30, r24
    3772:	21 93       	st	Z+, r18
    3774:	cf 01       	movw	r24, r30
    3776:	4a 17       	cp	r20, r26
    3778:	5b 07       	cpc	r21, r27
    377a:	c9 f7       	brne	.-14     	; 0x376e <eepromLoadPattern+0x2b8>
    377c:	c7 01       	movw	r24, r14
    377e:	85 52       	subi	r24, 0x25	; 37
    3780:	9f 4f       	sbci	r25, 0xFF	; 255
    3782:	be 01       	movw	r22, r28
    3784:	6f 50       	subi	r22, 0x0F	; 15
    3786:	7f 4f       	sbci	r23, 0xFF	; 255
    3788:	da 01       	movw	r26, r20
    378a:	2d 91       	ld	r18, X+
    378c:	ad 01       	movw	r20, r26
    378e:	fc 01       	movw	r30, r24
    3790:	21 93       	st	Z+, r18
    3792:	cf 01       	movw	r24, r30
    3794:	a6 17       	cp	r26, r22
    3796:	b7 07       	cpc	r27, r23
    3798:	b9 f7       	brne	.-18     	; 0x3788 <eepromLoadPattern+0x2d2>
    379a:	c7 01       	movw	r24, r14
    379c:	85 51       	subi	r24, 0x15	; 21
    379e:	9f 4f       	sbci	r25, 0xFF	; 255
    37a0:	fe 01       	movw	r30, r28
    37a2:	ef 5f       	subi	r30, 0xFF	; 255
    37a4:	fe 4f       	sbci	r31, 0xFE	; 254
    37a6:	db 01       	movw	r26, r22
    37a8:	2d 91       	ld	r18, X+
    37aa:	bd 01       	movw	r22, r26
    37ac:	dc 01       	movw	r26, r24
    37ae:	2d 93       	st	X+, r18
    37b0:	cd 01       	movw	r24, r26
    37b2:	e6 17       	cp	r30, r22
    37b4:	f7 07       	cpc	r31, r23
    37b6:	b9 f7       	brne	.-18     	; 0x37a6 <eepromLoadPattern+0x2f0>
    37b8:	d7 01       	movw	r26, r14
    37ba:	a5 50       	subi	r26, 0x05	; 5
    37bc:	bf 4f       	sbci	r27, 0xFF	; 255
    37be:	ae 01       	movw	r20, r28
    37c0:	4f 57       	subi	r20, 0x7F	; 127
    37c2:	5e 4f       	sbci	r21, 0xFE	; 254
    37c4:	80 81       	ld	r24, Z
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	98 2f       	mov	r25, r24
    37ca:	88 27       	eor	r24, r24
    37cc:	21 81       	ldd	r18, Z+1	; 0x01
    37ce:	82 2b       	or	r24, r18
    37d0:	8d 93       	st	X+, r24
    37d2:	9d 93       	st	X+, r25
    37d4:	32 96       	adiw	r30, 0x02	; 2
    37d6:	4e 17       	cp	r20, r30
    37d8:	5f 07       	cpc	r21, r31
    37da:	a1 f7       	brne	.-24     	; 0x37c4 <eepromLoadPattern+0x30e>
    37dc:	0a c0       	rjmp	.+20     	; 0x37f2 <eepromLoadPattern+0x33c>
    37de:	fe 01       	movw	r30, r28
    37e0:	31 96       	adiw	r30, 0x01	; 1
    37e2:	5f 01       	movw	r10, r30
    37e4:	6e 01       	movw	r12, r28
    37e6:	f0 e8       	ldi	r31, 0x80	; 128
    37e8:	cf 1a       	sub	r12, r31
    37ea:	fe ef       	ldi	r31, 0xFE	; 254
    37ec:	df 0a       	sbc	r13, r31
    37ee:	85 01       	movw	r16, r10
    37f0:	c0 ce       	rjmp	.-640    	; 0x3572 <eepromLoadPattern+0xbc>
    37f2:	cc 56       	subi	r28, 0x6C	; 108
    37f4:	de 4f       	sbci	r29, 0xFE	; 254
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	df 91       	pop	r29
    3802:	cf 91       	pop	r28
    3804:	1f 91       	pop	r17
    3806:	0f 91       	pop	r16
    3808:	ff 90       	pop	r15
    380a:	ef 90       	pop	r14
    380c:	df 90       	pop	r13
    380e:	cf 90       	pop	r12
    3810:	bf 90       	pop	r11
    3812:	af 90       	pop	r10
    3814:	9f 90       	pop	r9
    3816:	8f 90       	pop	r8
    3818:	08 95       	ret

0000381a <globalWrite>:

//this happens when save button is pressed on global menu. 
void globalWrite(Globals *currentGlobals)
{
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	ec 01       	movw	r28, r24
	eeprom_write_byte(0,currentGlobals->midiChannel); //this may be wrong, but it does get rid of the warning. 
    3820:	6c 85       	ldd	r22, Y+12	; 0x0c
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	46 d2       	rcall	.+1164   	; 0x3cb4 <eeprom_write_byte>
	eeprom_write_block(currentGlobals->midiTrackNote,1,16);
    3828:	40 e1       	ldi	r20, 0x10	; 16
    382a:	50 e0       	ldi	r21, 0x00	; 0
    382c:	61 e0       	ldi	r22, 0x01	; 1
    382e:	70 e0       	ldi	r23, 0x00	; 0
    3830:	ce 01       	movw	r24, r28
    3832:	0d 96       	adiw	r24, 0x0d	; 13
    3834:	36 d2       	rcall	.+1132   	; 0x3ca2 <eeprom_write_block>
}
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	08 95       	ret

0000383c <globalLoad>:
//This happens at startup only, in function "initGlobals"

void globalLoad(Globals *currentGlobals, uint8_t factoryReset)
{
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
	//we need to load all of the global midi settings here. 
	//we can also check the factory reset bit here. 
	//if the program has not gone through the initial state, and had the internal eeprom formatted, then this will return garbage. 
	if(factoryReset==0)
    3840:	61 11       	cpse	r22, r1
    3842:	0c c0       	rjmp	.+24     	; 0x385c <globalLoad+0x20>
    3844:	ec 01       	movw	r28, r24
	{
		currentGlobals->midiChannel = eeprom_read_byte(0);
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	23 d2       	rcall	.+1094   	; 0x3c92 <eeprom_read_byte>
    384c:	8c 87       	std	Y+12, r24	; 0x0c
		eeprom_read_block(currentGlobals->midiTrackNote,1,16);
    384e:	40 e1       	ldi	r20, 0x10	; 16
    3850:	50 e0       	ldi	r21, 0x00	; 0
    3852:	61 e0       	ldi	r22, 0x01	; 1
    3854:	70 e0       	ldi	r23, 0x00	; 0
    3856:	ce 01       	movw	r24, r28
    3858:	0d 96       	adiw	r24, 0x0d	; 13
    385a:	0b d2       	rcall	.+1046   	; 0x3c72 <eeprom_read_block>
	}
}
    385c:	df 91       	pop	r29
    385e:	cf 91       	pop	r28
    3860:	08 95       	ret

00003862 <__subsf3>:
    3862:	50 58       	subi	r21, 0x80	; 128

00003864 <__addsf3>:
    3864:	bb 27       	eor	r27, r27
    3866:	aa 27       	eor	r26, r26
    3868:	0e d0       	rcall	.+28     	; 0x3886 <__addsf3x>
    386a:	4d c1       	rjmp	.+666    	; 0x3b06 <__fp_round>
    386c:	3e d1       	rcall	.+636    	; 0x3aea <__fp_pscA>
    386e:	30 f0       	brcs	.+12     	; 0x387c <__addsf3+0x18>
    3870:	43 d1       	rcall	.+646    	; 0x3af8 <__fp_pscB>
    3872:	20 f0       	brcs	.+8      	; 0x387c <__addsf3+0x18>
    3874:	31 f4       	brne	.+12     	; 0x3882 <__addsf3+0x1e>
    3876:	9f 3f       	cpi	r25, 0xFF	; 255
    3878:	11 f4       	brne	.+4      	; 0x387e <__addsf3+0x1a>
    387a:	1e f4       	brtc	.+6      	; 0x3882 <__addsf3+0x1e>
    387c:	33 c1       	rjmp	.+614    	; 0x3ae4 <__fp_nan>
    387e:	0e f4       	brtc	.+2      	; 0x3882 <__addsf3+0x1e>
    3880:	e0 95       	com	r30
    3882:	e7 fb       	bst	r30, 7
    3884:	29 c1       	rjmp	.+594    	; 0x3ad8 <__fp_inf>

00003886 <__addsf3x>:
    3886:	e9 2f       	mov	r30, r25
    3888:	4f d1       	rcall	.+670    	; 0x3b28 <__fp_split3>
    388a:	80 f3       	brcs	.-32     	; 0x386c <__addsf3+0x8>
    388c:	ba 17       	cp	r27, r26
    388e:	62 07       	cpc	r22, r18
    3890:	73 07       	cpc	r23, r19
    3892:	84 07       	cpc	r24, r20
    3894:	95 07       	cpc	r25, r21
    3896:	18 f0       	brcs	.+6      	; 0x389e <__addsf3x+0x18>
    3898:	71 f4       	brne	.+28     	; 0x38b6 <__addsf3x+0x30>
    389a:	9e f5       	brtc	.+102    	; 0x3902 <__addsf3x+0x7c>
    389c:	67 c1       	rjmp	.+718    	; 0x3b6c <__fp_zero>
    389e:	0e f4       	brtc	.+2      	; 0x38a2 <__addsf3x+0x1c>
    38a0:	e0 95       	com	r30
    38a2:	0b 2e       	mov	r0, r27
    38a4:	ba 2f       	mov	r27, r26
    38a6:	a0 2d       	mov	r26, r0
    38a8:	0b 01       	movw	r0, r22
    38aa:	b9 01       	movw	r22, r18
    38ac:	90 01       	movw	r18, r0
    38ae:	0c 01       	movw	r0, r24
    38b0:	ca 01       	movw	r24, r20
    38b2:	a0 01       	movw	r20, r0
    38b4:	11 24       	eor	r1, r1
    38b6:	ff 27       	eor	r31, r31
    38b8:	59 1b       	sub	r21, r25
    38ba:	99 f0       	breq	.+38     	; 0x38e2 <__addsf3x+0x5c>
    38bc:	59 3f       	cpi	r21, 0xF9	; 249
    38be:	50 f4       	brcc	.+20     	; 0x38d4 <__addsf3x+0x4e>
    38c0:	50 3e       	cpi	r21, 0xE0	; 224
    38c2:	68 f1       	brcs	.+90     	; 0x391e <__addsf3x+0x98>
    38c4:	1a 16       	cp	r1, r26
    38c6:	f0 40       	sbci	r31, 0x00	; 0
    38c8:	a2 2f       	mov	r26, r18
    38ca:	23 2f       	mov	r18, r19
    38cc:	34 2f       	mov	r19, r20
    38ce:	44 27       	eor	r20, r20
    38d0:	58 5f       	subi	r21, 0xF8	; 248
    38d2:	f3 cf       	rjmp	.-26     	; 0x38ba <__addsf3x+0x34>
    38d4:	46 95       	lsr	r20
    38d6:	37 95       	ror	r19
    38d8:	27 95       	ror	r18
    38da:	a7 95       	ror	r26
    38dc:	f0 40       	sbci	r31, 0x00	; 0
    38de:	53 95       	inc	r21
    38e0:	c9 f7       	brne	.-14     	; 0x38d4 <__addsf3x+0x4e>
    38e2:	7e f4       	brtc	.+30     	; 0x3902 <__addsf3x+0x7c>
    38e4:	1f 16       	cp	r1, r31
    38e6:	ba 0b       	sbc	r27, r26
    38e8:	62 0b       	sbc	r22, r18
    38ea:	73 0b       	sbc	r23, r19
    38ec:	84 0b       	sbc	r24, r20
    38ee:	ba f0       	brmi	.+46     	; 0x391e <__addsf3x+0x98>
    38f0:	91 50       	subi	r25, 0x01	; 1
    38f2:	a1 f0       	breq	.+40     	; 0x391c <__addsf3x+0x96>
    38f4:	ff 0f       	add	r31, r31
    38f6:	bb 1f       	adc	r27, r27
    38f8:	66 1f       	adc	r22, r22
    38fa:	77 1f       	adc	r23, r23
    38fc:	88 1f       	adc	r24, r24
    38fe:	c2 f7       	brpl	.-16     	; 0x38f0 <__addsf3x+0x6a>
    3900:	0e c0       	rjmp	.+28     	; 0x391e <__addsf3x+0x98>
    3902:	ba 0f       	add	r27, r26
    3904:	62 1f       	adc	r22, r18
    3906:	73 1f       	adc	r23, r19
    3908:	84 1f       	adc	r24, r20
    390a:	48 f4       	brcc	.+18     	; 0x391e <__addsf3x+0x98>
    390c:	87 95       	ror	r24
    390e:	77 95       	ror	r23
    3910:	67 95       	ror	r22
    3912:	b7 95       	ror	r27
    3914:	f7 95       	ror	r31
    3916:	9e 3f       	cpi	r25, 0xFE	; 254
    3918:	08 f0       	brcs	.+2      	; 0x391c <__addsf3x+0x96>
    391a:	b3 cf       	rjmp	.-154    	; 0x3882 <__addsf3+0x1e>
    391c:	93 95       	inc	r25
    391e:	88 0f       	add	r24, r24
    3920:	08 f0       	brcs	.+2      	; 0x3924 <__addsf3x+0x9e>
    3922:	99 27       	eor	r25, r25
    3924:	ee 0f       	add	r30, r30
    3926:	97 95       	ror	r25
    3928:	87 95       	ror	r24
    392a:	08 95       	ret

0000392c <__divsf3>:
    392c:	0c d0       	rcall	.+24     	; 0x3946 <__divsf3x>
    392e:	eb c0       	rjmp	.+470    	; 0x3b06 <__fp_round>
    3930:	e3 d0       	rcall	.+454    	; 0x3af8 <__fp_pscB>
    3932:	40 f0       	brcs	.+16     	; 0x3944 <__divsf3+0x18>
    3934:	da d0       	rcall	.+436    	; 0x3aea <__fp_pscA>
    3936:	30 f0       	brcs	.+12     	; 0x3944 <__divsf3+0x18>
    3938:	21 f4       	brne	.+8      	; 0x3942 <__divsf3+0x16>
    393a:	5f 3f       	cpi	r21, 0xFF	; 255
    393c:	19 f0       	breq	.+6      	; 0x3944 <__divsf3+0x18>
    393e:	cc c0       	rjmp	.+408    	; 0x3ad8 <__fp_inf>
    3940:	51 11       	cpse	r21, r1
    3942:	15 c1       	rjmp	.+554    	; 0x3b6e <__fp_szero>
    3944:	cf c0       	rjmp	.+414    	; 0x3ae4 <__fp_nan>

00003946 <__divsf3x>:
    3946:	f0 d0       	rcall	.+480    	; 0x3b28 <__fp_split3>
    3948:	98 f3       	brcs	.-26     	; 0x3930 <__divsf3+0x4>

0000394a <__divsf3_pse>:
    394a:	99 23       	and	r25, r25
    394c:	c9 f3       	breq	.-14     	; 0x3940 <__divsf3+0x14>
    394e:	55 23       	and	r21, r21
    3950:	b1 f3       	breq	.-20     	; 0x393e <__divsf3+0x12>
    3952:	95 1b       	sub	r25, r21
    3954:	55 0b       	sbc	r21, r21
    3956:	bb 27       	eor	r27, r27
    3958:	aa 27       	eor	r26, r26
    395a:	62 17       	cp	r22, r18
    395c:	73 07       	cpc	r23, r19
    395e:	84 07       	cpc	r24, r20
    3960:	38 f0       	brcs	.+14     	; 0x3970 <__divsf3_pse+0x26>
    3962:	9f 5f       	subi	r25, 0xFF	; 255
    3964:	5f 4f       	sbci	r21, 0xFF	; 255
    3966:	22 0f       	add	r18, r18
    3968:	33 1f       	adc	r19, r19
    396a:	44 1f       	adc	r20, r20
    396c:	aa 1f       	adc	r26, r26
    396e:	a9 f3       	breq	.-22     	; 0x395a <__divsf3_pse+0x10>
    3970:	33 d0       	rcall	.+102    	; 0x39d8 <__divsf3_pse+0x8e>
    3972:	0e 2e       	mov	r0, r30
    3974:	3a f0       	brmi	.+14     	; 0x3984 <__divsf3_pse+0x3a>
    3976:	e0 e8       	ldi	r30, 0x80	; 128
    3978:	30 d0       	rcall	.+96     	; 0x39da <__divsf3_pse+0x90>
    397a:	91 50       	subi	r25, 0x01	; 1
    397c:	50 40       	sbci	r21, 0x00	; 0
    397e:	e6 95       	lsr	r30
    3980:	00 1c       	adc	r0, r0
    3982:	ca f7       	brpl	.-14     	; 0x3976 <__divsf3_pse+0x2c>
    3984:	29 d0       	rcall	.+82     	; 0x39d8 <__divsf3_pse+0x8e>
    3986:	fe 2f       	mov	r31, r30
    3988:	27 d0       	rcall	.+78     	; 0x39d8 <__divsf3_pse+0x8e>
    398a:	66 0f       	add	r22, r22
    398c:	77 1f       	adc	r23, r23
    398e:	88 1f       	adc	r24, r24
    3990:	bb 1f       	adc	r27, r27
    3992:	26 17       	cp	r18, r22
    3994:	37 07       	cpc	r19, r23
    3996:	48 07       	cpc	r20, r24
    3998:	ab 07       	cpc	r26, r27
    399a:	b0 e8       	ldi	r27, 0x80	; 128
    399c:	09 f0       	breq	.+2      	; 0x39a0 <__divsf3_pse+0x56>
    399e:	bb 0b       	sbc	r27, r27
    39a0:	80 2d       	mov	r24, r0
    39a2:	bf 01       	movw	r22, r30
    39a4:	ff 27       	eor	r31, r31
    39a6:	93 58       	subi	r25, 0x83	; 131
    39a8:	5f 4f       	sbci	r21, 0xFF	; 255
    39aa:	2a f0       	brmi	.+10     	; 0x39b6 <__divsf3_pse+0x6c>
    39ac:	9e 3f       	cpi	r25, 0xFE	; 254
    39ae:	51 05       	cpc	r21, r1
    39b0:	68 f0       	brcs	.+26     	; 0x39cc <__divsf3_pse+0x82>
    39b2:	92 c0       	rjmp	.+292    	; 0x3ad8 <__fp_inf>
    39b4:	dc c0       	rjmp	.+440    	; 0x3b6e <__fp_szero>
    39b6:	5f 3f       	cpi	r21, 0xFF	; 255
    39b8:	ec f3       	brlt	.-6      	; 0x39b4 <__divsf3_pse+0x6a>
    39ba:	98 3e       	cpi	r25, 0xE8	; 232
    39bc:	dc f3       	brlt	.-10     	; 0x39b4 <__divsf3_pse+0x6a>
    39be:	86 95       	lsr	r24
    39c0:	77 95       	ror	r23
    39c2:	67 95       	ror	r22
    39c4:	b7 95       	ror	r27
    39c6:	f7 95       	ror	r31
    39c8:	9f 5f       	subi	r25, 0xFF	; 255
    39ca:	c9 f7       	brne	.-14     	; 0x39be <__divsf3_pse+0x74>
    39cc:	88 0f       	add	r24, r24
    39ce:	91 1d       	adc	r25, r1
    39d0:	96 95       	lsr	r25
    39d2:	87 95       	ror	r24
    39d4:	97 f9       	bld	r25, 7
    39d6:	08 95       	ret
    39d8:	e1 e0       	ldi	r30, 0x01	; 1
    39da:	66 0f       	add	r22, r22
    39dc:	77 1f       	adc	r23, r23
    39de:	88 1f       	adc	r24, r24
    39e0:	bb 1f       	adc	r27, r27
    39e2:	62 17       	cp	r22, r18
    39e4:	73 07       	cpc	r23, r19
    39e6:	84 07       	cpc	r24, r20
    39e8:	ba 07       	cpc	r27, r26
    39ea:	20 f0       	brcs	.+8      	; 0x39f4 <__divsf3_pse+0xaa>
    39ec:	62 1b       	sub	r22, r18
    39ee:	73 0b       	sbc	r23, r19
    39f0:	84 0b       	sbc	r24, r20
    39f2:	ba 0b       	sbc	r27, r26
    39f4:	ee 1f       	adc	r30, r30
    39f6:	88 f7       	brcc	.-30     	; 0x39da <__divsf3_pse+0x90>
    39f8:	e0 95       	com	r30
    39fa:	08 95       	ret

000039fc <__fixsfsi>:
    39fc:	04 d0       	rcall	.+8      	; 0x3a06 <__fixunssfsi>
    39fe:	68 94       	set
    3a00:	b1 11       	cpse	r27, r1
    3a02:	b5 c0       	rjmp	.+362    	; 0x3b6e <__fp_szero>
    3a04:	08 95       	ret

00003a06 <__fixunssfsi>:
    3a06:	98 d0       	rcall	.+304    	; 0x3b38 <__fp_splitA>
    3a08:	88 f0       	brcs	.+34     	; 0x3a2c <__fixunssfsi+0x26>
    3a0a:	9f 57       	subi	r25, 0x7F	; 127
    3a0c:	90 f0       	brcs	.+36     	; 0x3a32 <__fixunssfsi+0x2c>
    3a0e:	b9 2f       	mov	r27, r25
    3a10:	99 27       	eor	r25, r25
    3a12:	b7 51       	subi	r27, 0x17	; 23
    3a14:	a0 f0       	brcs	.+40     	; 0x3a3e <__fixunssfsi+0x38>
    3a16:	d1 f0       	breq	.+52     	; 0x3a4c <__fixunssfsi+0x46>
    3a18:	66 0f       	add	r22, r22
    3a1a:	77 1f       	adc	r23, r23
    3a1c:	88 1f       	adc	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	1a f0       	brmi	.+6      	; 0x3a28 <__fixunssfsi+0x22>
    3a22:	ba 95       	dec	r27
    3a24:	c9 f7       	brne	.-14     	; 0x3a18 <__fixunssfsi+0x12>
    3a26:	12 c0       	rjmp	.+36     	; 0x3a4c <__fixunssfsi+0x46>
    3a28:	b1 30       	cpi	r27, 0x01	; 1
    3a2a:	81 f0       	breq	.+32     	; 0x3a4c <__fixunssfsi+0x46>
    3a2c:	9f d0       	rcall	.+318    	; 0x3b6c <__fp_zero>
    3a2e:	b1 e0       	ldi	r27, 0x01	; 1
    3a30:	08 95       	ret
    3a32:	9c c0       	rjmp	.+312    	; 0x3b6c <__fp_zero>
    3a34:	67 2f       	mov	r22, r23
    3a36:	78 2f       	mov	r23, r24
    3a38:	88 27       	eor	r24, r24
    3a3a:	b8 5f       	subi	r27, 0xF8	; 248
    3a3c:	39 f0       	breq	.+14     	; 0x3a4c <__fixunssfsi+0x46>
    3a3e:	b9 3f       	cpi	r27, 0xF9	; 249
    3a40:	cc f3       	brlt	.-14     	; 0x3a34 <__fixunssfsi+0x2e>
    3a42:	86 95       	lsr	r24
    3a44:	77 95       	ror	r23
    3a46:	67 95       	ror	r22
    3a48:	b3 95       	inc	r27
    3a4a:	d9 f7       	brne	.-10     	; 0x3a42 <__fixunssfsi+0x3c>
    3a4c:	3e f4       	brtc	.+14     	; 0x3a5c <__fixunssfsi+0x56>
    3a4e:	90 95       	com	r25
    3a50:	80 95       	com	r24
    3a52:	70 95       	com	r23
    3a54:	61 95       	neg	r22
    3a56:	7f 4f       	sbci	r23, 0xFF	; 255
    3a58:	8f 4f       	sbci	r24, 0xFF	; 255
    3a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5c:	08 95       	ret

00003a5e <__floatunsisf>:
    3a5e:	e8 94       	clt
    3a60:	09 c0       	rjmp	.+18     	; 0x3a74 <__floatsisf+0x12>

00003a62 <__floatsisf>:
    3a62:	97 fb       	bst	r25, 7
    3a64:	3e f4       	brtc	.+14     	; 0x3a74 <__floatsisf+0x12>
    3a66:	90 95       	com	r25
    3a68:	80 95       	com	r24
    3a6a:	70 95       	com	r23
    3a6c:	61 95       	neg	r22
    3a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a70:	8f 4f       	sbci	r24, 0xFF	; 255
    3a72:	9f 4f       	sbci	r25, 0xFF	; 255
    3a74:	99 23       	and	r25, r25
    3a76:	a9 f0       	breq	.+42     	; 0x3aa2 <__floatsisf+0x40>
    3a78:	f9 2f       	mov	r31, r25
    3a7a:	96 e9       	ldi	r25, 0x96	; 150
    3a7c:	bb 27       	eor	r27, r27
    3a7e:	93 95       	inc	r25
    3a80:	f6 95       	lsr	r31
    3a82:	87 95       	ror	r24
    3a84:	77 95       	ror	r23
    3a86:	67 95       	ror	r22
    3a88:	b7 95       	ror	r27
    3a8a:	f1 11       	cpse	r31, r1
    3a8c:	f8 cf       	rjmp	.-16     	; 0x3a7e <__floatsisf+0x1c>
    3a8e:	fa f4       	brpl	.+62     	; 0x3ace <__floatsisf+0x6c>
    3a90:	bb 0f       	add	r27, r27
    3a92:	11 f4       	brne	.+4      	; 0x3a98 <__floatsisf+0x36>
    3a94:	60 ff       	sbrs	r22, 0
    3a96:	1b c0       	rjmp	.+54     	; 0x3ace <__floatsisf+0x6c>
    3a98:	6f 5f       	subi	r22, 0xFF	; 255
    3a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa0:	16 c0       	rjmp	.+44     	; 0x3ace <__floatsisf+0x6c>
    3aa2:	88 23       	and	r24, r24
    3aa4:	11 f0       	breq	.+4      	; 0x3aaa <__floatsisf+0x48>
    3aa6:	96 e9       	ldi	r25, 0x96	; 150
    3aa8:	11 c0       	rjmp	.+34     	; 0x3acc <__floatsisf+0x6a>
    3aaa:	77 23       	and	r23, r23
    3aac:	21 f0       	breq	.+8      	; 0x3ab6 <__floatsisf+0x54>
    3aae:	9e e8       	ldi	r25, 0x8E	; 142
    3ab0:	87 2f       	mov	r24, r23
    3ab2:	76 2f       	mov	r23, r22
    3ab4:	05 c0       	rjmp	.+10     	; 0x3ac0 <__floatsisf+0x5e>
    3ab6:	66 23       	and	r22, r22
    3ab8:	71 f0       	breq	.+28     	; 0x3ad6 <__floatsisf+0x74>
    3aba:	96 e8       	ldi	r25, 0x86	; 134
    3abc:	86 2f       	mov	r24, r22
    3abe:	70 e0       	ldi	r23, 0x00	; 0
    3ac0:	60 e0       	ldi	r22, 0x00	; 0
    3ac2:	2a f0       	brmi	.+10     	; 0x3ace <__floatsisf+0x6c>
    3ac4:	9a 95       	dec	r25
    3ac6:	66 0f       	add	r22, r22
    3ac8:	77 1f       	adc	r23, r23
    3aca:	88 1f       	adc	r24, r24
    3acc:	da f7       	brpl	.-10     	; 0x3ac4 <__floatsisf+0x62>
    3ace:	88 0f       	add	r24, r24
    3ad0:	96 95       	lsr	r25
    3ad2:	87 95       	ror	r24
    3ad4:	97 f9       	bld	r25, 7
    3ad6:	08 95       	ret

00003ad8 <__fp_inf>:
    3ad8:	97 f9       	bld	r25, 7
    3ada:	9f 67       	ori	r25, 0x7F	; 127
    3adc:	80 e8       	ldi	r24, 0x80	; 128
    3ade:	70 e0       	ldi	r23, 0x00	; 0
    3ae0:	60 e0       	ldi	r22, 0x00	; 0
    3ae2:	08 95       	ret

00003ae4 <__fp_nan>:
    3ae4:	9f ef       	ldi	r25, 0xFF	; 255
    3ae6:	80 ec       	ldi	r24, 0xC0	; 192
    3ae8:	08 95       	ret

00003aea <__fp_pscA>:
    3aea:	00 24       	eor	r0, r0
    3aec:	0a 94       	dec	r0
    3aee:	16 16       	cp	r1, r22
    3af0:	17 06       	cpc	r1, r23
    3af2:	18 06       	cpc	r1, r24
    3af4:	09 06       	cpc	r0, r25
    3af6:	08 95       	ret

00003af8 <__fp_pscB>:
    3af8:	00 24       	eor	r0, r0
    3afa:	0a 94       	dec	r0
    3afc:	12 16       	cp	r1, r18
    3afe:	13 06       	cpc	r1, r19
    3b00:	14 06       	cpc	r1, r20
    3b02:	05 06       	cpc	r0, r21
    3b04:	08 95       	ret

00003b06 <__fp_round>:
    3b06:	09 2e       	mov	r0, r25
    3b08:	03 94       	inc	r0
    3b0a:	00 0c       	add	r0, r0
    3b0c:	11 f4       	brne	.+4      	; 0x3b12 <__fp_round+0xc>
    3b0e:	88 23       	and	r24, r24
    3b10:	52 f0       	brmi	.+20     	; 0x3b26 <__fp_round+0x20>
    3b12:	bb 0f       	add	r27, r27
    3b14:	40 f4       	brcc	.+16     	; 0x3b26 <__fp_round+0x20>
    3b16:	bf 2b       	or	r27, r31
    3b18:	11 f4       	brne	.+4      	; 0x3b1e <__fp_round+0x18>
    3b1a:	60 ff       	sbrs	r22, 0
    3b1c:	04 c0       	rjmp	.+8      	; 0x3b26 <__fp_round+0x20>
    3b1e:	6f 5f       	subi	r22, 0xFF	; 255
    3b20:	7f 4f       	sbci	r23, 0xFF	; 255
    3b22:	8f 4f       	sbci	r24, 0xFF	; 255
    3b24:	9f 4f       	sbci	r25, 0xFF	; 255
    3b26:	08 95       	ret

00003b28 <__fp_split3>:
    3b28:	57 fd       	sbrc	r21, 7
    3b2a:	90 58       	subi	r25, 0x80	; 128
    3b2c:	44 0f       	add	r20, r20
    3b2e:	55 1f       	adc	r21, r21
    3b30:	59 f0       	breq	.+22     	; 0x3b48 <__fp_splitA+0x10>
    3b32:	5f 3f       	cpi	r21, 0xFF	; 255
    3b34:	71 f0       	breq	.+28     	; 0x3b52 <__fp_splitA+0x1a>
    3b36:	47 95       	ror	r20

00003b38 <__fp_splitA>:
    3b38:	88 0f       	add	r24, r24
    3b3a:	97 fb       	bst	r25, 7
    3b3c:	99 1f       	adc	r25, r25
    3b3e:	61 f0       	breq	.+24     	; 0x3b58 <__fp_splitA+0x20>
    3b40:	9f 3f       	cpi	r25, 0xFF	; 255
    3b42:	79 f0       	breq	.+30     	; 0x3b62 <__fp_splitA+0x2a>
    3b44:	87 95       	ror	r24
    3b46:	08 95       	ret
    3b48:	12 16       	cp	r1, r18
    3b4a:	13 06       	cpc	r1, r19
    3b4c:	14 06       	cpc	r1, r20
    3b4e:	55 1f       	adc	r21, r21
    3b50:	f2 cf       	rjmp	.-28     	; 0x3b36 <__fp_split3+0xe>
    3b52:	46 95       	lsr	r20
    3b54:	f1 df       	rcall	.-30     	; 0x3b38 <__fp_splitA>
    3b56:	08 c0       	rjmp	.+16     	; 0x3b68 <__fp_splitA+0x30>
    3b58:	16 16       	cp	r1, r22
    3b5a:	17 06       	cpc	r1, r23
    3b5c:	18 06       	cpc	r1, r24
    3b5e:	99 1f       	adc	r25, r25
    3b60:	f1 cf       	rjmp	.-30     	; 0x3b44 <__fp_splitA+0xc>
    3b62:	86 95       	lsr	r24
    3b64:	71 05       	cpc	r23, r1
    3b66:	61 05       	cpc	r22, r1
    3b68:	08 94       	sec
    3b6a:	08 95       	ret

00003b6c <__fp_zero>:
    3b6c:	e8 94       	clt

00003b6e <__fp_szero>:
    3b6e:	bb 27       	eor	r27, r27
    3b70:	66 27       	eor	r22, r22
    3b72:	77 27       	eor	r23, r23
    3b74:	cb 01       	movw	r24, r22
    3b76:	97 f9       	bld	r25, 7
    3b78:	08 95       	ret

00003b7a <__divmodhi4>:
    3b7a:	97 fb       	bst	r25, 7
    3b7c:	07 2e       	mov	r0, r23
    3b7e:	16 f4       	brtc	.+4      	; 0x3b84 <__divmodhi4+0xa>
    3b80:	00 94       	com	r0
    3b82:	06 d0       	rcall	.+12     	; 0x3b90 <__divmodhi4_neg1>
    3b84:	77 fd       	sbrc	r23, 7
    3b86:	08 d0       	rcall	.+16     	; 0x3b98 <__divmodhi4_neg2>
    3b88:	3e d0       	rcall	.+124    	; 0x3c06 <__udivmodhi4>
    3b8a:	07 fc       	sbrc	r0, 7
    3b8c:	05 d0       	rcall	.+10     	; 0x3b98 <__divmodhi4_neg2>
    3b8e:	3e f4       	brtc	.+14     	; 0x3b9e <__divmodhi4_exit>

00003b90 <__divmodhi4_neg1>:
    3b90:	90 95       	com	r25
    3b92:	81 95       	neg	r24
    3b94:	9f 4f       	sbci	r25, 0xFF	; 255
    3b96:	08 95       	ret

00003b98 <__divmodhi4_neg2>:
    3b98:	70 95       	com	r23
    3b9a:	61 95       	neg	r22
    3b9c:	7f 4f       	sbci	r23, 0xFF	; 255

00003b9e <__divmodhi4_exit>:
    3b9e:	08 95       	ret

00003ba0 <__divmodsi4>:
    3ba0:	05 2e       	mov	r0, r21
    3ba2:	97 fb       	bst	r25, 7
    3ba4:	16 f4       	brtc	.+4      	; 0x3baa <__divmodsi4+0xa>
    3ba6:	00 94       	com	r0
    3ba8:	0f d0       	rcall	.+30     	; 0x3bc8 <__negsi2>
    3baa:	57 fd       	sbrc	r21, 7
    3bac:	05 d0       	rcall	.+10     	; 0x3bb8 <__divmodsi4_neg2>
    3bae:	3f d0       	rcall	.+126    	; 0x3c2e <__udivmodsi4>
    3bb0:	07 fc       	sbrc	r0, 7
    3bb2:	02 d0       	rcall	.+4      	; 0x3bb8 <__divmodsi4_neg2>
    3bb4:	46 f4       	brtc	.+16     	; 0x3bc6 <__divmodsi4_exit>
    3bb6:	08 c0       	rjmp	.+16     	; 0x3bc8 <__negsi2>

00003bb8 <__divmodsi4_neg2>:
    3bb8:	50 95       	com	r21
    3bba:	40 95       	com	r20
    3bbc:	30 95       	com	r19
    3bbe:	21 95       	neg	r18
    3bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc2:	4f 4f       	sbci	r20, 0xFF	; 255
    3bc4:	5f 4f       	sbci	r21, 0xFF	; 255

00003bc6 <__divmodsi4_exit>:
    3bc6:	08 95       	ret

00003bc8 <__negsi2>:
    3bc8:	90 95       	com	r25
    3bca:	80 95       	com	r24
    3bcc:	70 95       	com	r23
    3bce:	61 95       	neg	r22
    3bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    3bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd6:	08 95       	ret

00003bd8 <__tablejump2__>:
    3bd8:	ee 0f       	add	r30, r30
    3bda:	ff 1f       	adc	r31, r31
    3bdc:	88 1f       	adc	r24, r24
    3bde:	8b bf       	out	0x3b, r24	; 59
    3be0:	07 90       	elpm	r0, Z+
    3be2:	f6 91       	elpm	r31, Z
    3be4:	e0 2d       	mov	r30, r0
    3be6:	19 94       	eijmp

00003be8 <__umulhisi3>:
    3be8:	a2 9f       	mul	r26, r18
    3bea:	b0 01       	movw	r22, r0
    3bec:	b3 9f       	mul	r27, r19
    3bee:	c0 01       	movw	r24, r0
    3bf0:	a3 9f       	mul	r26, r19
    3bf2:	70 0d       	add	r23, r0
    3bf4:	81 1d       	adc	r24, r1
    3bf6:	11 24       	eor	r1, r1
    3bf8:	91 1d       	adc	r25, r1
    3bfa:	b2 9f       	mul	r27, r18
    3bfc:	70 0d       	add	r23, r0
    3bfe:	81 1d       	adc	r24, r1
    3c00:	11 24       	eor	r1, r1
    3c02:	91 1d       	adc	r25, r1
    3c04:	08 95       	ret

00003c06 <__udivmodhi4>:
    3c06:	aa 1b       	sub	r26, r26
    3c08:	bb 1b       	sub	r27, r27
    3c0a:	51 e1       	ldi	r21, 0x11	; 17
    3c0c:	07 c0       	rjmp	.+14     	; 0x3c1c <__udivmodhi4_ep>

00003c0e <__udivmodhi4_loop>:
    3c0e:	aa 1f       	adc	r26, r26
    3c10:	bb 1f       	adc	r27, r27
    3c12:	a6 17       	cp	r26, r22
    3c14:	b7 07       	cpc	r27, r23
    3c16:	10 f0       	brcs	.+4      	; 0x3c1c <__udivmodhi4_ep>
    3c18:	a6 1b       	sub	r26, r22
    3c1a:	b7 0b       	sbc	r27, r23

00003c1c <__udivmodhi4_ep>:
    3c1c:	88 1f       	adc	r24, r24
    3c1e:	99 1f       	adc	r25, r25
    3c20:	5a 95       	dec	r21
    3c22:	a9 f7       	brne	.-22     	; 0x3c0e <__udivmodhi4_loop>
    3c24:	80 95       	com	r24
    3c26:	90 95       	com	r25
    3c28:	bc 01       	movw	r22, r24
    3c2a:	cd 01       	movw	r24, r26
    3c2c:	08 95       	ret

00003c2e <__udivmodsi4>:
    3c2e:	a1 e2       	ldi	r26, 0x21	; 33
    3c30:	1a 2e       	mov	r1, r26
    3c32:	aa 1b       	sub	r26, r26
    3c34:	bb 1b       	sub	r27, r27
    3c36:	fd 01       	movw	r30, r26
    3c38:	0d c0       	rjmp	.+26     	; 0x3c54 <__udivmodsi4_ep>

00003c3a <__udivmodsi4_loop>:
    3c3a:	aa 1f       	adc	r26, r26
    3c3c:	bb 1f       	adc	r27, r27
    3c3e:	ee 1f       	adc	r30, r30
    3c40:	ff 1f       	adc	r31, r31
    3c42:	a2 17       	cp	r26, r18
    3c44:	b3 07       	cpc	r27, r19
    3c46:	e4 07       	cpc	r30, r20
    3c48:	f5 07       	cpc	r31, r21
    3c4a:	20 f0       	brcs	.+8      	; 0x3c54 <__udivmodsi4_ep>
    3c4c:	a2 1b       	sub	r26, r18
    3c4e:	b3 0b       	sbc	r27, r19
    3c50:	e4 0b       	sbc	r30, r20
    3c52:	f5 0b       	sbc	r31, r21

00003c54 <__udivmodsi4_ep>:
    3c54:	66 1f       	adc	r22, r22
    3c56:	77 1f       	adc	r23, r23
    3c58:	88 1f       	adc	r24, r24
    3c5a:	99 1f       	adc	r25, r25
    3c5c:	1a 94       	dec	r1
    3c5e:	69 f7       	brne	.-38     	; 0x3c3a <__udivmodsi4_loop>
    3c60:	60 95       	com	r22
    3c62:	70 95       	com	r23
    3c64:	80 95       	com	r24
    3c66:	90 95       	com	r25
    3c68:	9b 01       	movw	r18, r22
    3c6a:	ac 01       	movw	r20, r24
    3c6c:	bd 01       	movw	r22, r26
    3c6e:	cf 01       	movw	r24, r30
    3c70:	08 95       	ret

00003c72 <eeprom_read_block>:
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22

00003c76 <eeprom_read_blraw>:
    3c76:	fc 01       	movw	r30, r24
    3c78:	f9 99       	sbic	0x1f, 1	; 31
    3c7a:	fe cf       	rjmp	.-4      	; 0x3c78 <eeprom_read_blraw+0x2>
    3c7c:	06 c0       	rjmp	.+12     	; 0x3c8a <eeprom_read_blraw+0x14>
    3c7e:	f2 bd       	out	0x22, r31	; 34
    3c80:	e1 bd       	out	0x21, r30	; 33
    3c82:	f8 9a       	sbi	0x1f, 0	; 31
    3c84:	31 96       	adiw	r30, 0x01	; 1
    3c86:	00 b4       	in	r0, 0x20	; 32
    3c88:	0d 92       	st	X+, r0
    3c8a:	41 50       	subi	r20, 0x01	; 1
    3c8c:	50 40       	sbci	r21, 0x00	; 0
    3c8e:	b8 f7       	brcc	.-18     	; 0x3c7e <eeprom_read_blraw+0x8>
    3c90:	08 95       	ret

00003c92 <eeprom_read_byte>:
    3c92:	f9 99       	sbic	0x1f, 1	; 31
    3c94:	fe cf       	rjmp	.-4      	; 0x3c92 <eeprom_read_byte>
    3c96:	92 bd       	out	0x22, r25	; 34
    3c98:	81 bd       	out	0x21, r24	; 33
    3c9a:	f8 9a       	sbi	0x1f, 0	; 31
    3c9c:	99 27       	eor	r25, r25
    3c9e:	80 b5       	in	r24, 0x20	; 32
    3ca0:	08 95       	ret

00003ca2 <eeprom_write_block>:
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	02 c0       	rjmp	.+4      	; 0x3cac <eeprom_write_block+0xa>
    3ca8:	2d 91       	ld	r18, X+
    3caa:	05 d0       	rcall	.+10     	; 0x3cb6 <eeprom_write_r18>
    3cac:	41 50       	subi	r20, 0x01	; 1
    3cae:	50 40       	sbci	r21, 0x00	; 0
    3cb0:	d8 f7       	brcc	.-10     	; 0x3ca8 <eeprom_write_block+0x6>
    3cb2:	08 95       	ret

00003cb4 <eeprom_write_byte>:
    3cb4:	26 2f       	mov	r18, r22

00003cb6 <eeprom_write_r18>:
    3cb6:	f9 99       	sbic	0x1f, 1	; 31
    3cb8:	fe cf       	rjmp	.-4      	; 0x3cb6 <eeprom_write_r18>
    3cba:	1f ba       	out	0x1f, r1	; 31
    3cbc:	92 bd       	out	0x22, r25	; 34
    3cbe:	81 bd       	out	0x21, r24	; 33
    3cc0:	20 bd       	out	0x20, r18	; 32
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	fa 9a       	sbi	0x1f, 2	; 31
    3cc8:	f9 9a       	sbi	0x1f, 1	; 31
    3cca:	0f be       	out	0x3f, r0	; 63
    3ccc:	01 96       	adiw	r24, 0x01	; 1
    3cce:	08 95       	ret

00003cd0 <_exit>:
    3cd0:	f8 94       	cli

00003cd2 <__stop_program>:
    3cd2:	ff cf       	rjmp	.-2      	; 0x3cd2 <__stop_program>
